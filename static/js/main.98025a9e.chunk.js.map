{"version":3,"sources":["CssModules/Dialog/DialogFriend.module.css","CssModules/portal.module.css","img/Avatars/senya.jpg","img/Avatars/mordovia.jpg","img/Avatars/ali.png","img/Avatars/cat.jpeg","img/Preloaders/Spinner-1.4s-3a356a.svg","CssModules/buttonsUnderAva.module.css","CssModules/Dialog/PersonDialog.module.css","img/fail-1.1s-128px.svg","img/NoResultSearch/coon.jpg","CssModules/UsersSearch/pagesSearch.module.css","CssModules/Settings/settingsStyles.module.css","CssModules/UpperMenu/UpperMenu.module.css","CssModules/Profile/MyPosts/posts.module.css","CssModules/Profile/FriendList/Friends.module.css","img/Avatars/nullPhoto.jpg","serviceWorker.js","Components/DataBases/Reducers/PostsReducer.js","Components/DataBases/API/API.ts","Components/DataBases/Reducers/FriendsReducer.ts","Components/Common/typesAPI.ts","Components/DataBases/Reducers/LoginReducer.ts","Components/DataBases/Reducers/ProfileInfoReducer.ts","Components/DataBases/Reducers/UserReducer.ts","Components/DataBases/Reducers/MessagesReducer.ts","Components/DataBases/Reducers/SubscribesReducer.js","Components/DataBases/Redux/Store.ts","Components/Common/AddButton/addButtonContainer.ts","Components/Common/AddButton/addButton.tsx","Components/Friends/FindFriends/UserDecor/FindFriendsContainer.ts","Components/Friends/FindFriends/UserDecor/findFriends.tsx","Components/Friends/FindFriends/AllUsers/usersSearch.tsx","Components/Friends/FindFriends/AllUsers/PagesButtons/pagesContainer.ts","Components/Friends/FindFriends/AllUsers/PagesButtons/pages.tsx","Components/Common/Preloader.js","Components/Friends/FindFriends/AllUsers/allUsersClassContainer.ts","Components/Friends/FindFriends/AllUsers/allUsersClass.tsx","Components/Profile/Avatar/AvatarEditor.jsx","Components/Profile/Avatar/Avatar.tsx","Components/Common/redirectToLogin.tsx","Components/Profile/MainInfo/Status/statusClassContainer.ts","Components/Profile/MainInfo/Status/statusClass.tsx","Components/Profile/MainInfo/nameAndAbout.tsx","Components/Profile/PostRedactor/PostRedactorContainer.ts","Components/Profile/PostRedactor/postRedactor.tsx","Components/Profile/MyPosts/post.tsx","Components/Profile/MyPosts/postsClassContainer.ts","Components/Profile/MyPosts/postsClass.tsx","Components/Profile/FriendList/MyFriend/FriendLittleAva.tsx","Components/Profile/FriendList/friendContainer.ts","Components/Profile/FriendList/Friend.tsx","Components/Profile/MainProfilePage/ProfileCenterInfoClassContainer.ts","Components/Profile/MainProfilePage/ProfileCenterInfoClass.tsx","Components/Validations/LoginValidate/loginValidateSync.js","Components/Validations/LoginValidate/loginValidateAsync.js","Components/Common/createFieldForm.tsx","Components/UpperMenu/Login/LoginPage/email.tsx","Components/UpperMenu/Login/LoginPage/password.tsx","Components/UpperMenu/Login/LoginPage/rememberMe.tsx","Components/UpperMenu/Login/LoginPage/captcha.tsx","Components/Validations/LoginValidate/loginAsyncForm.tsx","Components/UpperMenu/Login/LoginPage/LoginPageContainer.ts","Components/UpperMenu/Login/LoginPage/LoginPage.tsx","Components/Settings/ChangeAboutMe/changeAboutMe.tsx","Components/Settings/ChangeContacts/changeContacts.tsx","Components/Common/validator.ts","Components/Settings/ChangeLookJob/changeLookJob.tsx","Components/Settings/Ð¡hangeName/changeNameClass.tsx","Components/Settings/settingsContainer.ts","Components/Settings/settings.tsx","Components/Dialog/MainDialogPage/DialogPage/DialogMessage.tsx","Components/Dialog/MainDialogPage/DialogPage/DialogUpper.tsx","Components/Dialog/MainDialogPage/DialogPage/DialogInput/DialogInputContainer.ts","Components/Dialog/MainDialogPage/DialogPage/DialogInput/DialogInput.tsx","Components/Dialog/MainDialogPage/DialogPage/DialogPageContainer.ts","Components/Dialog/MainDialogPage/DialogPage/DialogPage.tsx","Components/Dialog/MainDialogPage/MiniDialogs/DialogsMini.tsx","Components/Common/NoResultSearch.js","Components/Dialog/MainDialogPage/DialogList.tsx","Components/Dialog/MainDialogPage/DialogListContainer.ts","Components/Dialog/MainDialogPage/DialogsContainer.ts","Components/Dialog/MainDialogPage/Dialogs.tsx","Components/Friends/myFriends/ThatFriend/ThatFriend.tsx","Components/Friends/myFriends/ThatFriend/AllFriendsContainer.ts","Components/Friends/myFriends/ThatFriend/AllFriends.tsx","Components/Friends/myFriends/friendsSearchContainer.ts","Components/Friends/myFriends/FriendsSearch.tsx","Components/Friends/myFriends/myFriends.tsx","Components/LeftMenu/navigateMenuContainer.ts","Components/LeftMenu/NavigateMenu.tsx","Components/mainText.tsx","Components/UpperMenu/Login/upperLogInfoContainer.ts","Components/UpperMenu/Login/UpperLogInfo.tsx","Components/UpperMenu/upperClassContainer.tsx","Components/MainStructure/Structure.tsx","Components/MainStructure/structureContainer.tsx","index.js","CssModules/Profile/Status/statusStyles.module.css","CssModules/Profile/MainInfo/mainInfo.module.css","CssModules/DisplayView.module.css","CssModules/LeftMenu/menu.module.css","CssModules/Login/loginStyles.module.css","CssModules/Preloader/Preloaders.module.css","CssModules/AvatarEditor/avatarEditor.module.css","CssModules/NoResultSearch/resultStyles.module.css","CssModules/content.module.css","CssModules/Friends/Friends.module.css","img/Avatars/sarumyan.jpg","img/Avatars/pendalf.jpg"],"names":["module","exports","Boolean","window","location","hostname","match","defaultStatePosts","ProfileInfo","id","Name","LastName","Status","Avatar","Sarumyan","Posts","name","text","ava","likes","Senya","Pendalf","currentProfilePosts","Temp","PostRedactor","instance","axios","create","withCredentials","headers","baseURL","instancePhoto","API","pageSize","currentPage","user","bool","get","then","response","data","status","put","email","password","remember","captcha","post","delete","formData","body","messageId","url","actionsFriends","type","defaultStateFriends","friends","tempSearch","ResultCodes","ResultCodeCaptcha","actionsLogin","login","cap","defaultStateLogin","logData","isLogged","buttonRequest","loadProfileData","actionsProfile","who","boolean","getProfileInfo","dispatch","a","getStatusThunk","getProfileThunk","responseFollow","getMyProfileThunk","items","actionsMessages","getAllDialogs","setAnotherProfile","checkWho","actionsUser","switchIsFetching","initializeApp","defaultStateProfile","logged","photos","currentProfile","contacts","followed","myProfile","defaultStateUsers","users","totalUsers","isFetching","pageButton","addButton","addUser","deleteUser","setUsers","setTotalUsers","count","setPage","page","switchIsButton","switchIsAddButton","updateSearchText","getUsersThunk","totalCount","updateMessageCreation","deleteMessageCreation","mesId","getMessagesWithUser","me","getUserAllMessagesThunk","getDialogThunk","defaultStateMessage","Dialogs","freshDialogs","defaultStateSubscribes","Mordovia","Ali","Staff","allReduces","combineReducers","postsReducer","state","action","stateCopy","checkId","length","createPost","push","checkPosts","i","splice","messageReducer","getIndex","index","Infinity","countUpdatingDialogs","hasNewMessages","large","small","emptyPhoto","Messages","userId","senderName","senderId","fullName","dialogIndex","profileInfoReducer","subscribesReducer","friendsReducer","avatar","filter","el","uniqueUrlName","usersReducer","map","us","loginReducer","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","AddButtonContainer","connect","addUserThunk","deleteUserThunk","props","useState","follow","setFollow","useEffect","deleteButtonClasses","Content","content__asideRightDeleteButton_decor","content__asideRightButtonPadding","content__asideRightButton_margin","addButtonClasses","content__asideRightButton_decor","onClick","disabled","className","getProfile","setProfile","UsersContainer","Preloaders","Preloader__backgroundOpacity","e","preventDefault","to","Dialog","display__flex","hover__decor","NavLinks__fontsDecor","Friend","Friend__Ava","display__AvaPosition","src","alt","border__borderBottom","text__NameFontsDecor","UserSearch","React","createRef","Friends","container__displayFlex","placeholder","input__width","input__decor","input__padding","ref","onChange","current","tempText","value","onKeyPress","event","which","searchRequest","PagesContainer","portionSize","pagesCount","Math","ceil","pages","portionCount","portionNumber","setPortionNumber","leftPageNumber","rightPageNumber","numberButtonsClasses","PagesButtons","button__decor","button__padding","pages_pageButtons__width","pages_pageButtons__margin","portionButtonsPrevClasses","pages_portionButtons__width","pages_portionButtonsPrev__margin","portionButtonsNextClasses","pages_portionButtonsNext__margin","totalButtons","number","button_selected__decor","pages_container__flex","pages_pageButtons__size","pages_portionButtons__size","Preloader","Preloader__position","Spinner","AllUsersClassContainer","stateUsers","content__menu_decorationBlocks","Preloader__Opacity","key","MyEditor","upImg","setUpImg","imgRef","setImgRef","unit","width","height","crop","setCrop","previewUrl","setPreviewUrl","previewLoad","setPreviewLoad","editMode","setEditMode","setDisabled","onLoad","useCallback","img","makeClientCrop","createCropPreview","image","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","file","File","URL","revokeObjectURL","createObjectURL","Error","uploadFile","FormData","append","updatePhoto","clearImgData","getElementById","buttonClasses","AvaEdit","avaEdit__button","avaEdit_button__padding","avaEdit_button__margin","fileUpload","accept","target","files","reader","FileReader","addEventListener","result","readAsDataURL","Portal","modal","cropImage__width","onImageLoaded","c","onComplete","maxHeight","maxWidth","avaEdit__buttonDisabled","AvatarPhoto","setAvatar","startDialogButtonClasses","buttonsS","main_buttons__width","content__mainContentAvatar","putNewDialogThunk","mapStateToRedirect","initialized","authRedirect","Component","RedirectComponent","this","StatusClassContainer","compose","putStatusThunk","mode","switchMode","switchStatus","StatusS","status_button__decor","status__buttonWidth","status_button__padding","status_button__margins","containerButtonClass","status_buttons__flex","inputClasses","status_input__decor","status_input__padding","onSubmit","handleSubmit","Field","autoFocus","component","status__buttonDisabled","ReduxStatusForm","reduxForm","enableReinitialize","MainInfo","more","setMore","keys","Object","values","containerClasses","InfoS","mainInfo_contacts__flexDisplay","valueClasses","mainInfo_value__margin","mainInfo_value__width","mainInfo_value__decor","keyClasses","mainInfo_key__width","mainInfo_key__decor","showMoreClasses","mainInfo_showMore__decor","content__mainContentName","initialValues","aboutMe","skills","search","toUpperCase","slice","PostRedactorContainer","updatePostTextCreation","postCreation","content__asideRightInput_decor","NewPost","display","pict","name__marginLeft","name__Fonts","title","deletePost","deleteButton__marginLeft","deleteButton__decor","post__margins","mainDecor","borderBottom","likeMainDecor","PostsClassContainer","posts","deletePostCreation","sortedPosts","elem","reverse","MyFriend","meOrNot","myId","margin","Friend__Font","FriendListContainer","font__size","display__grid","all","array","sort","random","min","friend","allFriends","ProfileCenterInfoClassContainer","myProfilePosts","subscribe","postProfilePhotoThunk","fetch","setFetch","Displays","inside_ContentProfile__displayFlex","inside_ProfileCenter__FlexProportion","inside_ProfileRight__FlexProportion","lookingForAJobDescription","lookingForAJob","validate","errors","asyncValidate","ms","setTimeout","includes","username","CreateFieldForm","label","validators","EmailField","settingsS","settings_container__flex","settings_container__margin","paramClasses","settings_param__decor","settings_input__decor","settings_input__padding","settings_input__margins","renderField","PasswordField","RememberMe","settings_checkbox","CaptchaField","loginS","captcha_container__block","captchaImgClasses","captcha_img__decor","blockClasses","captcha_block__margin","input","meta","asyncValidating","touched","error","asyncBlurFields","pristine","reset","submitting","settings__button","settings__buttonWidth","settings_button__padding","errorClass","captcha_error__decor","logThunk","ErrorSVG","captcha_errorText__margin","settings__buttonDisabled","LoginReduxForm","postLogThunk","resultCode","Success","Captcha","stopSubmit","_error","messages","buttonLoginClasses","Person","log__padding","log__button","class","ChangeAboutMe","ChangeContacts","ChangeLookJob","checkBoxClasses","ChangeName","SettingsForm","putProfileInfoThunk","Message","viewed","dialog_viewedMessages__color","dialog__flex","dialog_name__margin","dialog_img","avatars","dialog_name","dialog_time","date","deleteMessage","message__marginLeft","message__containerSize","message__marginTop","message","Upper","upper__border","upper__marginBottom","upper__font","upper_text__margin","upper_text__padding","dialogs","userName","InputContainer","dialogId","loc","postMessageThunk","input__margins","input__borderTop","inputField__border","DialogPageContainer","deleteMessageThunk","withRouter","Number","params","userID","currentMessages","allDialog","mes","addedAt","paddingOff","container","MiniDialogs","newMess","dialog_containerViewMessages","getDialogs","NoResultSearch","imgClasses","ResultS","noResult_img__decor","noResult_img__width","noResult_text__decor","noResult_img__margin","coon","DialogLists","dialogsData","pattern","RegExp","dialog","newMessagesCount","DialogsListContainer","DialogContainer","temp","ThatFriend","AllFriendsContainer","char","updateSearch","FriendSearchContainer","MyFriends","NavigateMenuContainer","MenuLeft","container__menu_grid","container__menu_decoration","Text","Objects","main__displayGRid","path","render","from","UpperLogInfoContainer","didLog","postLogOutThunk","loginButtonClasses","log__margin","log__buttonWidth","log_img","log_img__cursorPointer","log_display__flex","UpperClassContainer","UpMenu","container__menu","MacketApp","MacketAppContainer","initializate","modalRoot","Modal","appendChild","removeChild","ReactDOM","createPortal","children","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,cAAgB,oCAAoC,aAAe,mCAAmC,aAAe,mCAAmC,eAAiB,qCAAqC,qBAAuB,2CAA2C,aAAe,mCAAmC,qBAAuB,2CAA2C,qBAAuB,2CAA2C,wBAA0B,8CAA8C,qBAAuB,2CAA2C,eAAiB,qCAAqC,6BAA+B,qD,oBCAvrBD,EAAOC,QAAU,CAAC,WAAW,yBAAyB,aAAa,2BAA2B,MAAQ,sBAAsB,iBAAmB,mC,oBCD/ID,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,iD,oBCC3CD,EAAOC,QAAU,CAAC,oBAAsB,+C,mBCAxCD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,WAAa,iCAAiC,YAAc,kCAAkC,cAAgB,oCAAoC,oBAAsB,0CAA0C,mBAAqB,yCAAyC,oBAAsB,0CAA0C,aAAe,mCAAmC,WAAa,iCAAiC,YAAc,kCAAkC,oBAAsB,0CAA0C,6BAA+B,mDAAmD,YAAc,kCAAkC,eAAiB,qCAAqC,oBAAsB,0CAA0C,mBAAqB,yCAAyC,uBAAyB,6CAA6C,aAAe,mCAAmC,eAAiB,qCAAqC,mBAAqB,yCAAyC,iBAAmB,uCAAuC,yBAA2B,iD,oBCDrtCD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,kC,+ECC3CD,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,gBAAkB,qCAAqC,gBAAkB,qCAAqC,uBAAyB,4CAA4C,sBAAwB,2CAA2C,2BAA6B,gDAAgD,wBAA0B,6CAA6C,yBAA2B,8CAA8C,4BAA8B,iDAAiD,0BAA4B,+CAA+C,iCAAmC,sDAAsD,iCAAmC,wD,8DCA9yBD,EAAOC,QAAU,CAAC,yBAA2B,iDAAiD,2BAA6B,mDAAmD,sBAAwB,8CAA8C,wBAA0B,gDAAgD,wBAA0B,gDAAgD,sBAAwB,8CAA8C,iBAAmB,yCAAyC,yBAA2B,iDAAiD,sBAAwB,8CAA8C,yBAA2B,iDAAiD,kBAAoB,4C,mBCA5vBD,EAAOC,QAAU,CAAC,gBAAkB,mCAAmC,qBAAuB,wCAAwC,MAAQ,yBAAyB,QAAU,2BAA2B,YAAc,+BAA+B,aAAe,gCAAgC,uBAAyB,0CAA0C,YAAc,+BAA+B,oBAAsB,uCAAuC,iBAAmB,oCAAoC,kBAAoB,uC,mBCAhiBD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,UAAY,yBAAyB,aAAe,4BAA4B,cAAgB,6BAA6B,QAAU,uBAAuB,cAAgB,6BAA6B,iBAAmB,gCAAgC,YAAc,2BAA2B,yBAA2B,wCAAwC,oBAAsB,qC,mBCA/aD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,cAAgB,+BAA+B,YAAc,6BAA6B,aAAe,8BAA8B,OAAS,0B,mBCD3MD,EAAOC,QAAU,IAA0B,uC,8LCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+ECNFC,EAAoB,CACpBC,YAAa,CACTC,GAAI,EACJC,KAAM,WACNC,SAAU,GACVC,OAAQ,GACRC,OAAQC,KAEZC,MAAO,CACH,CAACN,GAAI,EAAGO,KAAM,WAAYC,KAAM,gBAAiBC,IAAKJ,IAAUK,MAAO,IACvE,CAACV,GAAI,EAAGO,KAAM,QAASC,KAAM,KAAMC,IAAKE,IAAOD,MAAO,IACtD,CAACV,GAAI,EAAGO,KAAM,UAAWC,KAAM,KAAMC,IAAKG,IAASF,MAAO,IAC1D,CAACV,GAAI,EAAGO,KAAM,UAAWC,KAAM,SAAUC,IAAKG,IAASF,MAAO,MAElEG,oBAAqB,GACrBC,KAAM,CACF,CACIC,aAAc,M,8CCjBpBC,EAAWC,IAAMC,OAAO,CAC1BC,iBAAiB,EACjBC,QAAS,CAEL,UAAW,wCAGfC,QAAS,kDAGPC,EAAgBL,IAAMC,OAAO,CAC/BC,iBAAiB,EACjBC,QAAS,CACL,UAAW,uCAEX,eAAgB,uBAEpBC,QAAS,kDAGAE,EAAM,WAC2F,IAAjGC,EAAgG,uDAA7E,GAAIC,EAAyE,uDAAnD,EAAGC,EAAgD,uDAAjC,GAAIC,EAA6B,uDAAJ,GACjG,OAAOX,EAASY,IAAT,sBAA0CJ,EAA1C,iBAA2DC,EAA3D,iBAA+EC,EAA/E,mBAA8FC,IAChGE,MAAK,SAAAC,GACF,OAAOA,EAASC,SAJnBR,EAAM,SAOJvB,GACP,OAAOgB,EAASY,IAAT,kBAAqC5B,IACvC6B,MAAK,SAAAC,GACF,OAAOA,EAASC,SAVnBR,EAAM,SAcLvB,GACN,OAAOgB,EAASY,IAAT,yBAAuC5B,IACzC6B,MAAK,SAAAC,GACF,OAAOA,EAASC,SAjBnBR,EAAM,SAqBLS,GACN,OAAOhB,EAASiB,IAAT,iBAAuC,CAACD,YAtB1CT,EAAM,SAwBAQ,GACX,OAAOf,EAASiB,IAAT,UAAqCF,IAzBvCR,EAAM,WA6BX,OAAOP,EAASY,IAAT,WACFC,MAAK,SAAAC,GACF,OAAOA,EAASC,SA/BnBR,EAAM,SAkCPW,EAAeC,EAA2BC,EAAmBC,GACjE,OAAOrB,EAASsB,KAAT,2BAA8FJ,EAA9F,qBAAgHC,EAAhH,uBAAuIC,EAAvI,oBAA2JC,IAC7JR,MAAK,SAAAC,GACF,OAAOA,MArCVP,EAAM,WAyCX,OAAOP,EAASsB,KAAT,eACFT,MAAK,SAAAC,GACF,OAAOA,MA3CVP,EAAM,SA8CLvB,GACN,OAAOgB,EAASY,IAAT,iBAAgC5B,IAClC6B,MAAK,SAAAC,GACF,OAAOA,EAASC,SAjDnBR,EAAM,SAoDEvB,GACb,OAAOgB,EAASsB,KAAT,iBAAsEtC,IACxE6B,MAAK,SAAAC,GACF,OAAOA,MAvDVP,EAAM,SA0DIvB,GACf,OAAOgB,EAASuB,OAAT,iBAAwEvC,IAC1E6B,MAAK,SAAAC,GACF,OAAOA,MA7DVP,EAAM,SAgECiB,GACZ,OAAOlB,EAAcgB,KAAd,gBAAsEE,GACxEX,MAAK,SAAAC,GACF,OAAOA,EAASC,KAAKA,SAnExBR,EAAM,SAsEFvB,GACT,OAAOgB,EAASiB,IAAT,kBAAsEjC,IACxE6B,MAAK,SAAAC,GACF,OAAOA,MAzEVP,EAAM,WA6EX,OAAOP,EAASY,IAAT,WACFC,MAAK,SAAAC,GACF,OAAOA,EAASC,SA/EnBR,EAAM,SAkFHvB,EAAYyC,GACpB,OAAOzB,EAASsB,KAAT,kBAAkDtC,EAAlD,aAAiE,CAACyC,SACpEZ,MAAK,SAAAC,GACF,OAAOA,MArFVP,EAAM,SAwFDmB,GACV,OAAO1B,EAASuB,OAAT,2BAA8DG,IAChEb,MAAK,SAAAC,GACF,OAAOA,MA3FVP,EAAM,SA8FLvB,GACN,OAAOgB,EAASY,IAAT,kBAAyC5B,EAAzC,cACF6B,MAAK,SAAAC,GACF,OAAOA,EAASC,SAjGnBR,EAAM,WAqGX,OAAQP,EAASY,IAAT,4BACHC,MAAK,SAAAC,GACF,OAAOA,EAASC,KAAKY,Q,kBC/HxBC,GACE,SAACb,GAAD,MAAuB,CAACc,KAAM,2BAA4Bd,SAD5Da,GAEK,SAAC5C,GAAD,MAAiB,CAAC6C,KAAM,8BAA+B7C,OAF5D4C,GAGI,SAACb,GAAD,MAAuB,CAACc,KAAM,6BAA8Bd,SAHhEa,GAIK,SAACpC,GAAD,MAAmB,CAACqC,KAAM,8BAA+BrC,SAGvEsC,GAAsB,CACtBC,QAAS,GACTC,WAAY,I,ICiDJC,GAKAC,G,mBALAD,O,qBAAAA,I,kBAAAA,Q,cAKAC,O,uBAAAA,Q,KC7DL,IAAMC,GACA,SAACnD,EAAmBoD,EAAsBlB,GAA1C,MAAoE,CAACW,KAAM,uBAAwBd,KAAM,CAAC/B,KAAIoD,QAAOlB,WADrHiB,GAEK,SAACxB,GAAD,MAAoB,CAACkB,KAAM,4BAA6BlB,SAF7DwB,GAGQ,iBAAO,CAACN,KAAM,iCAHtBM,GAIG,SAACE,GAAD,MAAyB,CAACR,KAAM,0BAA2BQ,QA8BvEC,GAAoB,CACpBC,QAAS,GACTC,UAAU,EACVC,eAAe,EACfC,iBAAiB,EACjBrB,QAAS,MCpCN,IAAMsB,GACG,SAACjC,EAAmBkC,GAApB,MAAqC,CAACf,KAAM,4BAA6BnB,OAAMkC,QADlFD,GAEG,SAAChC,GAAD,MAAoB,CAACkB,KAAM,4BAA6BlB,SAF3DgC,GAGE,SAACE,GAAD,MAAuB,CAAChB,KAAM,2BAA4BgB,YAH5DF,GAIE,SAAC3B,GAAD,MAAqB,CAACa,KAAM,2BAA4Bb,WAKjE8B,GAAiB,SAAC9D,EAAmB4D,GACvC,8CAAO,WAAOG,GAAP,eAAAC,EAAA,sEACczC,EAAevB,GAD7B,cACC+B,EADD,OAEHgC,EAASJ,GAA0B5B,EAAM6B,IAFtC,SAGGG,EAASE,GAAejE,IAH3B,2CAAP,mDAAM,IAQGkE,GAAkB,SAAClE,EAAY4D,GACxC,8CAAO,WAAOG,GAAP,eAAAC,EAAA,sEACGD,EAASD,GAAe9D,EAAI4D,IAD/B,uBAEwBrC,EAAcvB,GAFtC,OAECmE,EAFD,OAGHJ,EAASJ,GAAyBQ,IAH/B,2CAAP,mDAAM,IAOGC,GAAoB,SAACpE,EAAmB4D,GACjD,8CAAO,WAAOG,GAAP,iBAAAC,EAAA,sEACGD,EAASD,GAAe9D,EAAI4D,IAD/B,uBAEiBrC,EAAa,IAAI,EAAE,IAAG,GAFvC,cAECwB,EAFD,OAGHgB,EAASnB,GAA2BG,EAAQsB,QAHzC,SAIkB9C,IAJlB,OAICO,EAJD,OAKHiC,EAASO,GAAgBC,cAAczC,IALpC,4CAAP,mDAAM,IAUG0C,GAAoB,SAACxE,EAAY4D,GAAb,8CAA+C,WAAOG,GAAP,eAAAC,EAAA,yDACxES,EAAmB,OAARb,EACfG,EAASW,GAAYC,kBAAiB,IACtCZ,EAASJ,GAA0Bc,KACnCA,EAJ4E,gCAI3DV,EAASK,GAAkBpE,EAAI4D,IAJ4B,+CAIdG,EAASG,GAAgBlE,EAAI4D,IAJf,QAK5EG,EAASW,GAAYC,kBAAiB,IALsC,4CAA/C,uDAQpBC,GAAgB,SAAC5E,GAAD,8CAAuC,WAAO+D,GAAP,SAAAC,EAAA,+EAEtDD,EAASK,GAAkBpE,EAAI,OAFuB,OAG5D+D,EAASZ,MAHmD,uBAK5DY,EAASZ,MALmD,uEAAvC,uDAShBc,GAAiB,SAACjE,GAC3B,8CAAO,WAAO+D,GAAP,eAAAC,EAAA,sEACczC,EAAcvB,GAD5B,OACC+B,EADD,OAEHgC,EAASJ,GAAyB5B,IAF/B,2CAAP,mDAAM,IAgCN8C,GAAsB,CACtBC,OAAQ,CAACC,OAAQ,IACjBC,eAAgB,CACZC,SAAU,GACVF,OAAQ,IAEZG,SAAU,KACVC,WAAW,GClGf,IAAIC,GAAoB,CACpBC,MAAO,GACPrC,WAAY,GACZsC,WAAY,EACZ7D,YAAa,EACbD,SAAU,GACV+D,YAAY,EACZC,YAAY,EACZC,WAAW,GASFf,GAAc,CACvBgB,QAAS,SAAC1F,GAAD,MAAiB,CAAC6C,KAAM,sBAAuB7C,OACxD2F,WAAY,SAAC3F,GAAD,MAAiB,CAAC6C,KAAM,yBAA0B7C,OAC9D4F,SAAU,SAACP,GAAD,MAA6B,CAACxC,KAAM,uBAAwBwC,UACtEQ,cAAe,SAACC,GAAD,MAAoB,CAACjD,KAAM,4BAA6BiD,UACvEC,QAAS,SAACC,GAAD,MAAmB,CAACnD,KAAM,sBAAuBmD,SAC1DrB,iBAAkB,SAAChD,GAAD,MAAoB,CAACkB,KAAM,+BAAgClB,SAC7EsE,eAAgB,SAACtE,GAAD,MAAoB,CAACkB,KAAM,6BAA8BlB,SACzEuE,kBAAmB,SAACvE,GAAD,MAAoB,CAACkB,KAAM,gCAAiClB,SAC/EwE,iBAAkB,SAAC3F,GAAD,MAAmB,CAACqC,KAAM,+BAAgCrC,UAInE4F,GAAgB,SAAC5E,EAAkBC,EAAqBC,GACjE,8CAAO,WAAOqC,GAAP,eAAAC,EAAA,6DACHD,EAASW,GAAYC,kBAAiB,IADnC,SAEcpD,EAAaC,EAAUC,EAAaC,GAFlD,OAECK,EAFD,OAGHgC,EAASW,GAAYkB,SAAS7D,EAAKsC,QACnCN,EAASW,GAAYmB,cAAc9D,EAAKsE,aACxCtC,EAASW,GAAYC,kBAAiB,IALnC,2CAAP,mDAAM,IC1BH,IAAML,GAAkB,CAC3BgC,sBAAuB,SAAC9F,EAAcR,GAAf,MAA+B,CAAC6C,KAAM,mCAAoCrC,OAAMR,OACvGuG,sBAAuB,SAACC,EAAexG,GAAhB,MAAgC,CAAC6C,KAAM,+BAAgC2D,QAAOxG,OACrGuE,cAAe,SAACxC,GAAD,MAAkC,CAACc,KAAM,+BAAgCd,SACxFoE,iBAAkB,SAAC3F,GAAD,MAAmB,CAACqC,KAAM,kCAAmCrC,SAC/EiG,oBAAqB,SAAC1E,EAAWL,EAAmBgF,GAA/B,MAAoD,CAAC7D,KAAM,qCAAsCd,OAAML,OAAMgF,QA0BzHC,GAA0B,SAAC3G,EAAY0G,GAAb,8CAAiC,WAAO3C,GAAP,SAAAC,EAAA,6DACpED,EAASW,GAAYC,kBAAiB,IAD8B,SAE9DZ,EAAS6C,GAAe5G,EAAI0G,IAFkC,OAGpE3C,EAASW,GAAYC,kBAAiB,IAH8B,2CAAjC,uDAM1BiC,GAAiB,SAAC5G,EAAY0G,GACvC,8CAAO,WAAO3C,GAAP,iBAAAC,EAAA,sEACczC,EAAcvB,GAD5B,cACC+B,EADD,gBAEkBR,EAAevB,GAFjC,OAEC8B,EAFD,OAGHiC,EAASO,GAAgBmC,oBAAoB1E,EAAKsC,MAAOvC,EAAU4E,IAHhE,2CAAP,mDAAM,IAQNG,GAAsB,CACtBC,QAAS,GACT9D,WAAY,GACZ+D,aAAc,G,mEC1DdC,GAA0B,CAC1B,CACIhH,GAAI,EACJC,KAAM,sBACNG,OAAQ6G,MAEZ,CACIjH,GAAI,EACJC,KAAM,aACNG,OAAQ8G,MAEZ,CACIlH,GAAI,EACJC,KAAM,qBACNG,OAAQ+G,O,wBCRZC,GAAaC,YACb,CACIC,aTqBD,WAA+D,IAApCC,EAAmC,uDAA3BzH,EAAmB0H,EAAQ,uCAE7DC,EAAS,eACNF,EADM,CAETjH,MAAM,YAAKiH,EAAMjH,SAErB,OAAQkH,EAAO3E,MACX,IApCS,UAqCL,IAAI7C,EAAK,EACL0H,EAAUF,EAAOxC,eAAiByC,EAAUnH,MAAMqH,OAASF,EAAU5G,oBAAoB8G,OAC7E,IAAZD,GAAiBF,EAAOxC,eACxBhF,EAAKyH,EACAnH,MAAMmH,EAAUnH,MAAMqH,OAAS,GAC/B3H,GAAK,EACS,IAAZ0H,GAAkBF,EAAOxC,iBAChChF,EAAKyH,EACA5G,oBAAoB4G,EAAU5G,oBAAoB8G,OAAS,GAC3D3H,GAAK,GAEd,IAAI4H,EAAa,CACb5H,GAAIA,EACJO,KAAMgH,EAAMxH,YAAYE,KACxBO,KAAM+G,EAAMzG,KAAK,GAAGC,aACpBN,IAAK8G,EAAMxH,YAAYK,OACvBM,MAAO,GAKX,OAHA8G,EAAOxC,eAAiByC,EAAUnH,MAAMuH,KAAKD,GAAcH,EAAU5G,oBAAoBgH,KAAKD,GAC9FH,EAAU3G,KAAK,GAAGC,aAAlB,YAAqCwG,EAAMzG,KAAK,GAAGC,cACnD0G,EAAU3G,KAAK,GAAGC,aAAe,GAC1B0G,EAEX,IA3DiB,yBA6Db,OADAA,EAAU3G,KAAK,GAAGC,aAAeyG,EAAOhH,KACjCiH,EAGX,IA/DY,aAiER,IADA,IAAIK,EAAaN,EAAOxC,eAAiByC,EAAUnH,MAAQmH,EAAU5G,oBAC5DkH,EAAI,EAAGA,EAAID,EAAWH,OAAQI,IAC/BD,EAAWC,GAAG/H,KAAOwH,EAAOxH,IAC5B8H,EAAWE,OAAOD,EAAG,GAG7B,OAAON,EAEX,QACI,OAAOF,ISlEXU,eFsDD,WAAgH,IAAlFV,EAAiF,uDAAzEV,GAAqBW,EAAoD,uCAC9GC,EAAS,eACNF,EADM,CAETT,QAAQ,YAAKS,EAAMT,WAGnBoB,EAAW,SAAClI,GAEZ,IADA,IAAImI,GAASC,IACJL,EAAI,EAAGA,EAAIN,EAAUX,QAAQa,OAAQI,IACtCN,EAAUX,QAAQiB,GAAG/H,KAAOA,IAC5BmI,EAAQJ,GAGhB,OAAOI,GAGX,OAAQX,EAAO3E,MACX,IAAK,kCACD,OAAO,eAAI0E,EAAX,CAAkBvE,WAAYwE,EAAOhH,OACzC,IAAK,mCAED,OADAiH,EAAUX,QAAQU,EAAOxH,IAAIc,KAAO0G,EAAOhH,KACpCiH,EACX,IAAK,+BAED,IADA,IAAIY,EAAuB,EAClBN,EAAI,EAAGA,EAAIP,EAAOzF,KAAK4F,OAAQI,IAChCP,EAAOzF,KAAKgG,GAAGO,gBAAgBD,IAC9Bb,EAAOzF,KAAKgG,GAAGhD,OAAOwD,QAAOf,EAAOzF,KAAKgG,GAAGhD,OAAOwD,MAAOf,EAAOzF,KAAKgG,GAAGhD,OAAOyD,MAAQC,MAE7FjB,EAAOzF,KAAKgG,GAAGW,SAAW,GAG9B,OAAO,eAAInB,EAAX,CAAkBT,QAAQ,YAAKU,EAAOzF,MAAOgF,aAAcsB,IAC/D,IAAK,qCACD,IAAI3G,EAAewG,EAASV,EAAO9F,KAAKiH,QACxClB,EAAUX,QAAQpF,GAAMgH,SAAWlB,EAAOzF,KAC1C,IAAK,IAAIgG,EAAI,EAAGA,EAAIP,EAAOzF,KAAK4F,OAAQI,IACpCN,EAAUX,QAAQpF,GAAMgH,SAASX,GAAGa,WAChCpB,EAAOzF,KAAKgG,GAAGc,WAAarB,EAAOd,GAAGiC,OAASnB,EAAOd,GAAGoC,SAAWtB,EAAO9F,KAAKoH,SAEpFrB,EAAUX,QAAQpF,GAAMgH,SAASX,GAAG3H,OAChCoH,EAAOzF,KAAKgG,GAAGc,WAAarB,EAAOd,GAAGiC,OAASnB,EAAOd,GAAG3B,OAAOwD,MAAQf,EAAO9F,KAAKqD,OAAOwD,OAASE,KAE5G,OAAOhB,EACX,IAAK,+BAED,IADA,IAAIsB,EAAsBb,EAASV,EAAOxH,IACjC+H,EAAI,EAAGA,EAAIN,EAAUX,QAAQiC,GAAaL,SAASf,OAAQI,IAC5DN,EAAUX,QAAQiC,GAAaL,SAASX,GAAG/H,KAAOwH,EAAOhB,OACzDiB,EAAUX,QAAQiC,GAAaL,SAASV,OAAOD,EAAG,GAG1D,OAAON,EACX,QACI,OAAOF,IEzGXyB,mBJiGD,WAA+G,IAAlFzB,EAAiF,uDAAzE1C,GAAqB2C,EAAoD,uCAC7GC,EAAS,eACNF,GAEP,OAAQC,EAAO3E,MACX,IAAK,4BAGD,MAFe,OAAf2E,EAAO5D,IAAe6D,EAAU3C,OAAS0C,EAAO9F,KAAO+F,EAAUzC,eAAiBwC,EAAO9F,KACzF+F,EAAU3C,OAAO9C,OAASuF,EAAMzC,OAAO9C,OAChCyF,EACX,IAAK,4BACD,OAAO,eAAIF,EAAX,CAAkBpC,UAAWqC,EAAO7F,OACxC,IAAK,2BAED,OADA8F,EAAUtC,UAAYsC,EAAU3C,OAAO9C,OAASwF,EAAOxF,OAASyF,EAAUzC,eAAehD,OAASwF,EAAOxF,OAClGyF,EACX,IAAK,2BAED,OADAA,EAAUvC,SAAWsC,EAAO3D,QACrB4D,EACX,QACI,OAAOF,IIlHX0B,kBDQD,WAAyE,IAAzC1B,EAAwC,uDAAhCP,GAC3C,OAD2E,iCACpEO,GCRH2B,ePKD,WAAkG,IAArE3B,EAAoE,uDAA5DzE,GAAqB0E,EAAuC,uCAEpG,OADkB,eAAOD,EAAP,CAAcxE,QAAQ,YAAKwE,EAAMxE,WAC3CyE,EAAO3E,MACX,IAAK,2BAED,OADA2E,EAAOzF,KAAKoH,OAAS3B,EAAOzF,KAAKoH,QAAUV,KACpC,eAAIlB,EAAX,CAAkBxE,QAAQ,GAAD,mBAAMwE,EAAMxE,SAAZ,CAAqByE,EAAOzF,SACzD,IAAK,8BACD,OAAO,eAAIwF,EAAX,CAAkBxE,QAASwE,EAAMxE,QAAQqG,QAAQ,SAAAC,GAAE,OAAIA,EAAGrJ,KAAOwH,EAAOxH,QAC5E,IAAK,6BACD,IAAK,IAAI+H,EAAI,EAAGA,EAAIP,EAAOzF,KAAK4F,OAAQI,IACpCP,EAAOzF,KAAKgG,GAAGoB,OAAS3B,EAAOzF,KAAKgG,GAAGhD,OAAOwD,OAASE,YAChDjB,EAAOzF,KAAKgG,GAAGhD,cACfyC,EAAOzF,KAAKgG,GAAG/F,cACfwF,EAAOzF,KAAKgG,GAAGuB,cAE1B,OAAO,eAAI/B,EAAX,CAAkBxE,QAAQ,YAAKyE,EAAOzF,QAC1C,IAAK,8BACD,OAAO,eAAIwF,EAAX,CAAkBvE,WAAYwE,EAAOhH,OACzC,QACI,OAAO+G,IOvBXgC,aHqDD,WAAgG,IAArEhC,EAAoE,uDAA5DnC,GAAmBoC,EAAyC,uCAClG,OAAQA,EAAO3E,MACX,IAAK,sBACD,OAAO,eACA0E,EADP,CAEIlC,MAAOkC,EAAMlC,MAAMmE,KAAI,SAAAC,GACnB,OAAIA,EAAGzJ,KAAOwH,EAAOxH,GACV,eAAIyJ,EAAX,CAAevE,UAAU,IAEtBuE,OAGnB,IAAK,yBACD,OAAO,eACAlC,EADP,CAEIlC,MAAOkC,EAAMlC,MAAMmE,KAAI,SAAAC,GACnB,OAAIA,EAAGzJ,KAAOwH,EAAOxH,GACV,eAAIyJ,EAAX,CAAevE,UAAU,IAEtBuE,OAGnB,IAAK,+BACD,OAAO,eAAIlC,EAAX,CAAkBvE,WAAYwE,EAAOhH,OACzC,IAAK,uBACD,OAAO,eAAI+G,EAAX,CAAkBlC,MAAM,YAAKmC,EAAOnC,SACxC,IAAK,sBACD,OAAO,eAAIkC,EAAX,CAAkB9F,YAAa+F,EAAOxB,OAC1C,IAAK,4BACD,OAAO,eAAIuB,EAAX,CAAkBjC,WAAYkC,EAAO1B,QACzC,IAAK,+BACD,OAAO,eAAIyB,EAAX,CAAkBhC,WAAYiC,EAAO7F,OACzC,IAAK,6BACD,OAAO,eAAI4F,EAAX,CAAkB/B,WAAYgC,EAAO7F,OACzC,IAAK,gCACD,OAAO,eAAI4F,EAAX,CAAkB9B,UAAW+B,EAAO7F,OACxC,QACI,OAAO4F,IGzFXmC,aLmCD,WAAwG,IAA7EnC,EAA4E,uDAApEjE,GAAmBkE,EAAiD,uCAC1G,OAAQA,EAAO3E,MACX,IAAK,0BACD,OAAO,eAAI0E,EAAX,CAAkBlF,QAASmF,EAAOnE,MACtC,IAAK,4BACD,OAAO,eAAIkE,EAAX,CAAkB9D,cAAe+D,EAAO7F,OAC5C,IAAK,uBACD,OAAO,eAAI4F,EAAX,CAAkBhE,QAAQ,eAAKiE,EAAOzF,MAAOyB,WAAYgE,EAAOzF,KAAK/B,KACzE,IAAK,+BACD,OAAO,eAAIuH,EAAX,CAAkB7D,iBAAiB,IACvC,QACI,OAAO6D,IK7CXoC,KAAMC,OAUDC,GAAQC,YAAY1C,GAAY2C,YAAgBC,OAI7DtK,OAAOmK,MAAQA,G,mGCHAI,IArBWvF,GAAYwB,kBAaXgE,cAVL,SAAC3C,GAEnB,MAAO,CACHA,MAAOA,EAAMgC,aACb9D,UAAW8B,EAAMgC,aAAa9D,UAC9BF,WAAYgC,EAAMgC,aAAahE,cAMnC,CACI4E,aJwBoB,SAACnK,EAAYO,EAAc4I,GACnD,8CAAO,WAAOpF,GAAP,SAAAC,EAAA,6DACHD,EAASW,GAAYwB,mBAAkB,IADpC,SAEG3E,EAAqBvB,GAFxB,OAGH+D,EAASnB,GAAyB,CAAC5C,KAAIO,OAAM4I,SAAQjE,UAAU,KAC/DnB,EAASW,GAAYgB,QAAQ1F,IAC7B+D,EAASJ,IAAyB,IAClCI,EAASW,GAAYwB,mBAAkB,IANpC,2CAAP,mDAAM,IIxBFkE,gBJiCuB,SAACpK,GAC5B,8CAAO,WAAO+D,GAAP,SAAAC,EAAA,6DACHD,EAASW,GAAYwB,mBAAkB,IADpC,SAEG3E,EAAuBvB,GAF1B,OAGH+D,EAASnB,GAA4B5C,IACrC+D,EAASW,GAAYiB,WAAW3F,IAChC+D,EAASJ,IAAyB,IAClCI,EAASW,GAAYwB,mBAAkB,IANpC,2CAAP,mDAAM,KIrCiBgE,ECGY,SAACG,GAAW,IAAD,EACpBC,mBAASD,EAAMnF,UADK,oBACzCqF,EADyC,KACjCC,EADiC,KAG9CC,qBAAU,WACND,EAAUH,EAAMnF,YACjB,CAACmF,EAAMnF,WAEV,IAQIwF,EAAmB,gBACrBC,IAAQC,sCADa,kBAErBD,IAAQE,iCAFa,kBAGrBF,IAAQG,iCAHa,UAMnBC,EAAgB,gBAClBJ,IAAQK,gCADU,kBAElBL,IAAQE,iCAFU,iBAGlBF,IAAQG,iCAHU,UAKpB,OACI,6BAEQP,EACI,4BACIU,QApBH,WACbZ,EAAMD,gBAAgBC,EAAMrK,KAoBZkL,SAAUb,EAAM5E,WAAa4E,EAAM9E,WACnC4F,UAAWT,GAHf,UAQA,4BACIO,QAhCN,WACVZ,EAAMF,aAAaE,EAAMrK,GAAIqK,EAAM9J,KAAM8J,EAAMlB,SAgC/B+B,SAAUb,EAAM5E,WAAa4E,EAAM9E,WACnC4F,UAAWJ,GAHf,Y,oBC9CdK,GAAazH,GACb0H,GAAa1H,GAKJ2H,GAFQpB,cAVD,SAAC3C,GACnB,MAAM,CACFhC,WAAYgC,EAAMgC,aAAahE,cAQS,CAAC6F,cAAYC,cAAYnH,mBAAiBM,sBAAnE0F,ECCY,SAACG,GAKhC,OACI,yBAAKc,UAAS,UAAKd,EAAM9E,WAAagG,KAAWC,6BAA+B,OAC5E,kBAAC,KAAD,CAASP,QANM,SAACQ,GACpB,GAAIpB,EAAM9E,WAAY,OAAOkG,EAAEC,iBAC/BrB,EAAM7F,kBAAkB6F,EAAMrK,GAAI,UAIM2L,GAAI,YAActB,EAAMrK,GACnDmL,UAAS,UAAKS,KAAOC,cAAZ,YAA6BD,KAAOE,aAApC,YAAoDF,KAAOG,uBACzE,6BACI,yBAAKZ,UAAS,UAAKa,KAAOC,YAAZ,YAA2BL,KAAOM,sBAC3CC,IAAK9B,EAAMlB,QAAUV,KAAY2D,IAAI,SAE9C,yBAAKjB,UAAWS,KAAOS,sBACnB,uBAAGlB,UAAS,UAAKS,KAAOU,uBAAxB,UAAoDjC,EAAM9J,SAGlE,kBAAC,GAAD,CAAoBP,GAAIqK,EAAMrK,GAAImJ,OAAQkB,EAAMlB,OAAQ5I,KAAM8J,EAAM9J,KAAM2E,SAAUmF,EAAME,a,oBCzBzFgC,GAA2B,SAAClC,GACrC,IAAI7J,EAAOgM,IAAMC,YAiBjB,OACI,yBAAKtB,UAAWuB,KAAQC,wBACpB,2BAAOC,YAAY,iBACZzB,UAAS,UAAKS,KAAOiB,aAAZ,YAA4BjB,KAAOkB,aAAnC,YAAmDlB,KAAOmB,gBACnEC,IAAKxM,EACLyM,SAXS,WACpB,GAAIzM,EAAK0M,QAAS,CACd,IAAIC,EAAW3M,EAAK0M,QAAQE,MAC5B/C,EAAMlE,iBAAiBgH,KAShBE,WAtBF,SAACC,GACV,GAAI9M,EAAK0M,SACe,KAAhBI,EAAMC,MAAa,CACnB,IAAIC,EAAgBhN,EAAK0M,QAAQE,MACjC/C,EAAMjE,cAAc,EAAG,EAAGoH,GAC1BF,EAAM5B,mBAkBH0B,MAAO/C,EAAMrH,e,oBChC1B+C,GAAUrB,GAAYqB,QAsBf0H,IArBS/I,GAAYmB,cACjBnB,GAAYkB,SACNlB,GAAYuB,eACVvB,GAAYC,iBAkBPuF,cAZR,SAAC3C,GACnB,MAAO,CACH9F,YAAa8F,EAAMgC,aAAa9H,YAChC6D,WAAYiC,EAAMgC,aAAajE,WAC/B9D,SAAU+F,EAAMgC,aAAa/H,SAC7B+D,WAAYgC,EAAMgC,aAAahE,WAC/BC,WAAY+B,EAAMgC,aAAa/D,WAC/BkI,YAAa,MAKkC,CAAC3H,WAASK,kBAAnC8D,ECXK,SAACG,GAGhC,IAFA,IAAIsD,EAAaC,KAAKC,KAAKxD,EAAM/E,WAAa+E,EAAM7I,UAChDsM,EAAQ,GACH/F,EAAI,EAAGA,GAAK4F,EAAY5F,IAC7B+F,EAAMjG,KAAKE,GAGf,IAAIgG,EAAeH,KAAKC,KAAKF,EAAatD,EAAMqD,aAPN,EAQFpD,mBAAS,GARP,oBAQrC0D,EARqC,KAQtBC,EARsB,KAStCC,GAAkBF,EAAgB,GAAK3D,EAAMqD,YAC7CS,EAAkBH,EAAgB3D,EAAMqD,YAEtCU,EAAoB,UAAMC,KAAaC,cAAnB,YAAoCD,KAAaE,gBAAjD,YAAoEF,KAAaG,yBAAjF,YAA6GH,KAAaI,2BAC9IC,EAAyB,UAAML,KAAaC,cAAnB,YAAoCD,KAAaE,gBAAjD,YAAoEF,KAAaM,4BAAjF,YAAgHN,KAAaO,kCACtJC,EAAyB,UAAMR,KAAaC,cAAnB,YAAoCD,KAAaE,gBAAjD,YAAoEF,KAAaM,4BAAjF,YAAgHN,KAAaS,kCAExJC,EAAejB,EACd1E,QAAO,SAAA4F,GAAM,OAAIA,EAASd,GAAkBc,GAAUb,KACtD3E,KAAI,SAAAwF,GAAM,OAAI,4BACX9D,SAAUb,EAAM7E,WAChByF,QAAS,kBAAMxJ,EAAYuN,IAC3B7D,UAAS,WAAMiD,EAAN,YAA8B/D,EAAM5I,cAAgBuN,GAAUX,KAAaY,yBAA2BD,MAEnHvN,EAAc,SAACuE,GACfqE,EAAMtE,QAAQC,GACdqE,EAAMjE,cAAciE,EAAM7I,SAAUwE,IAGxC,OAEI,yBAAKmF,UAAS,UAAKkD,KAAaa,wBAC5B,6BAAK,4BAAQ/D,UAAS,UAAKuD,EAAL,YAAkCL,KAAaI,2BAA6BvD,SAA4B,IAAlB8C,EAAqB/C,QAAS,kBAAMgD,EAAiBD,EAAgB,KAA5K,SACL,yBAAK7C,UAAS,UAAKkD,KAAac,0BAA4BJ,GAC5D,yBAAK5D,UAAS,UAAKkD,KAAae,6BAA+BpB,EAAgBD,GAAgB,4BAAQ5C,UAAS,UAAK0D,GAA6B5D,QAAS,kBAAMgD,EAAiBD,EAAgB,KAAnG,c,qBCvC5FqB,OARf,SAAmBhF,GACf,OACI,6BACI,yBAAKc,UAAWI,KAAW+D,oBAAqBnD,IAAKoD,SCM3DpJ,GAAmBzB,GAAYyB,iBAYxBqJ,GAAyBtF,cAThB,SAAC3C,GACnB,MAAO,CACHkI,WAAYlI,EAAMgC,aAClBvG,WAAYuE,EAAMgC,aAAavG,cAOnC,CAACoD,iBAAeD,qBADkB+D,ECLK,SAACG,GAMpC,OAJJI,qBAAU,WACNJ,EAAMjE,cAAciE,EAAMoF,WAAWjO,SAAU6I,EAAMoF,WAAWhO,eACjE,CAAmC,IAAlC4I,EAAMoF,WAAWpK,MAAMsC,SAGnB,yBAAKwD,UAAS,UAAKR,IAAQ+E,+BAAb,MACV,kBAAC,GAAD,CAAYtJ,cAAeiE,EAAMjE,cAAeD,iBAAkBkE,EAAMlE,iBAAkBnD,WAAYqH,EAAMrH,aAC5G,kBAACyK,GAAD,MACCpD,EAAMoF,WAAWlK,WAAa,kBAAC,GAAD,CAAW4F,UAAWI,KAAWoE,qBAAwB,KACvFtF,EAAMoF,WAAWpK,MAAMmE,KAAI,SAAAC,GAAE,OAAI,kBAAC,GAAD,CAC9BmG,IAAKnG,EAAGzJ,GACRA,GAAIyJ,EAAGzJ,GACPmJ,OAAQM,EAAG1E,OAAOyD,MAClBjI,KAAMkJ,EAAGlJ,KACTgK,OAAQd,EAAGvE,kB,uEC7BhB,SAAS2K,GAASxF,GAAQ,IAAD,EACVC,qBADU,oBAC7BwF,EAD6B,KACtBC,EADsB,OAERzF,mBAAS,MAFD,oBAE7B0F,EAF6B,KAErBC,EAFqB,OAGZ3F,mBAAS,CAAC4F,KAAM,KAAMC,MAAO,IAAKC,OAAQ,MAH9B,oBAG7BC,EAH6B,KAGvBC,EAHuB,OAIAhG,qBAJA,oBAI7BiG,EAJ6B,KAIjBC,EAJiB,OAKElG,mBAAS,MALX,oBAK7BmG,EAL6B,KAKhBC,EALgB,OAMJpG,oBAAS,GANL,oBAM7BqG,EAN6B,KAMnBC,EANmB,OAOJtG,oBAAS,GAPL,oBAO7BY,EAP6B,KAOnB2F,EAPmB,KAkB9BC,EAASC,uBAAY,SAAAC,GACvBf,EAAUe,GACVV,EAAQ,CAACJ,KAAM,KAAMC,MAAO,IAAKC,OAAQ,QAC1C,IAEGa,EAAc,uCAAG,WAAMZ,GAAN,SAAArM,EAAA,2DACfgM,GAAUK,EAAKF,OAASE,EAAKD,QADd,gCAETc,EAAkBlB,EAAQK,EAAM,gBAFvB,2CAAH,sDAMda,EAAiB,uCAAG,WAAOC,EAAOd,EAAMe,GAApB,mBAAApN,EAAA,6DAChBqN,EAASC,SAASC,cAAc,UAChCC,EAASL,EAAMM,aAAeN,EAAMhB,MACpCuB,EAASP,EAAMQ,cAAgBR,EAAMf,OAC3CiB,EAAOlB,MAAQE,EAAKF,MACpBkB,EAAOjB,OAASC,EAAKD,OACTiB,EAAOO,WAAW,MAE1BC,UACAV,EACAd,EAAKyB,EAAIN,EACTnB,EAAK0B,EAAIL,EACTrB,EAAKF,MAAQqB,EACbnB,EAAKD,OAASsB,EACd,EACA,EACArB,EAAKF,MACLE,EAAKD,QAjBa,kBAoBf,IAAI4B,SAAQ,SAACC,EAASC,GACzBb,EAAOc,QAAO,SAAAC,GACV,GAAKA,EAAL,CAIAA,EAAK7R,KAAO6Q,EACZ,IAAIiB,EAAO,IAAIC,KAAK,CAACF,GAAO,aAAc,CAACA,EAAKvP,OAChD6N,EAAe2B,GACf3S,OAAO6S,IAAIC,gBAAgBjC,GAC3BC,EAAc9Q,OAAO6S,IAAIE,gBAAgBL,SAPrCF,EAAO,IAAIQ,MAAM,sBAQtB,kBA/Be,2CAAH,0DAmCnBC,EAAU,uCAAG,4BAAA3O,EAAA,6DACb6M,GAAY,IACRrO,EAAW,IAAIoQ,UACVC,OAAO,QAASpC,GAHZ,SAIPpG,EAAMyI,YAAYtQ,EAAU6H,EAAMrK,IAJ3B,OAKb+S,IALa,2CAAH,qDAORA,EAAe,WACjBhD,EAAS,MACTW,EAAe,MACfF,EAAc,MACdI,GAAY,GACZN,EAAQ,CAACJ,KAAM,KAAMC,MAAO,IAAKC,OAAQ,MACzCS,GAAY,GACZS,SAAS0B,eAAe,SAAS5F,MAAQ,IAEvC6F,EAAa,UAAMC,KAAQC,gBAAd,YAAiCD,KAAQE,wBAAzC,YAAoEF,KAAQG,wBAC/F,OACI,6BACI,yBAAKlI,UAAW+H,KAAQI,YACpB,+BACI,2BAAOtT,GAAI,QAAS6C,KAAK,OAAO0Q,OAAO,UAAUtG,SA7E5C,SAAAxB,GACjB,GAAIA,EAAE+H,OAAOC,OAAShI,EAAE+H,OAAOC,MAAM9L,OAAS,EAAG,CAC7C,IAAM+L,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,kBAAM7D,EAAS2D,EAAOG,WACtDH,EAAOI,cAAcrI,EAAE+H,OAAOC,MAAM,IACpC/C,EAAejF,EAAE+H,OAAOC,MAAM,IAC9B7C,GAAY,OAwEJ,gDAGPD,GAAY,kBAAC,GAAD,KACT,yBAAKxF,UAAW4I,KAAOC,OACnB,yBAAK7I,UAAW4I,KAAOE,kBACnB,kBAAC,KAAD,CACI9H,IAAK2D,EACLoE,cAAepD,EACfT,KAAMA,EACNpD,SAAU,SAAAkH,GAAC,OAAI7D,EAAQ6D,IACvBC,WAAYnD,EACZoD,UAAW,IACXC,SAAU,OAGlB,6BACI,4BACIpJ,SAAUA,EACVC,UAAS,UAAK8H,EAAL,YAAsB/H,GAAYgI,KAAQqB,yBACnDtJ,QAAS0H,GAHb,SAOJ,6BACI,4BAAQxH,UAAS,UAAK8H,GAAiBhI,QAAS,kBAAM8H,MAAtD,c,yBCjGXyB,GAA4B,SAACnK,GAAW,IAAD,EACpBC,mBAASD,EAAMlB,QADK,oBACzCA,EADyC,KACjCsL,EADiC,KAEhDhK,qBAAU,WACNgK,EAAUpK,EAAMlB,UACjB,CAACkB,EAAMlB,SACV,IAIMuL,EAAwB,gBAC5B/J,IAAQK,gCADoB,kBAE5BL,IAAQE,iCAFoB,iBAG5B8J,KAASC,oBAHmB,UAK9B,OACI,yBAAKzJ,UAAS,UAAKR,IAAQ+E,iCACvB,yBAAKvE,UAAS,UAAKR,IAAQkK,6BACvB,yBAAK1J,UAAS,UAAKR,IAAQkK,4BAA8B1I,IAAKhD,GAAUV,QAGxE4B,EAAMlF,UAEF,6BACI,kBAAC0K,GAAD,CAAUiD,YAAazI,EAAMyI,YAAa9S,GAAIqK,EAAMrK,MAGxD,6BACI,6BACI,4BAAQmL,UAAS,UAAKuJ,GAA4BzJ,QAvBtD,WAChBZ,EAAMyK,kBAAkBzK,EAAMrK,MAsBV,iBAGJ,6BACI,kBAAC,GAAD,CAAoBA,GAAIqK,EAAMrK,GACVO,KAAM8J,EAAM9J,KACZ2E,SAAUmF,EAAMnF,SAChBiE,OAAQkB,EAAMlB,aCpD1D4L,GAAqB,SAACxN,GACtB,MAAO,CACH/D,SAAU+D,EAAMmC,aAAalG,SAC7BwR,YAAazN,EAAMmC,aAAahG,kBAS3BuR,GAAe,SAACC,GAAyC,IAE5DC,EAF2D,iLAKzD,OAAKC,KAAK/K,MAAM7G,UAAY4R,KAAK/K,MAAM2K,YAAoB,kBAAC,KAAD,CAAUrJ,GAAG,WACjE,kBAACuJ,EAAcE,KAAK/K,WAN8B,GAEjCmC,IAAM0I,WAStC,OAF6BhL,aAAQ6K,GAAR7K,CAA4BiL,I,wCCLhDE,GAA4BC,YACrCpL,cAZkB,SAAC3C,GACnB,MAAO,CACHvC,eAAgBuC,EAAMyB,mBAAmB7D,UACrCoC,EAAMyB,mBAAmBlE,OAASyC,EAAMyB,mBAAmBhE,eAC/DG,UAAWoC,EAAMyB,mBAAmB7D,aAQf,CAACoQ,elBoDA,SAACvT,GAC3B,8CAAO,WAAO+B,GAAP,SAAAC,EAAA,sEACGzC,EAAcS,GADjB,OAEH+B,EAASJ,GAAyB3B,IAF/B,2CAAP,mDAAM,MkBpDNiT,GAFqCK,ECLA,SAACjL,GAAW,IAAD,EACrBC,oBAAS,GADY,oBACzCkL,EADyC,KACnCC,EADmC,OAEjBnL,mBAASD,EAAMrF,eAAehD,QAFb,oBAEzCA,EAFyC,KAEjC0T,EAFiC,OAGhBpL,oBAAS,GAHO,oBAGzCY,EAHyC,KAG/B2F,EAH+B,KAI1CoC,EAAa,UAAM0C,KAAQC,qBAAd,YAAsCD,KAAQE,oBAA9C,YAAqEF,KAAQG,uBAA7E,YAAuGH,KAAQI,wBAC5HC,EAAoB,UAAML,KAAQM,sBAClCC,EAAY,UAAMP,KAAQQ,oBAAd,YAAqCR,KAAQS,uBAE/D3L,qBAAU,WACNiL,EAAarL,EAAMrF,eAAehD,UACnC,CAACqI,EAAMrF,eAAehD,SAEzB,IAAIqU,EAAQ,uCAAG,WAAOrU,GAAP,SAAAgC,EAAA,6DACX6M,GAAY,GADD,SAELxG,EAAMkL,eAAevT,EAAOA,QAFvB,OAGX6O,GAAY,GACZ4E,GAAW,GAJA,2CAAH,sDAOZ,OACI,6BAEQD,EACA,0BAAMa,SAAUhM,EAAMiM,aAAaD,IAC/B,yBAAKlL,UAAW+K,GACZ,kBAACK,GAAA,EAAD,CAAOC,WAAS,EACTjW,KAAM,SACNkW,UAAW,QACX5T,KAAM,UAGjB,yBAAKsI,UAAW6K,GACZ,6BACI,4BAAQ9K,SAAUA,EACVC,UAAS,UAAKD,GAAYyK,KAAQe,uBAAzB,YAAmDzD,IADpE,SAIJ,6BACI,4BAAQ9H,UAAW8H,EAAehI,QAAS,kBAAMwK,GAAW,KAA5D,aAKZ,wBAAIxK,QAAS,WAAWZ,EAAMlF,WAAWsQ,GAAW,KAASzT,GAAkB,qBDjClF2U,GAAkBC,aAAU,CAAEjN,KAAM,SAAUkN,oBAAqB,GAAjDD,CAAwDvB,I,oBEX1EyB,GAAiC,SAACzM,GAAW,IAAD,EAC7BC,oBAAS,GADoB,oBAC9CyM,EAD8C,KACxCC,EADwC,KAE/CC,EAAO5M,EAAMpF,UAAYiS,OAAOD,KAAK5M,EAAMpF,UAC3CkS,EAAS9M,EAAMpF,UAAYiS,OAAOC,OAAO9M,EAAMpF,UACjDkD,EAAQ,EACNiP,EAAgB,UAAMC,KAAMC,gCAC5BC,EAAY,UAAMF,KAAMG,uBAAZ,YAAsCH,KAAMI,sBAA5C,YAAqEJ,KAAMK,uBACvFC,EAAU,UAAMN,KAAMO,oBAAZ,YAAmCP,KAAMQ,qBACnDC,EAAe,UAAMT,KAAMU,0BACjC,OACI,6BACI,yBAAK5M,UAAS,UAAKR,IAAQqN,yBAAb,YAAyCrN,IAAQ+E,iCAC3D,sCAAQrF,EAAM9J,OACd,kBAACoW,GAAD,CAAiBsB,cAAe,CAACjW,OAAQqI,EAAMrI,WAEnD,yBAAKmJ,UAAS,UAAKR,IAAQ+E,iCACvB,yBAAKvE,UAAWiM,GACZ,yBAAKjM,UAAWwM,GAAY,4CAC5B,yBAAKxM,UAAWoM,GAAc,8BAAOlN,EAAM6N,WAE/C,yBAAK/M,UAAWiM,GACZ,yBAAKjM,UAAWwM,GAAY,6CAC5B,yBAAKxM,UAAWoM,GAAc,8BAAOlN,EAAM8N,UAE/C,yBAAKhN,UAAWiM,GACZ,yBAAKjM,UAAWwM,GAAY,gDAC5B,yBAAKxM,UAAWoM,GAAc,8BAAOlN,EAAM+N,OAAS,MAAQ,QAE/DnB,GAAQ,yBAAKhM,QAAS,kBAAM+L,GAASD,IAAO5L,UAAW2M,GAAiB,8BAAOf,EAAO,OAAS,OAAvB,sBAExEA,GAAQE,EAAKzN,KAAI,SAAAoG,GACd,OACI,yBAAKzE,UAAWiM,GACZ,yBAAKjM,UAAWwM,GAAY,8BAAO/H,EAAI,GAAGyI,cAAgBzI,EAAI0I,MAAM,GAAK,MACzE,yBAAKnN,UAAWoM,GAAc,8BAAOJ,EAAOhP,cCjCzDoQ,GAFerO,cAPR,SAAC3C,GACnB,MAAM,CACFzG,KAAMyG,EAAMD,aAAaxG,KAAK,GAAGC,aACjCiE,eAAgBuC,EAAMyB,mBAAmB7D,aAIM,CAACqT,uB1BLlB,SAAAhY,GAAI,MAAK,CAACqC,KAHvB,yBAG+CrC,S0BKQiY,a1BNpD,SAAAzT,GAAc,MAAK,CAACnC,KAH/B,UAG+CmC,oB0BMlCkF,ECEY,SAACG,GACvC,IAAI2C,EAAMR,IAAMC,YAuBhB,OACI,yBAAKtB,UAAS,UAAKR,IAAQ+E,iCACvB,6BACI,8BACIzC,SAXE,WACd,GAAID,EAAIE,QAAS,CACb,IAAI1M,EAAOwM,EAAIE,QAAQE,MACvB/C,EAAMmO,uBAAuBhY,KASrB6M,WArBM,SAACC,GACfN,EAAIE,SACgB,KAAhBI,EAAMC,QACNlD,EAAMoO,aAAapO,EAAMrF,gBACzBsI,EAAM5B,mBAkBF0B,MAAO/C,EAAMvJ,KACbkM,IAAKA,EACLJ,YAAY,oBACZzB,UAAS,UAAKR,IAAQ+N,kCAE1B,4BACIzN,QAlCG,WACX+B,EAAIE,SACJ7C,EAAMoO,aAAapO,EAAMrF,iBAiCjBmG,UAAS,gCACPR,IAAQK,gCADD,kCAEPL,IAAQE,iCAFD,2BAFb,gBCpCH8N,GAAgC,SAACtO,GAI1C,OACI,yBAAKc,UAAS,UAAKR,IAAQ+E,iCACvB,yBAAKvE,UAAS,UAAK7K,IAAMsY,UACrB,yBAAKzN,UAAW7K,IAAM6Q,MAAOhF,IAAK9B,EAAMwO,OACxC,uBAAG1N,UAAS,UAAK7K,IAAMwY,iBAAX,YAA+BxY,IAAMyY,cAAgB1O,EAAM9J,MACvE,4BAAQyY,MAAM,cAAc/N,QARpB,WAChBZ,EAAM4O,WAAW5O,EAAMrK,GAAIqK,EAAM6C,UAO2B/B,UAAS,UAAK7K,IAAM4Y,yBAAX,YAAuC5Y,IAAM6Y,sBACtG,0CAGR,yBAAKhO,UAAS,UAAK7K,IAAM8Y,gBACrB,uBAAGjO,UAAS,UAAK7K,IAAM+Y,UAAX,YAAwB/Y,IAAMgZ,eAAiBjP,EAAM7J,MACjE,uBAAG2K,UAAW7K,IAAMiZ,eAApB,SAAyC,8BAAOlP,EAAM3J,WCfzD8Y,GAAsBtP,cARb,SAAC3C,GACnB,MAAO,CACHkS,MAAOlS,EAAMyB,mBAAmB7D,UAAYoC,EAAMD,aAAahH,MAAQiH,EAAMD,aAAazG,oBAC1FqM,QAAS3F,EAAMyB,mBAAmB7D,aAKkB,CAACuU,mB7BL3B,SAAC1Z,EAAIgF,GAAL,MAAyB,CAACnC,KAHxC,aAG2D7C,KAAIgF,oB6BKhDkF,ECLa,SAACG,GAC7C,IAAIsP,EAActP,EAAMoP,MACnBjQ,KAAI,SAAAoQ,GAAI,OAAI,kBAAC,GAAD,CACThK,IAAKgK,EAAK5Z,GACVA,GAAI4Z,EAAK5Z,GACTO,KAAMqZ,EAAKrZ,KACXC,KAAMoZ,EAAKpZ,KACXqY,KAAMe,EAAKnZ,IACXC,MAAOkZ,EAAKlZ,MACZuY,WAAY5O,EAAMqP,mBAClBxM,QAAS7C,EAAM6C,aAElB2M,UACL,OACI,6BACKF,MCZAG,GAAiC,SAACzP,GAK3C,OACI,6BACI,kBAAC,KAAD,CAASY,QANA,WACb,IAAI8O,EAAU1P,EAAMrK,KAAOqK,EAAM2P,KAAO,KAAO,QAC/C3P,EAAM7F,kBAAkB6F,EAAMrK,GAAI+Z,IAIApO,GAAE,mBAActB,EAAMrK,KAChD,6BACI,yBAAKmL,UAAS,UAAKuB,KAAQuN,OAAb,YAAuBvN,KAAQT,aAAeE,IAAK9B,EAAM2G,QAG/E,uBAAG7F,UAAWuB,KAAQwN,cAAe7P,EAAM9J,QCX1C4Z,GAAsBjQ,cARb,SAAC3C,GACnB,MAAO,CACHxE,QAASwE,EAAM2B,eAAenG,QAC9BiX,KAAMzS,EAAMyB,mBAAmBlE,OAAO6D,UAKc,CAACnE,sBAA1B0F,ECKK,SAACG,GAUrC,OACI,yBAAKc,UAAS,UAAKR,IAAQ+E,iCACvB,uBAAGvE,UAAWuB,KAAQ0N,YAAtB,eAA8C,8BAAO/P,EAAMtH,QAAQ4E,SACnE,yBAAKwD,UAAWuB,KAAQ2N,eAZf,WAIb,IAHA,IAAIC,EAAM,GACNC,EAAQlQ,EAAMtH,QAETgF,GADWwS,EAAMC,MAAK,kBAAM5M,KAAK6M,SAAW,MACxC,GAAG1S,EAAI6F,KAAK8M,IAAIH,EAAM5S,OAAQ,GAAII,IAC3CuS,EAAIzS,KAAK0S,EAAMxS,IAEnB,OAAOuS,EAAI9Q,KAAI,SAAAmR,GAAM,OAAI,kBAAC,GAAD,CAAUX,KAAM3P,EAAM2P,KAAMxV,kBAAmB6F,EAAM7F,kBAAmBxE,GAAI2a,EAAO3a,GAAI4P,IAAK+K,EAAO3a,GAAIO,KAAMoa,EAAOpa,KAAMyQ,IAAK2J,EAAOxR,YAMtJyR,QCXXxP,GAAazH,GAENkX,GAAkCvF,YAC3CpL,cAfkB,SAAC3C,GACnB,MAAO,CACHvC,eAAgBuC,EAAMyB,mBAAmB7D,UACrCoC,EAAMyB,mBAAmBlE,OAASyC,EAAMyB,mBAAmBhE,eAC/D8V,eAAgBvT,EAAMD,aAAahH,MACnCiF,WAAYgC,EAAMgC,aAAahE,WAC/BJ,UAAWoC,EAAMyB,mBAAmB7D,UACpCD,SAAUqC,EAAMyB,mBAAmB9D,SACnC6V,UAAWxT,EAAM0B,qBAOI,CAACmC,cAAY4P,sB7BmEL,SAACxY,EAAgBxC,GAClD,8CAAO,WAAO+D,GAAP,eAAAC,EAAA,sEACGzC,EAAoBiB,GADvB,uBAEcjB,EAAevB,GAF7B,OAEC+B,EAFD,OAGHgC,EAASJ,GAA0B5B,EAAM,OAHtC,2CAAP,mDAAM,I6BpEuD+S,kB3BFhC,SAAC9U,GAC9B,8CAAO,WAAO+D,GAAP,eAAAC,EAAA,sEACGzC,EAAiBvB,GADpB,uBAEkBuB,IAFlB,OAECO,EAFD,OAGHiC,EAASO,GAAgBC,cAAczC,IAHpC,2CAAP,mDAAM,M2BENmT,GAF2CK,ECKK,SAACjL,GAAW,IAAD,EACjCC,mBAASD,EAAMnF,UADkB,oBACtDqF,EADsD,KAC9CC,EAD8C,OAEnCF,mBAASD,EAAM9E,YAFoB,oBAEtD0V,EAFsD,KAE/CC,EAF+C,KAY3D,OARAzQ,qBAAU,WACND,EAAUH,EAAMnF,YACjB,CAACmF,EAAMnF,WAEVuF,qBAAU,WACNyQ,EAAS7Q,EAAM9E,cAChB,CAAC8E,EAAM9E,aAEN0V,EAAc,kBAAC,GAAD,MAEd,6BACI,yBAAK9P,UAAWgQ,IAASC,oCACrB,yBAAKjQ,UAAWgQ,IAASE,sCACrB,kBAAC,GAAD,CACIlS,OAAQkB,EAAMrF,eAAeD,OAAOwD,MACpCuK,YAAazI,EAAM2Q,sBACnBhb,GAAIqK,EAAMrF,eAAe2D,OACzBpI,KAAM8J,EAAMrF,eAAe8D,SAC3B3D,UAAWkF,EAAMlF,UACjB2P,kBAAmBzK,EAAMyK,kBACzB5P,SAAUqF,IAEbF,EAAMlF,WAAa,kBAACgV,GAAD,OAGxB,yBAAKhP,UAAWgQ,IAASG,qCACrB,kBAAC,GAAD,CACI/a,KAAM8J,EAAMrF,eAAe8D,UAAY,UACvC9G,OAAQqI,EAAMrF,eAAehD,OAC7BkW,QAAS7N,EAAMrF,eAAekT,QAC9BC,OAAQ9N,EAAMrF,eAAeuW,0BAC7BnD,OAAQ/N,EAAMrF,eAAewW,eAC7BvW,SAAUoF,EAAMrF,eAAeC,WAElCoF,EAAMlF,WAAa,kBAAC,GAAD,MACnBkF,EAAMlF,WAAa,kBAACqU,GAAD,Y,oBCzDzBiC,GAXE,SAAAtE,GACb,IAAMuE,EAAS,GAOf,OANKvE,EAAOjV,QACRwZ,EAAOxZ,MAAQ,YAEdiV,EAAOhV,WACRuZ,EAAOvZ,SAAW,YAEfuZ,GCGIC,GATO,SAACxE,GACnB,OAHUyE,EAGG,IAHG,IAAI5J,SAAQ,SAAAC,GAAO,OAAI4J,WAAW5J,EAAS2J,OAGxC/Z,MAAK,WAEpB,GAAI,CAAC,OAAQ,OAAQ,SAAU,SAASia,SAAS3E,EAAO4E,UACpD,KAAM,CAAEA,SAAU,6BANhB,IAAAH,GCMP,SAASI,GACZzb,EACAsC,EACA4T,EACAwF,GAGD,IAFC5R,EAEF,uDAFe,GACb6R,EACF,uDADqC,GAEnC,OACI,6BACI,6BACI,kBAAC3F,GAAA,EAAD,eACIhW,KAAMA,EACNsC,KAAMA,EACN4T,UAAWA,EACXwF,MAAOA,EACPR,SAAUS,GACN7R,M,uBCDT8R,OAhBf,SAAoB9R,GAChB,IAAM+M,EAAgB,UAAMgF,KAAUC,yBAAhB,YAA4CD,KAAUE,4BACtEC,EAAY,UAAMH,KAAUI,uBAC5BtG,EAAY,UAAMkG,KAAUK,sBAAhB,YAAyCL,KAAUM,wBAAnD,YAA8EN,KAAUO,yBAC1G,OACI,yBAAKxR,UAAWiM,GACZ,yBAAKjM,UAAWoR,GACZ,yCAEJ,yBAAKpR,UAAW+K,GACX8F,GAAyB,QAAS,OAAQY,GAAY,SAAU,YCMlEC,OAhBf,SAAuBxS,GACnB,IAAM+M,EAAgB,UAAMgF,KAAUC,yBAAhB,YAA4CD,KAAUE,4BACtEC,EAAY,UAAMH,KAAUI,uBAC5BtG,EAAY,UAAMkG,KAAUK,sBAAhB,YAAyCL,KAAUM,wBAAnD,YAA8EN,KAAUO,yBAC1G,OACI,yBAAKxR,UAAWiM,GACZ,yBAAKjM,UAAWoR,GACZ,4CAEJ,yBAAKpR,UAAW+K,GACX8F,GAA4B,WAAY,WAAYY,GAAY,SAAU,eCM5EE,OAhBf,SAAoBzS,GAChB,IAAM+M,EAAgB,UAAMgF,KAAUC,yBAAhB,YAA4CD,KAAUE,4BACtEC,EAAY,UAAMH,KAAUI,uBAC5BtG,EAAY,UAAMkG,KAAUW,mBAClC,OACI,yBAAK5R,UAAWiM,GACZ,yBAAKjM,UAAWoR,GACZ,+CAEJ,yBAAKpR,UAAW+K,GACX8F,GAA4B,WAAY,WAAYY,GAAY,SAAU,kB,oBCN9EI,GAA6B,SAAC3S,GACvC,IAAM+M,EAAgB,UAAM6F,KAAOC,0BAC7BC,EAAiB,UAAMF,KAAOG,oBAC9BlH,EAAY,UAAMkG,KAAUK,sBAAhB,YAAyCL,KAAUM,wBAAnD,YAA8EN,KAAUO,yBACpGU,EAAY,UAAMJ,KAAOK,uBAC/B,OACI,yBAAKnS,UAAWiM,GACZ,yBAAKjM,UAAWkS,GACXhT,EAAMhI,SAAW,yBAAK8I,UAAWgS,EAAmBhR,IAAK9B,EAAMhI,WAEpE,yBAAK8I,UAAWkS,GACZ,yBAAKlS,UAAS,UAAK+K,IACd7L,EAAMhI,SAAW2Z,GAA2B,UAAW,OAAQY,GAAY,SAAU,e,qBCL7FA,GAA2M,SAAC1H,GAAD,OAA8B,gBAAEqI,EAAF,EAAEA,MAAOtB,EAAT,EAASA,MAAOpZ,EAAhB,EAAgBA,KAAhB,IAAsB2a,KAAOC,EAA7B,EAA6BA,gBAAiBC,EAA9C,EAA8CA,QAASC,EAAvD,EAAuDA,MAAvD,OAClP,6BACI,yBAAKxS,UAAWsS,EAAkB,mBAAqB,IACnD,kBAACvI,EAAD,iBAAeqI,EAAf,CAAsB1a,KAAMA,EAAM+J,YAAaqP,KAC9CyB,GAAWC,GAAS,8BAAOA,OA8DzB/G,gBAAyB,CACpCjN,KAAM,kBAEN8R,YACAE,iBACAiC,gBAAiB,CAAC,UALPhH,EAtC0D,SAACvM,GAAW,IAC1EiM,EAA6CjM,EAA7CiM,aAIDc,GAJ8C/M,EAA/BwT,SAA+BxT,EAArByT,MAAqBzT,EAAd0T,WAIhB,UAAM3B,KAAUC,yBAAhB,YAA4CD,KAAUE,6BACtErJ,EAAa,UAAMmJ,KAAU4B,iBAAhB,YAAoC5B,KAAU6B,sBAA9C,YAAuE7B,KAAU8B,0BAC9FC,EAAU,UAAMlB,KAAOmB,sBAC7B,OAEI,0BAAM/H,SAAUC,GARL,SAAC9T,GACZ6H,EAAMgU,SAAS7b,EAASN,MAAOM,EAASL,SAAUK,EAASJ,SAAUI,EAASH,aAQ1E,yBAAK8I,UAAS,UAAKR,IAAQ+E,iCACvB,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAcrN,QAASgI,EAAMhI,UAC5BgI,EAAMsT,OACP,yBAAKxS,UAAS,UAAKiM,IACf,yBAAKjM,UAAS,UAAKgT,EAAL,YAAmB/G,IAC7B,6BAAK,yBAAKjL,IAAKmS,QACf,yBAAKnT,UAAS,UAAK8R,KAAOsB,4BACtB,8BAAOlU,EAAMsT,UAIzB,yBAAKxS,UAAWiM,GACZ,4BAAQlM,SAAUb,EAAM5G,cAChB0H,UAAS,UAAK8H,EAAL,YAAsB5I,EAAM5G,eAAiB2Y,KAAUoC,0BAChE3b,KAAK,UAFb,iBCpDP4b,GAAiBvU,cAXR,SAAC3C,GACnB,MAAO,CACH9D,cAAe8D,EAAMmC,aAAajG,cAClCpB,QAASkF,EAAMmC,aAAarH,QAC5BmB,SAAU+D,EAAMmC,aAAalG,SAC7BwR,YAAazN,EAAMmC,aAAahG,mBAOpC,CAACgb,axCHuB,SAACxc,EAAeC,EAAkBC,EAAmBC,GAC7E,8CAAO,WAAO0B,GAAP,mBAAAC,EAAA,6DAEHD,EAASZ,IAA0B,IAFhC,SAGkB5B,EAAYW,EAAOC,EAAUC,EAAUC,GAHzD,WAGCP,EAHD,QAIUC,KAAK4c,aAAe1b,GAAY2b,QAJ1C,iCAKkBrd,IALlB,cAKKQ,EALL,iBAMOgC,EAASa,GAAc9C,EAASC,KAAKA,KAAK4G,SANjD,QAOC5E,EAASZ,GAAqBpB,EAAKA,KAAK/B,GAAI+B,EAAKA,KAAKqB,MAAOrB,EAAKA,KAAKG,QAPxE,2BAQQJ,EAASC,KAAK4c,aAAezb,GAAkB2b,QARvD,kCASkBtd,IATlB,QASKQ,EATL,OAUCgC,EAASZ,GAAwBpB,IACjCgC,EAAS+a,aAAW,kBAAmB,CAACC,OAAQjd,EAASC,KAAKid,SAAS,MAXxE,wBAYQld,EAASC,KAAK4c,aAAe1b,GAAYyP,OAChD3O,EAAS+a,aAAW,kBAAmB,CAACC,OAAQjd,EAASC,KAAKid,SAAS,MAbxE,QAeHjb,EAASZ,IAA0B,IAfhC,4CAAP,mDAAM,KwCCoB+G,ECAS,SAACG,GACpC,IAAI4U,EAAkB,gBAEpBC,KAAOC,aAFa,iBAGpBD,KAAOE,YAHa,WAKtB,OAAI/U,EAAM7G,UAAY6G,EAAM2K,YAAoB,kBAAC,KAAD,CAAUrJ,GAAG,aAEzD,6BACI,kBAAC,GAAD,CACIlI,cAAe4G,EAAM5G,cACrB4a,SAAUhU,EAAMqU,aAChBW,MAAOJ,EACP5c,QAASgI,EAAMhI,QACf4V,cAAe,CAAC,UAAY,SCJ7BqH,OAhBf,SAAuBjV,GACnB,IAAM+M,EAAgB,UAAMgF,KAAUC,yBAAhB,YAA4CD,KAAUE,4BACtEC,EAAY,UAAMH,KAAUI,uBAC5BtG,EAAY,UAAMkG,KAAUK,sBAAhB,YAAyCL,KAAUM,wBAAnD,YAA8EN,KAAUO,yBAC1G,OACI,yBAAKxR,UAAWiM,GACZ,yBAAKjM,UAAWoR,GACZ,4CAEJ,yBAAKpR,UAAW+K,GACX8F,GAAyB,UAAW,OAAQY,GAAY,YAAa,0BCUvE2C,OAxBf,SAAwBlV,GACpB,IAAM+M,EAAgB,UAAMgF,KAAUC,yBAAhB,YAA4CD,KAAUE,4BACtEC,EAAY,UAAMH,KAAUI,uBAC5BtG,EAAY,UAAMkG,KAAUK,sBAAhB,YAAyCL,KAAUM,wBAAnD,YAA8EN,KAAUO,yBACpG1F,EAAO5M,EAAMpF,UAAYiS,OAAOD,KAAK5M,EAAMpF,WAAa,CAAC,WAAY,UAAW,KAAM,UAAW,YAAa,UAAW,SAAU,YACzI,OACI,6BACMgS,EAAKzN,KAAI,SAAAoG,GACP,OACI,yBAAKA,IAAKA,EAAKzE,UAAWiM,GACtB,yBAAKjM,UAAWoR,GACZ,8BACK3M,EAAI,GAAGyI,cAAgBzI,EAAI0I,MAAM,GAAK,MAG/C,yBAAKnN,UAAW+K,GACX8F,GAAe,mBAAkBpM,GAAO,OAAQgN,GAAY,SAA7C,eAA+DhN,EAA/D,iBChB7B6L,GALiB,SAACrO,GAC7B,IAAIA,EACJ,MAAO,qBCEIqO,GAAS,6BAsCT+D,OA7Bf,SAAuBnV,GACnB,IAAM+M,EAAgB,UAAMgF,KAAUC,yBAAhB,YAA4CD,KAAUE,4BACtEC,EAAY,UAAMH,KAAUI,uBAC5BtG,EAAY,UAAMkG,KAAUK,sBAAhB,YAAyCL,KAAUM,wBAAnD,YAA8EN,KAAUO,yBACpG8C,EAAe,UAAMrD,KAAUW,mBACrC,OACI,6BACI,yBAAK5R,UAAWiM,GACZ,yBAAKjM,UAAWoR,GACZ,6CAEJ,yBAAKpR,UAAW+K,GACX8F,GAAyB,4BAA6B,OACnDY,GAAY,YAAY,KAAM,KAAK,CAACnB,OAIhD,yBAAKtQ,UAAWiM,GACZ,yBAAKjM,UAAWoR,GACZ,mDAEJ,yBAAKpR,UAAWsU,GACXzD,GAAgB,iBAAkB,WAAYY,GAAY,SAAU,QCV1E8C,OAjBf,SAAoBrV,GAChB,IAAM+M,EAAgB,UAAMgF,KAAUC,yBAAhB,YAA4CD,KAAUE,4BACtEC,EAAY,UAAMH,KAAUI,uBAC5BtG,EAAY,UAAMkG,KAAUK,sBAAhB,YAAyCL,KAAUM,wBAAnD,YAA8EN,KAAUO,yBAC1G,OACI,yBAAKxR,UAAWiM,GACZ,yBAAKjM,UAAWoR,GACZ,wCAEJ,yBAAKpR,UAAW+K,GACX8F,GAAyB,WAAY,OAAQY,GAAY,SAAU,0BCAvE+C,GAAerK,YACxBpL,cAbkB,SAAC3C,GACnB,MAAO,CACHvH,GAAIuH,EAAMyB,mBAAmBlE,OAAO6D,OACpCsP,cAAe1Q,EAAMyB,mBAAmBlE,OACxCG,SAAUsC,EAAMyB,mBAAmBlE,OAAOG,YASrB,CAAC2a,oB9C2DK,SAAC7d,EAAmB/B,GACnD,8CAAO,WAAO+D,GAAP,eAAAC,EAAA,sEACGzC,EAAmBQ,GADtB,uBAEkBR,EAAevB,GAFjC,OAEC8B,EAFD,OAGHiC,EAASJ,GAA0B7B,EAAU,OAC7CiC,EAASJ,IAA0B,IAJhC,2CAAP,mDAAM,M8C3DNiT,aAAU,CAAEjN,KAAM,WAAYkN,oBAAqB,IACnD5B,GAHwBK,ECQyC,SAACjL,GAClE,IAAIgM,EAAQ,uCAAG,WAAOtU,GAAP,SAAAiC,EAAA,6DACX6M,GAAY,GADD,SAELxG,EAAMuV,oBAAoB7d,EAAMsI,EAAMrK,IAFjC,OAGX6Q,GAAY,GAHD,2CAAH,sDADgE,EAM5CvG,oBAAS,GANmC,oBAMrEY,EANqE,KAM3D2F,EAN2D,KAOtEoC,EAAa,UAAMmJ,KAAU4B,iBAAhB,YAAoC5B,KAAU6B,sBAA9C,YAAuE7B,KAAU8B,0BAC9F9G,EAAgB,UAAMgF,KAAUC,yBAAhB,YAA4CD,KAAUE,4BAC5E,OACI,yBAAKnR,UAAS,UAAKR,IAAQ+E,iCACvB,0BAAM2G,SAAUhM,EAAMiM,aAAaD,IAC/B,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAgBpR,SAAUoF,EAAMpF,WAChC,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,yBAAKkG,UAAWiM,GACZ,4BAAQlM,SAAUA,EAAUC,UAAS,UAAK8H,EAAL,YAAsB/H,GAAYkR,KAAUoC,2BAAjF,c,oBC3BPqB,GAA8B,SAACxV,GAQxC,OACI,yBAAKc,UAAS,WAAMd,EAAMyV,QAAUZ,KAAOa,+BACvC,yBAAK5U,UAAW+T,KAAOc,cACnB,kBAAC,KAAD,CAAS/U,QAPA,WACjB,IAAI8O,EAAU1P,EAAMxB,WAAawB,EAAM2P,KAAO,KAAO,QACrD3P,EAAM7F,kBAAkB6F,EAAMxB,SAAUkR,IAKEpO,GAAE,mBAActB,EAAMxB,UAC/CsC,UAAS,UAAK+T,KAAOe,sBAC1B,yBAAK9U,UAAW+T,KAAOgB,WAAY/T,IAAK9B,EAAM8V,WAElD,yBAAKhV,UAAS,UAAK+T,KAAOkB,YAAZ,YAA2BlB,KAAOe,sBAC5C,2BAAI5V,EAAMzG,MAEd,yBAAKuH,UAAS,UAAK+T,KAAOmB,YAAZ,YAA2BnB,KAAOe,sBAC5C,2BAAI5V,EAAMiW,OAEd,yBAAKnV,UAAS,UAAK+T,KAAOhG,2BACtB,4BAAQjO,QArBD,WACnBZ,EAAMkW,cAAclW,EAAM7D,MAAO6D,EAAMrK,KAoBQmL,UAAS,WAAM7K,IAAM6Y,sBAAuB,2CAIvF,yBAAKhO,UAAS,UAAK+T,KAAOsB,oBAAZ,YAAmCtB,KAAOuB,yBACpD,uBAAGtV,UAAS,UAAK+T,KAAOwB,qBAAuBrW,EAAMsW,YCtCxDC,GAAgC,SAACvW,GAC1C,OACI,yBAAKc,UAAS,UAAK+T,KAAO2B,cAAZ,aAA8B3B,KAAO4B,sBAC/C,uBAAG3V,UAAS,wBACV+T,KAAO6B,YADG,0BAEV7B,KAAO8B,mBAFG,0BAGV9B,KAAO+B,oBAHG,mBAAZ,UAMQ5W,EAAM6W,QAAQ7W,EAAMrK,IAAImhB,aCYtC7a,GAAwBhC,GAAgBgC,sBAQ/B8a,GALQ9L,YACnBpL,cArBkB,SAAC3C,EAAqB8C,GAGxC,IAFA,IAAIgX,EAAmBhX,EAAMiX,IACzBnZ,EAAQ,EACHJ,EAAI,EAAGA,EAAIR,EAAMU,eAAenB,QAAQa,OAAQI,IACjDsZ,IAAa9Z,EAAMU,eAAenB,QAAQiB,GAAG/H,KAC7CmI,EAAQJ,GAGhB,MAAO,CACHjH,KAAMyG,EAAMU,eAAenB,QAAQqB,GAAOrH,KAC1Cd,GAAIqhB,EACJlZ,QACAzB,GAAIa,EAAMyB,mBAAmBlE,UASR,CAACwB,yBAAuBib,iBhDHrB,SAACvhB,EAAY2gB,EAAiBja,GAC1D,8CAAO,WAAO3C,GAAP,SAAAC,EAAA,sEACGzC,EAAgBvB,EAAI2gB,GADvB,uBAEG5c,EAAS6C,GAAe5G,EAAI0G,IAF/B,2CAAP,mDAAM,MgDCa4O,ECXY,SAACjL,GAChC,IAAI2C,EAAMR,IAAMC,YAehB,OACI,yBAAKtB,UAAS,UAAK+T,KAAOsC,eAAZ,YAA8BtC,KAAOuC,iBAArC,YAAyDvC,KAAOpS,eAC1E,2BACIG,SAVM,WACd,IAAIzM,EACAwM,EAAIE,UACJ1M,EAAOwM,EAAIE,QAAQE,MACnB/C,EAAM/D,sBAAsB9F,EAAM6J,EAAMlC,SAOpCkF,WAlBD,SAACC,GACR,GAAoB,KAAhBA,EAAMC,OAAgBP,EAAIE,QAAS,CACnC,IAAI1M,EAAOwM,EAAIE,QAAQE,MACvB/C,EAAMkX,iBAAiBlX,EAAMrK,GAAIQ,EAAM6J,EAAM3D,MAgBzC0G,MAAO/C,EAAMvJ,KACbkM,IAAKA,EACL7B,UAAW+T,KAAOwC,mBAClB9U,YAAY,qBCrBf+U,GACTrM,YAEIpL,cAbc,SAAC3C,GACnB,MAAO,CACHhC,WAAYgC,EAAMgC,aAAahE,WAC/ByU,KAAMzS,EAAMyB,mBAAmBlE,OAAO6D,OACtCxD,UAAWoC,EAAMyB,mBAAmBlE,OACpCoc,QAAS3Z,EAAMU,eAAenB,WAS1B,CAAC8a,mBlDSqB,SAACpb,EAAexG,GAC9C,8CAAO,WAAO+D,GAAP,SAAAC,EAAA,sEACGzC,EAAkBiF,GADrB,OAEHzC,EAASO,GAAgBiC,sBAAsBC,EAAOxG,IAFnD,2CAAP,mDAAM,IkDVuBwE,qBAAkBmC,6BAC3Ckb,KACA5M,GALJK,ECAoC,SAACjL,GACrC,IAAIiX,EAAMQ,OAAOzX,EAAMxK,MAAMkiB,OAAOC,QACpCvX,qBAAU,WACNJ,EAAM1D,wBAAwB2a,EAAKjX,EAAMlF,aAC1C,CAA0B,IAAzBkF,EAAM6W,QAAQvZ,SAGlB,IAFA,IAAIsa,EAAsC,GACtC9Z,EAAQ,EACHJ,EAAI,EAAGA,EAAIsC,EAAM6W,QAAQvZ,OAAQI,IAClCuZ,IAAQjX,EAAM6W,QAAQnZ,GAAG/H,KACzBiiB,EAAkB5X,EAAM6W,QAAQnZ,GAAGW,SACnCP,EAAQJ,GAGhB,IAAIma,EAAYD,EAAgBzY,KAAK,SAAA2Y,GAAG,OAAI,kBAAC,GAAD,CACxCvS,IAAKuS,EAAIniB,GACTA,GAAIqK,EAAM6W,QAAQ/Y,GAAOnI,GACzBwG,MAAO2b,EAAIniB,GACX8f,OAAQqC,EAAIrC,OACZjX,SAAUsZ,EAAItZ,SACdsX,QAASgC,EAAI/hB,OACbugB,QAASwB,EAAI1f,KACbmB,IAAKue,EAAIvZ,WACT0X,KAAM6B,EAAIC,QACV7B,cAAelW,EAAMuX,mBACrBpd,kBAAmB6F,EAAM7F,kBACzBwV,KAAM3P,EAAM2P,UAGhB,OAAG3P,EAAM9E,WAAmB,kBAAC,GAAD,MAExB,6BACI,yBAAK4F,UAAS,UAAKR,IAAQ+E,+BAAb,YAA+CwP,KAAOmD,aAChE,kBAAC,GAAD,CAAOriB,GAAImI,EACJ+Y,QAAS7W,EAAM6W,UAEtB,yBAAK/V,UAAS,UAAK+T,KAAOoD,YACrBJ,GAEL,kBAAC,GAAD,CAAgBZ,IAAKA,SCvBtBiB,GArB0B,SAAClY,GAKtC,OACI,yBAAKc,UAAS,UAAKd,EAAMmY,SAAW5W,KAAO6W,8BAAgCxX,QALrE,WACNZ,EAAMqY,WAAWrY,EAAMrK,GAAIqK,EAAM3D,MAK7B,kBAAC,KAAD,CAASiF,GAAI,WAAatB,EAAMrK,GACvBmL,UAAS,UAAKS,KAAOC,cAAZ,YAA6BD,KAAOE,aAApC,YAAoDF,KAAOG,uBACzE,6BACI,yBAAKZ,UAAS,UAAKa,KAAOC,YAAZ,YAA2BL,KAAOM,sBAAwBC,IAAK9B,EAAM2G,OAEvF,yBAAK7F,UAAWS,KAAOS,sBACnB,uBAAGlB,UAAS,UAAKS,KAAOU,uBAAyBjC,EAAM9J,MACvD,uBAAG4K,UAAS,UAAKS,KAAOU,uBAAyBjC,EAAMmY,QAAU,GAAK,KAAOnY,EAAMmY,a,yCCfxFG,OAff,SAAwBtY,GACpB,IAAMuY,EAAU,UAAMC,KAAQC,oBAAd,YAAqCD,KAAQE,qBAC7D,OACI,6BACI,yBAAK5X,UAAW0X,KAAQG,sBACpB,oHAEJ,yBAAK7X,UAAW0X,KAAQI,sBACpB,yBAAK9X,UAAWyX,EAAYzW,IAAK+W,UCiClCC,GA5B0B,SAAC9Y,GACtC,IAAI+Y,EACAC,EAAU,IAAIC,OAAOjZ,EAAMrH,WAAY,OAC3CogB,EAAc/Y,EAAM6W,QACf1X,KAAI,SAAA+Z,GACG,GAAgC,IAA5BlZ,EAAMrH,WAAW2E,QAAgB4b,EAAOpC,SAASthB,MAAMwjB,GACvD,OAAO,kBAAC,GAAD,CACHzT,IAAK2T,EAAOvjB,GACZA,GAAIujB,EAAOvjB,GACXO,KAAMgjB,EAAOpC,SACbnQ,IAAKuS,EAAOxe,OAAOwD,MACnBia,QAASe,EAAOC,iBAChBd,WAAYrY,EAAM1D,wBAClBD,GAAI2D,EAAM3D,QAK9B,IAAK,IAAIqB,EAAI,EAAGA,EAAIqb,EAAYzb,OAAQI,IACpC,GAAIqb,EAAYrb,GAAI,OAAQ,6BAAMqb,GAEtC,OACI,6BACI,kBAAC,GAAD,QCjBGK,GALcnO,YACzBpL,cAVkB,SAAC3C,GACnB,MAAO,CACH2Z,QAAS3Z,EAAMU,eAAenB,QAC9BJ,GAAIa,EAAMyB,mBAAmBlE,OAC7B9B,WAAYuE,EAAMU,eAAejF,cAMZ,CAAC2D,6BAC1BsO,GAFyBK,CAG3B6N,ICTIhd,GAAmB7B,GAAgB6B,iBAE5Bud,GAAkBxZ,cART,SAAC3C,GACnB,MAAO,CACHvE,WAAYuE,EAAMU,eAAejF,cAMe,CAACmD,qBAA1B+D,ECGM,SAACG,GAClC,IAAIsZ,EAAOnX,IAAMC,YAQjB,OACI,yBAAKtB,UAAS,UAAKR,IAAQ+E,iCACvB,6BACI,2BAAOvE,UAAS,UAAKS,KAAOiB,aAAZ,YAA4BjB,KAAOkB,aAAnC,YAAmDlB,KAAOmB,gBACnEH,YAAY,SACZI,IAAK2W,EACLvW,MAAO/C,EAAMrH,WACbiK,SAdD,WACd,GAAI0W,EAAKzW,QAAS,CACd,IAAI1M,EAAOmjB,EAAKzW,QAAQE,MACxB/C,EAAMlE,iBAAiB3F,QAevB,6BACI,kBAAC,GAAD,WCnBHojB,GAA4B,SAACvZ,GAKtC,OACI,6BACI,kBAAC,KAAD,CAASY,QANM,SAACQ,GACpB,GAAIpB,EAAM9E,WAAY,OAAOkG,EAAEC,iBAC/BrB,EAAM7F,kBAAkB6F,EAAMrK,GAAI,UAIM2L,GAAI,YAActB,EAAMrK,GACnDmL,UAAS,UAAKS,KAAOC,cAAZ,YAA6BD,KAAOE,aAApC,YAAoDF,KAAOG,uBACzE,6BACI,yBAAKZ,UAAS,UAAKa,KAAOC,YAAZ,YAA2BL,KAAOM,sBAAwBC,IAAK9B,EAAM2G,IAAK5E,IAAI,SAEhG,yBAAKjB,UAAWS,KAAOS,sBACnB,uBAAGlB,UAAS,UAAKS,KAAOU,uBAAxB,UAAoDjC,EAAM9J,WClBjEsjB,GAAsB3Z,cARb,SAAC3C,GACnB,MAAO,CACHxE,QAASwE,EAAM2B,eAAenG,QAC9BC,WAAYuE,EAAM2B,eAAelG,WACjCuC,WAAYgC,EAAMgC,aAAahE,cAIqB,CAACrB,mBAAiBM,sBAA3C0F,ECIK,SAACG,GAiBrC,IAhBA,IAAIgZ,EAAU,IAAIC,OAAOjZ,EAAMrH,WAAY,OACvC4X,EAAavQ,EAAMtH,QAClByG,KAAI,SAAAsa,GACD,GAAgC,IAA5BzZ,EAAMrH,WAAW2E,QAAgBmc,EAAKvjB,KAAKV,MAAMwjB,GACjD,OAAO,kBAAC,GAAD,CACHzT,IAAKkU,EAAK9jB,GACVA,GAAI8jB,EAAK9jB,GACTO,KAAMujB,EAAKvjB,KACXyQ,IAAK8S,EAAK3a,OACV5D,WAAY8E,EAAM9E,WAClBrB,gBAAiBmG,EAAMnG,gBACvBM,kBAAmB6F,EAAM7F,uBAKhCuD,EAAI,EAAGA,EAAI6S,EAAWjT,OAAQI,IACnC,GAAI6S,EAAW7S,GAAI,OACf,6BACI,sCAAW,8BAAOsC,EAAMtH,QAAQ4E,SAC/BiT,GAIb,OACI,6BACI,kBAAC,GAAD,UCjCNmJ,GAAenhB,GAERohB,GAAwB9Z,cAPf,SAAC3C,GACnB,MAAO,CACHvE,WAAYuE,EAAM2B,eAAelG,cAKqB,CAAC+gB,iBAA1B7Z,ECEM,SAACG,GACxC,IAAIsZ,EAAOnX,IAAMC,YAOjB,OACI,yBAAKtB,UAAWuB,KAAQC,wBACpB,2BACIC,YAAY,mBACZzB,UAAS,UAAKS,KAAOiB,aAAZ,YAA4BjB,KAAOkB,aAAnC,YAAmDlB,KAAOmB,gBACnEE,SAXM,WACd,GAAI0W,EAAKzW,QAAS,CACd,IAAI1M,EAAOmjB,EAAKzW,QAAQE,MACxB/C,EAAM0Z,aAAavjB,KASfwM,IAAK2W,EACLvW,MAAO/C,EAAMrH,aAEjB,kBAAC,KAAD,CAAS2I,GAAG,SACR,4BAAQR,UAAS,UAAKR,IAAQK,gCAAb,YAAgDL,IAAQE,mCAAzE,qBCpBDoZ,OATf,SAAmB5Z,GACf,OACI,yBAAKc,UAAWR,IAAQ+E,gCACpB,kBAACsU,GAAD,MACA,kBAACH,GAAD,QCGNxY,GAAa1H,GAENugB,GAAwBha,cARf,SAAC3C,GACnB,MAAO,CACHR,aAAcQ,EAAMU,eAAelB,gBAMoB,CAACsE,eAA3BnB,ECJgB,SAACG,GAIlD,OACI,6BACI,wBAAIc,UAAS,UAAKgZ,IAASC,uBACvB,4BACI,kBAAC,KAAD,CAASnZ,QAPL,WAChBZ,EAAMgB,YAAW,IAM4BM,GAAG,WAC3BR,UAAS,UAAKgZ,IAASE,6BADhC,YAGJ,4BACI,kBAAC,KAAD,CAAS1Y,GAAG,WAAWR,UAAS,UAAKgZ,IAASE,6BAA9C,WACKha,EAAMtD,aAAe,GAAK,KAAOsD,EAAMtD,eAIhD,4BACI,kBAAC,KAAD,CAAS4E,GAAG,WAAWR,UAAS,UAAKgZ,IAASE,6BAA9C,YAEJ,4BACI,kBAAC,KAAD,CAAS1Y,GAAG,YAAYR,UAAS,UAAKgZ,IAASE,6BAA/C,kBCULC,OA7Bf,SAAcja,GAQV,OACI,yBAAKc,UAAS,UAAKoZ,IAAQC,oBACvB,6BACI,kBAACN,GAAD,OAEJ,6BACI,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOO,KAAK,kBAAkBC,OAZ3B,kBAAM,kBAAC/C,GAAD,SAaT,kBAAC,KAAD,CAAO8C,KAAK,WAAWC,OAfzB,kBAAM,kBAAC7J,GAAD,SAgBJ,kBAAC,KAAD,CAAO4J,KAAK,WAAWC,OAfzB,kBAAM,kBAAChB,GAAD,SAgBJ,kBAAC,KAAD,CAAOe,KAAK,WAAWC,OAdvB,kBAAM,kBAAC,GAAD,SAeN,kBAAC,KAAD,CAAOD,KAAK,SAASC,OAdtB,kBAAM,kBAAClV,GAAD,SAeL,kBAAC,KAAD,CAAOiV,KAAK,SAASC,OAdrB,kBAAM,kBAACjG,GAAD,SAeN,kBAAC,KAAD,CAAOgG,KAAK,YAAYC,OAdrB,kBAAM,kBAAC/E,GAAD,SAeT,kBAAC,KAAD,CAAUgF,KAAK,IAAIhZ,GAAG,iBClB7BiZ,GAAwB1a,cATf,SAAC3C,GACnB,MAAO,CACHsd,OAAQtd,EAAMmC,aAAalG,SAC3BpD,OAAQmH,EAAMyB,mBAAmBlE,OAAOC,OAAOwD,OAASE,QAMF,CAACqc,gBtEqBhC,WAC3B,8CAAO,WAAO/gB,GAAP,SAAAC,EAAA,sEACGzC,IADH,OAEHwC,EAASZ,GAAqB,KAAM,KAAM,OAFvC,2CAAP,mDAAM,KsEtB2B+G,ECAK,SAACG,GACvC,IAAI0a,EAAkB,gBACpB7F,KAAO8F,YADa,kBAEpB9F,KAAOC,aAFa,iBAGpBD,KAAOE,YAHa,kBAIpBF,KAAO+F,iBAJa,UAOlBrC,EAAU,gBACZ1D,KAAOgG,QADK,kBAEZhG,KAAOC,aAFK,iBAGZD,KAAOiG,uBAHK,UASd,OACI,yBAAKha,UAAW+T,KAAOkG,mBACnB,yBAAKja,UAAS,UAAK+T,KAAO8F,YAAZ,MAEN3a,EAAMwa,OACF,yBACI1Z,UAAWyX,EACXzW,IAAK9B,EAAMjK,OACX6K,QAXX,WACTZ,EAAMya,qBAaU,kBAAC,KAAD,CAASnZ,GAAG,UACR,4BAAQR,UAAW4Z,GAAnB,eChCbM,OARf,WACI,OACI,yBAAKla,UAAS,UAAKma,KAAOC,kBACtB,kBAACX,GAAD,QCSGY,OAbf,SAAmBnb,GACf,OACI,6BACI,6BACI,kBAAC,GAAD,OAEJ,yBAAKc,UAAU,aACX,kBAAC,GAAD,SCuCV5H,GAAUJ,GAEHsiB,GAAqBnQ,YAC9BpL,cAXkB,SAAC3C,GACnB,MAAO,CACHme,aAAcne,EAAMmC,aAAahG,gBACjCF,SAAU+D,EAAMmC,aAAalG,SAC7B+B,WAAYgC,EAAMgC,aAAahE,cAOV,CACrBhC,WACAqB,mBAEJid,KAL8BvM,EA3BG,SAACjL,GAQlC,OAPAI,qBAAU,WACN,sBAAC,4BAAAzG,EAAA,sEACoBzC,IADpB,OACOQ,EADP,OAEGsI,EAAM9G,QAAQxB,EAAKA,KAAK/B,GAAI+B,EAAKA,KAAKqB,MAAOrB,EAAKA,KAAKG,OACvDmI,EAAMzF,cAAc7C,EAAKA,KAAK/B,IAHjC,0CAAD,KAKD,IACCqK,EAAM7G,WAAa6G,EAAMqb,aAAqB,kBAAC,GAAD,MAE9C,6BACKrb,EAAMqb,cAAgB,kBAAC,GAAD,U,uCCpBnC,IAAMC,GAAYrU,SAAS0B,eAAe,QAE7B4S,GAAb,YACI,WAAYvb,GAAQ,IAAD,8BACf,4CAAMA,KACDhB,GAAKiI,SAASC,cAAc,OAFlB,EADvB,iFAOQoU,GAAUE,YAAYzQ,KAAK/L,MAPnC,6CAWQsc,GAAUG,YAAY1Q,KAAK/L,MAXnC,+BAeQ,OAAO0c,KAASC,aACZ5Q,KAAK/K,MAAM4b,SACX7Q,KAAK/L,QAjBjB,GAA2BmD,IAAM0I,WAuBjC6Q,KAASrB,OACL,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAU7a,MAAOA,IACb,kBAAC4b,GAAD,QAGRnU,SAAS0B,eAAe,ShFoFtB,kBAAmBkT,WACrBA,UAAUC,cAAcC,MAAMvkB,MAAK,SAAAwkB,GACjCA,EAAaC,iB,mBiFpInB/mB,EAAOC,QAAU,CAAC,qBAAuB,2CAA2C,qBAAuB,2CAA2C,uBAAyB,6CAA6C,oBAAsB,0CAA0C,uBAAyB,6CAA6C,uBAAyB,6CAA6C,oBAAsB,0CAA0C,sBAAwB,8C,mBCAhgBD,EAAOC,QAAU,CAAC,+BAAiC,iDAAiD,uBAAyB,yCAAyC,sBAAwB,wCAAwC,oBAAsB,sCAAsC,sBAAwB,wCAAwC,oBAAsB,sCAAsC,yBAA2B,6C,mBCAzbD,EAAOC,QAAU,CAAC,kBAAoB,uCAAuC,mCAAqC,wDAAwD,qCAAuC,0DAA0D,oCAAsC,2D,mBCAjTD,EAAOC,QAAU,CAAC,qBAAuB,mCAAmC,2BAA6B,2C,mBCAzGD,EAAOC,QAAU,CAAC,mBAAqB,wCAAwC,yBAA2B,8CAA8C,sBAAwB,2CAA2C,qBAAuB,0CAA0C,0BAA4B,+CAA+C,qBAAuB,4C,mBCA9XD,EAAOC,QAAU,CAAC,oBAAsB,wCAAwC,6BAA+B,mD,mBCA/GD,EAAOC,QAAU,CAAC,WAAa,iCAAiC,gBAAkB,sCAAsC,wBAA0B,8CAA8C,qBAAuB,2CAA2C,wBAA0B,8CAA8C,uBAAyB,6CAA6C,KAAO,6B,mBCAvZD,EAAOC,QAAU,CAAC,oBAAsB,0CAA0C,oBAAsB,0CAA0C,qBAAuB,2CAA2C,qBAAuB,6C,kBCA3OD,EAAOC,QAAU,CAAC,2BAA6B,4CAA4C,2BAA6B,4CAA4C,yBAA2B,0CAA0C,+BAAiC,gDAAgD,+BAAiC,gDAAgD,gCAAkC,iDAAiD,sCAAwC,uDAAuD,iCAAmC,kDAAkD,iCAAmC,kDAAkD,2BAA6B,4CAA4C,KAAO,wB,mBCAvzBD,EAAOC,QAAU,CAAC,aAAe,8BAA8B,uBAAyB,0C,mBCDxFD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.98025a9e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display__flex\":\"DialogFriend_display__flex__3Ftuq\",\"input__width\":\"DialogFriend_input__width__2PRzQ\",\"input__decor\":\"DialogFriend_input__decor__ECLJB\",\"input__padding\":\"DialogFriend_input__padding__2JVO4\",\"display__AvaPosition\":\"DialogFriend_display__AvaPosition__x4hEQ\",\"hover__decor\":\"DialogFriend_hover__decor__1ym-w\",\"NavLinks__fontsDecor\":\"DialogFriend_NavLinks__fontsDecor__1yK9V\",\"text__NameFontsDecor\":\"DialogFriend_text__NameFontsDecor__3Xdfe\",\"text__MessageFontsDecor\":\"DialogFriend_text__MessageFontsDecor__9mrQv\",\"border__borderBottom\":\"DialogFriend_border__borderBottom__1aEmF\",\"lastImg__decor\":\"DialogFriend_lastImg__decor__3JRBF\",\"dialog_containerViewMessages\":\"DialogFriend_dialog_containerViewMessages__36an9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-root\":\"portal_app-root__2fhuU\",\"modal-root\":\"portal_modal-root__3ri4x\",\"modal\":\"portal_modal__3i_iZ\",\"cropImage__width\":\"portal_cropImage__width__3Fc0Q\"};","module.exports = __webpack_public_path__ + \"static/media/senya.5a557dc0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mordovia.4235ff49.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ali.56b5ac7d.png\";","module.exports = __webpack_public_path__ + \"static/media/cat.587efa6e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Spinner-1.4s-3a356a.4b7d2a00.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_buttons__width\":\"buttonsUnderAva_main_buttons__width__3RiVU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PersonDialog_container__2kWJ-\",\"paddingOff\":\"PersonDialog_paddingOff__2XIAT\",\"upper__font\":\"PersonDialog_upper__font__epY0V\",\"upper__border\":\"PersonDialog_upper__border__DIHvb\",\"upper__marginBottom\":\"PersonDialog_upper__marginBottom__1SmV8\",\"upper_text__margin\":\"PersonDialog_upper_text__margin__143zn\",\"upper_text__padding\":\"PersonDialog_upper_text__padding__1YI_9\",\"dialog__flex\":\"PersonDialog_dialog__flex__2A-H_\",\"dialog_img\":\"PersonDialog_dialog_img__1JUEf\",\"dialog_name\":\"PersonDialog_dialog_name__3y-on\",\"dialog_name__margin\":\"PersonDialog_dialog_name__margin__2uWIg\",\"dialog_viewedMessages__color\":\"PersonDialog_dialog_viewedMessages__color__1DBNT\",\"dialog_time\":\"PersonDialog_dialog_time__3sXih\",\"message__block\":\"PersonDialog_message__block__2dYbn\",\"message__marginLeft\":\"PersonDialog_message__marginLeft__2y-Wh\",\"message__marginTop\":\"PersonDialog_message__marginTop__2Umkh\",\"message__containerSize\":\"PersonDialog_message__containerSize__14qrc\",\"input__decor\":\"PersonDialog_input__decor__2Elz9\",\"input__margins\":\"PersonDialog_input__margins__2feiA\",\"inputField__border\":\"PersonDialog_inputField__border__8hJ1r\",\"input__borderTop\":\"PersonDialog_input__borderTop__6DNMP\",\"deleteButton__marginLeft\":\"PersonDialog_deleteButton__marginLeft__RC6o7\"};","module.exports = __webpack_public_path__ + \"static/media/fail-1.1s-128px.ef1b9cc1.svg\";","module.exports = __webpack_public_path__ + \"static/media/coon.34f4a856.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button__decor\":\"pagesSearch_button__decor__eGWqr\",\"button__padding\":\"pagesSearch_button__padding__25BT2\",\"button__margins\":\"pagesSearch_button__margins__1I3Rc\",\"button_selected__decor\":\"pagesSearch_button_selected__decor__2P7uu\",\"pages_container__flex\":\"pagesSearch_pages_container__flex__1_hB5\",\"pages_portionButtons__size\":\"pagesSearch_pages_portionButtons__size__3jdcO\",\"pages_pageButtons__size\":\"pagesSearch_pages_pageButtons__size__1OqhX\",\"pages_pageButtons__width\":\"pagesSearch_pages_pageButtons__width__27aVX\",\"pages_portionButtons__width\":\"pagesSearch_pages_portionButtons__width__U5n8q\",\"pages_pageButtons__margin\":\"pagesSearch_pages_pageButtons__margin__Vlq09\",\"pages_portionButtonsPrev__margin\":\"pagesSearch_pages_portionButtonsPrev__margin__3woHZ\",\"pages_portionButtonsNext__margin\":\"pagesSearch_pages_portionButtonsNext__margin__3nH2A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings_container__flex\":\"settingsStyles_settings_container__flex__3qNL7\",\"settings_container__margin\":\"settingsStyles_settings_container__margin__IYGOJ\",\"settings_input__decor\":\"settingsStyles_settings_input__decor__16P0U\",\"settings_input__padding\":\"settingsStyles_settings_input__padding__3vyuD\",\"settings_input__margins\":\"settingsStyles_settings_input__margins__3Jkar\",\"settings_param__decor\":\"settingsStyles_settings_param__decor__2atrW\",\"settings__button\":\"settingsStyles_settings__button__1E25c\",\"settings__buttonDisabled\":\"settingsStyles_settings__buttonDisabled__2p-ur\",\"settings__buttonWidth\":\"settingsStyles_settings__buttonWidth__162hG\",\"settings_button__padding\":\"settingsStyles_settings_button__padding__-1Zzm\",\"settings_checkbox\":\"settingsStyles_settings_checkbox__3q1Pf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container__menu\":\"UpperMenu_container__menu__ND536\",\"container__menu_flex\":\"UpperMenu_container__menu_flex__dSgjn\",\"right\":\"UpperMenu_right__29jtD\",\"log_img\":\"UpperMenu_log_img__3GJ43\",\"log__margin\":\"UpperMenu_log__margin__2oAvD\",\"log__padding\":\"UpperMenu_log__padding__y-y_Q\",\"log_img__cursorPointer\":\"UpperMenu_log_img__cursorPointer__1Ww82\",\"log__button\":\"UpperMenu_log__button__MepqK\",\"log__buttonDisabled\":\"UpperMenu_log__buttonDisabled__cuG_h\",\"log__buttonWidth\":\"UpperMenu_log__buttonWidth__KwRT8\",\"log_display__flex\":\"UpperMenu_log_display__flex__Kj1T7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"posts_image__2N2bu\",\"mainDecor\":\"posts_mainDecor__2k_vT\",\"borderBottom\":\"posts_borderBottom__2M4G0\",\"likeMainDecor\":\"posts_likeMainDecor__1M3LB\",\"display\":\"posts_display__1xGhI\",\"post__margins\":\"posts_post__margins__3PfOo\",\"name__marginLeft\":\"posts_name__marginLeft__4nKEv\",\"name__Fonts\":\"posts_name__Fonts__2tMla\",\"deleteButton__marginLeft\":\"posts_deleteButton__marginLeft__1s64o\",\"deleteButton__decor\":\"posts_deleteButton__decor__3plkd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"font__size\":\"Friends_font__size__3vItK\",\"display__grid\":\"Friends_display__grid__1o5MF\",\"Friend__Ava\":\"Friends_Friend__Ava__1nRwG\",\"Friend__Font\":\"Friends_Friend__Font__2WdZl\",\"margin\":\"Friends_margin__3CUCV\"};","module.exports = __webpack_public_path__ + \"static/media/nullPhoto.e8c8c61a.jpg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Sarumyan from \"../../../img/Avatars/sarumyan.jpg\";\r\nimport Senya from \"../../../img/Avatars/senya.jpg\";\r\nimport Pendalf from \"../../../img/Avatars/pendalf.jpg\";\r\n\r\nconst ADD_POST = 'addPost';\r\nconst UPDATE_POST_TEXT = 'updateTextPostRedactor';\r\nconst DELETE_POST = 'deletePost';\r\nexport const postCreation = currentProfile => ({type: ADD_POST, currentProfile});\r\nexport const updatePostTextCreation = text => ({type: UPDATE_POST_TEXT, text});\r\nexport const deletePostCreation = (id, currentProfile) => ({type: DELETE_POST, id, currentProfile});\r\n\r\nlet defaultStatePosts = {\r\n    ProfileInfo: {\r\n        id: 0,\r\n        Name: \"Sarumyan\",\r\n        LastName: '',\r\n        Status: '',\r\n        Avatar: Sarumyan,\r\n    },\r\n    Posts: [\r\n        {id: 0, name: 'Sarumyan', text: 'Hello world !', ava: Sarumyan, likes: 11},\r\n        {id: 1, name: 'Senya', text: 'Hi', ava: Senya, likes: 15},\r\n        {id: 2, name: 'Pendalf', text: 'Hi', ava: Pendalf, likes: 99},\r\n        {id: 3, name: 'Pendalf', text: 'Hiiiii', ava: Pendalf, likes: 999}\r\n    ],\r\n    currentProfilePosts: [],\r\n    Temp: [\r\n        {\r\n            PostRedactor: ''\r\n        },\r\n    ]\r\n};\r\n\r\nexport function PostsInstructions(state = defaultStatePosts, action) {\r\n    // debugger\r\n    let stateCopy = {\r\n        ...state,\r\n        Posts: [...state.Posts]\r\n    };\r\n    switch (action.type) {\r\n        case ADD_POST:{\r\n            let id = 0;\r\n            let checkId = action.currentProfile ? stateCopy.Posts.length : stateCopy.currentProfilePosts.length;\r\n            if (checkId !== 0 && action.currentProfile){\r\n                id = stateCopy\r\n                    .Posts[stateCopy.Posts.length - 1]\r\n                    .id + 1\r\n            } else if (checkId !== 0 && !action.currentProfile){\r\n                id = stateCopy\r\n                    .currentProfilePosts[stateCopy.currentProfilePosts.length - 1]\r\n                    .id + 1\r\n            }\r\n            let createPost = {\r\n                id: id,\r\n                name: state.ProfileInfo.Name,\r\n                text: state.Temp[0].PostRedactor,\r\n                ava: state.ProfileInfo.Avatar,\r\n                likes: 0\r\n            };\r\n            action.currentProfile ? stateCopy.Posts.push(createPost) : stateCopy.currentProfilePosts.push(createPost);\r\n            stateCopy.Temp[0].PostRedactor = [...state.Temp[0].PostRedactor];\r\n            stateCopy.Temp[0].PostRedactor = '';\r\n            return stateCopy;\r\n        }\r\n        case UPDATE_POST_TEXT: {\r\n            stateCopy.Temp[0].PostRedactor = action.text;\r\n            return stateCopy;\r\n        }\r\n\r\n        case DELETE_POST:\r\n            let checkPosts = action.currentProfile ? stateCopy.Posts : stateCopy.currentProfilePosts;\r\n            for (let i = 0; i < checkPosts.length; i++) {\r\n                if (checkPosts[i].id === action.id) {\r\n                    checkPosts.splice(i, 1)\r\n                }\r\n            }\r\n            return stateCopy;\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n    ApiType, GetCaptcha,\r\n    GetDialogsType, GetMessagesType,\r\n    GetUsersType,\r\n    PostMessageResponseType,\r\n    ResultCodeCaptcha,\r\n    ResultCodes\r\n} from \"../../Common/typesAPI\";\r\nimport {DialogType, LoginType, MessageType, PhotosType, ProfileType} from \"../../Common/types\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        // 'API-KEY': '8d2e390a-6ddc-4d40-87d5-55b4df812b3f',\r\n        'API-KEY': '92f663dc-a854-487f-b2f1-2d8848f605fc',\r\n        // 'API-KEY': '750fc5a8-75a5-4ef1-94f4-80017fafe472',\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n});\r\n\r\nconst instancePhoto = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8d2e390a-6ddc-4d40-87d5-55b4df812b3f',\r\n        // 'API-KEY': '750fc5a8-75a5-4ef1-94f4-80017fafe472',\r\n        'Content-Type': 'multipart/form-data'\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n});\r\n\r\nexport const API = {\r\n    getUsers(pageSize: number = 10, currentPage: number = 1, user: string = '', bool: string | boolean = '') {\r\n        return instance.get<GetUsersType>(`users?count=${pageSize}&page=${currentPage}&term=${user}&friend=${bool}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getProfile(id: number | null) {\r\n        return instance.get<ProfileType>(`profile/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n    getStatus(id: number | null) {\r\n        return instance.get<string>(`profile/status/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n    putStatus(status: string) {\r\n        return instance.put<string>(`profile/status`, {status})\r\n    },\r\n    putProfileInfo(data: ProfileType) {\r\n        return instance.put<ProfileType>(`profile`, data)\r\n    },\r\n\r\n    getAuth() {\r\n        return instance.get<ApiType<LoginType, ResultCodes>>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    postLog(email: string, password: string | number, remember: boolean, captcha: string) {\r\n        return instance.post<ApiType<{userId: number}, ResultCodes | ResultCodeCaptcha>>(`auth/login?email=${email}&password=${password}&rememberMe=${remember}&captcha=${captcha}`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    postLogOut() {\r\n        return instance.post<ApiType<{}, ResultCodes | ResultCodeCaptcha>>(`auth/logout`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    getFollow(id: number) {\r\n        return instance.get<boolean>(`follow/${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    postFriendFollow(id: number) {\r\n        return instance.post<ApiType<{}, ResultCodes | ResultCodeCaptcha>>(`follow/${id}`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    postFriendUnFollow(id: number) {\r\n        return instance.delete<ApiType<{}, ResultCodes | ResultCodeCaptcha>>(`follow/${id}`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    postAvatarPhoto(formData: File) {\r\n        return instancePhoto.post<ApiType<PhotosType, ResultCodes>>(`profile/photo`, formData)\r\n            .then(response => {\r\n                return response.data.data\r\n            })\r\n    },\r\n    putNewDialog(id: number) {\r\n        return instance.put<ApiType<{}, ResultCodes | ResultCodeCaptcha>>(`dialogs/${id}`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    getDialogs() {\r\n        return instance.get<Array<GetDialogsType>>(`dialogs`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    postMessage(id: number, body: string) {\r\n        return instance.post<PostMessageResponseType>(`dialogs/${id}/messages`, {body})\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    deleteMessage(messageId: number) {\r\n        return instance.delete<ApiType<{}, ResultCodes>>(`dialogs/messages/${messageId}`)\r\n            .then(response => {\r\n                return response\r\n            })\r\n    },\r\n    getDialog(id: number) {\r\n        return instance.get<GetMessagesType>(`dialogs/${id}/messages`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    getCaptcha() {\r\n        return  instance.get<GetCaptcha>(`security/get-captcha-url`)\r\n            .then(response => {\r\n                return response.data.url\r\n            })\r\n    }\r\n};\r\n\r\n\r\n\r\n","import emptyPhoto from \"../../../img/Avatars/nullPhoto.jpg\"\r\nimport {FriendType, UserType} from \"../../Common/types\"\r\nimport {AppStateType, InferActionsTypes} from \"../Redux/Store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actionsFriends>\r\nexport type ThunkFriendsType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\ntype loadFriendsType = FriendType & UserType\r\nexport const actionsFriends = {\r\n    addFriend: (data: FriendType) => ({type: 'FriendsReducer/addFriend', data} as const),\r\n    deleteFriend: (id: number) => ({type: 'FriendsReducer/deleteFriend', id} as const),\r\n    loadFriends: (data: Array<any>) => ({type: 'FriendsReducer/loadFriends', data} as const),\r\n    updateSearch: (text: string) => ({type: 'FriendsReducer/updateSearch', text} as const)\r\n}\r\n\r\nlet defaultStateFriends = {\r\n    friends: [] as Array<FriendType>,\r\n    tempSearch: ''\r\n}\r\n\r\ntype DefaultStateType = typeof defaultStateFriends\r\n\r\nexport function FriendsInstructions(state = defaultStateFriends, action: ActionTypes): DefaultStateType {\r\n    let stateCopy: any = {...state, friends: [...state.friends]};\r\n    switch (action.type) {\r\n        case \"FriendsReducer/addFriend\":\r\n            action.data.avatar = action.data.avatar || emptyPhoto\r\n            return {...state, friends: [...state.friends, action.data]}\r\n        case \"FriendsReducer/deleteFriend\":\r\n            return {...state, friends: state.friends.filter( el => el.id !== action.id)}\r\n        case \"FriendsReducer/loadFriends\":\r\n            for (let i = 0; i < action.data.length; i++) {\r\n                action.data[i].avatar = action.data[i].photos.large || emptyPhoto\r\n                delete action.data[i].photos\r\n                delete action.data[i].status\r\n                delete action.data[i].uniqueUrlName\r\n            }\r\n            return {...state, friends: [...action.data]}\r\n        case \"FriendsReducer/updateSearch\":\r\n            return {...state, tempSearch: action.text}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {FriendType, LoginType, MessageType, PhotosType, ProfileType, UserType} from \"./types\";\r\n\r\n\r\nexport type GetUsersType = {\r\n    error: string | null\r\n    items: Array<UserType>\r\n    totalCount: number\r\n}\r\n\r\nexport type ApiType<d, c> = {\r\n    data: d\r\n    resultCode: c\r\n    messages: Array<string>\r\n}\r\n\r\nexport type GetDialogsType = {\r\n    hasNewMessages: boolean\r\n    id: number\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagecount: number\r\n    photos: PhotosType\r\n    userName: string\r\n}\r\n\r\nexport type PostMessageResponseType = {\r\n    data: {\r\n        message: {\r\n            addedAt: string\r\n            body: string\r\n            deletedByRecipient: boolean\r\n            deletedBySender: boolean\r\n            distributionId: number | null\r\n            id: string\r\n            isSpam: boolean\r\n            recipientId: number\r\n            recipientName: string\r\n            senderId: number\r\n            senderName: string\r\n            translatedBody: string | null\r\n            viewed: boolean\r\n        }\r\n    }\r\n    messages: Array<string>\r\n    resultCode: ResultCodes\r\n}\r\n\r\nexport type GetMessagesType = {\r\n    items: Array<{\r\n        addedAt: string\r\n        body: string\r\n        id: number\r\n        recipientId: number\r\n        senderId: number\r\n        senderName: string\r\n        translatedBody: string | null\r\n        viewed: boolean\r\n    }>\r\n    error: string | null\r\n    totalCount: number\r\n}\r\n\r\nexport type GetCaptcha = {\r\n    url: string\r\n}\r\n\r\nexport enum ResultCodes {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeCaptcha {\r\n    Captcha = 10\r\n}\r\n\r\n\r\n","import {API} from \"../API/API\";\r\nimport {initializeApp} from \"./ProfileInfoReducer\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {LoginType} from \"../../Common/types\";\r\nimport {AppStateType, InferActionsTypes} from \"../Redux/Store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {ResultCodeCaptcha, ResultCodes} from \"../../Common/typesAPI\";\r\ntype ActionLoginTypes = InferActionsTypes<typeof actionsLogin>\r\nexport type ThunkLoginType = ThunkAction<Promise<void>, AppStateType, unknown, ActionLoginTypes>\r\n\r\nexport const actionsLogin = {\r\n    logData: (id: number | null, login: string | null, email: string | null) => ({type: 'LoginReducer/logData', data: {id, login, email}} as const),\r\n    buttonAction: (bool: boolean) => ({type: 'LoginReducer/buttonAction', bool} as const),\r\n    loadProfileData: () => ({type: 'LoginReducer/loadProfileData'} as const),\r\n    getCaptcha: (cap: string | null) => ({type: 'LoginReducer/getCaptcha', cap} as const)\r\n}\r\n\r\nexport const postLogThunk = (email: string, password: string, remember: boolean, captcha: string): ThunkLoginType => {\r\n    return async (dispatch) => {\r\n        debugger\r\n        dispatch(actionsLogin.buttonAction(true))\r\n        let response = await API.postLog(email, password, remember, captcha)\r\n        if (response.data.resultCode === ResultCodes.Success) {\r\n            let data = await API.getAuth()\r\n            await dispatch(initializeApp(response.data.data.userId));\r\n            dispatch(actionsLogin.logData(data.data.id, data.data.login, data.data.email));\r\n        } else if (response.data.resultCode === ResultCodeCaptcha.Captcha) {\r\n            let data = await API.getCaptcha()\r\n            dispatch(actionsLogin.getCaptcha(data))\r\n            dispatch(stopSubmit('asyncValidation', {_error: response.data.messages[0]}))\r\n        } else if (response.data.resultCode === ResultCodes.Error) {\r\n            dispatch(stopSubmit('asyncValidation', {_error: response.data.messages[0]}))\r\n        }\r\n        dispatch(actionsLogin.buttonAction(false))\r\n    }\r\n};\r\n\r\nexport const postLogOutThunk = (): ThunkLoginType => {\r\n    return async (dispatch) => {\r\n        await API.postLogOut()\r\n        dispatch(actionsLogin.logData(null, null, null));\r\n    }\r\n};\r\n\r\nlet defaultStateLogin = {\r\n    logData: {} as LoginType,\r\n    isLogged: false,\r\n    buttonRequest: false,\r\n    loadProfileData: false,\r\n    captcha: null as null | string\r\n};\r\n\r\ntype DefaultStateLoginType = typeof defaultStateLogin\r\n\r\nexport function LoginInstructions(state = defaultStateLogin, action: ActionLoginTypes): DefaultStateLoginType {\r\n    switch (action.type) {\r\n        case \"LoginReducer/getCaptcha\":\r\n            return {...state, captcha: action.cap}\r\n        case \"LoginReducer/buttonAction\":\r\n            return {...state, buttonRequest: action.bool}\r\n        case \"LoginReducer/logData\":\r\n            return {...state, logData: {...action.data}, isLogged: !!action.data.id}\r\n        case \"LoginReducer/loadProfileData\":\r\n            return {...state, loadProfileData: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {API} from \"../API/API\";\r\nimport {actionsLogin, ThunkLoginType} from \"./LoginReducer\";\r\nimport {actionsUser} from \"./UserReducer\";\r\nimport {actionsMessages} from \"./MessagesReducer\";\r\nimport {actionsFriends, ThunkFriendsType} from \"./FriendsReducer\";\r\nimport {ContactsType, PhotosType, ProfileType} from \"../../Common/types\";\r\nimport {AppStateType, InferActionsTypes} from \"../Redux/Store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {Action} from \"redux\";\r\n\r\n\r\ntype ActionProfileType = InferActionsTypes<typeof actionsProfile>\r\ntype ThunkProfileType = ThunkAction<Promise<void>, AppStateType, unknown, ActionProfileType>\r\nexport const actionsProfile = {\r\n    getProfile: (user: ProfileType, who: string) => ({type: 'ProfileReducer/getProfile', user, who} as const),\r\n    setProfile: (bool: boolean) => ({type: 'ProfileReducer/setProfile', bool} as const),\r\n    getFollow: (boolean: boolean) => ({type: 'ProfileReducer/getFollow', boolean} as const),\r\n    getStatus: (status: string) => ({type: 'ProfileReducer/getStatus', status} as const)\r\n}\r\n\r\n\r\n\r\nconst getProfileInfo = (id: number | null, who: string): ThunkProfileType => {\r\n    return async (dispatch) => {\r\n        let data = await API.getProfile(id)\r\n        dispatch(actionsProfile.getProfile(data, who));\r\n        await dispatch(getStatusThunk(id))\r\n    }\r\n}\r\n\r\n\r\nexport const getProfileThunk = (id: number, who: string): ThunkProfileType => {\r\n    return async (dispatch) => {\r\n        await dispatch(getProfileInfo(id, who))\r\n        let responseFollow = await API.getFollow(id)\r\n        dispatch(actionsProfile.getFollow(responseFollow))\r\n    }\r\n};\r\n\r\nexport const getMyProfileThunk = (id: number | null, who: string): ThunkProfileType => {\r\n    return async (dispatch: any) => {\r\n        await dispatch(getProfileInfo(id, who))\r\n        let friends = await API.getUsers(100,1,'',true)\r\n        dispatch(actionsFriends.loadFriends(friends.items))\r\n        let response = await API.getDialogs()\r\n        dispatch(actionsMessages.getAllDialogs(response))\r\n    }\r\n};\r\n\r\n\r\nexport const setAnotherProfile = (id: number, who: string): ThunkProfileType => async (dispatch: any) => {\r\n    let checkWho = who === 'me'\r\n    dispatch(actionsUser.switchIsFetching(true))\r\n    dispatch(actionsProfile.setProfile(checkWho))\r\n    checkWho ? await dispatch(getMyProfileThunk(id, who)) : await dispatch(getProfileThunk(id, who));\r\n    dispatch(actionsUser.switchIsFetching(false))\r\n}\r\n\r\nexport const initializeApp = (id: number | null): ThunkLoginType => async (dispatch) => {\r\n    try {\r\n        await dispatch(getMyProfileThunk(id, 'me'));\r\n        dispatch(actionsLogin.loadProfileData());\r\n    } finally {\r\n        dispatch(actionsLogin.loadProfileData());\r\n    }\r\n}\r\n\r\nexport const getStatusThunk = (id: number | null): ThunkProfileType => {\r\n    return async (dispatch) => {\r\n        let data = await API.getStatus(id)\r\n        dispatch(actionsProfile.getStatus(data));\r\n    }\r\n};\r\n\r\nexport const putStatusThunk = (status: string): ThunkProfileType => {\r\n    return async (dispatch) => {\r\n        await API.putStatus(status)\r\n        dispatch(actionsProfile.getStatus(status));\r\n    }\r\n};\r\n\r\n\r\nexport const putProfileInfoThunk = (data: ProfileType, id: number): ThunkProfileType => {\r\n    return async (dispatch) => {\r\n        await API.putProfileInfo(data)\r\n        let response = await API.getProfile(id)\r\n        dispatch(actionsProfile.getProfile(response, 'me'));\r\n        dispatch(actionsProfile.setProfile(true))\r\n    }\r\n};\r\n\r\n\r\nexport const postProfilePhotoThunk = (formData: File, id: number): ThunkProfileType => {\r\n    return async (dispatch) => {\r\n        await API.postAvatarPhoto(formData)\r\n        let data = await API.getProfile(id)\r\n        dispatch(actionsProfile.getProfile(data, 'me'));\r\n    }\r\n};\r\n\r\nlet defaultStateProfile = {\r\n    logged: {photos: {} as PhotosType} as ProfileType,\r\n    currentProfile: {\r\n        contacts: {} as ContactsType,\r\n        photos: {} as PhotosType\r\n    } as ProfileType,\r\n    followed: null as boolean | null,\r\n    myProfile: true,\r\n};\r\n\r\ntype DefaultStateProfileType = typeof defaultStateProfile\r\n\r\nexport function ProfileInstructions(state = defaultStateProfile, action: ActionProfileType): DefaultStateProfileType {\r\n    let stateCopy = {\r\n        ...state,\r\n    }\r\n    switch (action.type) {\r\n        case \"ProfileReducer/getProfile\":\r\n            action.who === 'me' ? stateCopy.logged = action.user : stateCopy.currentProfile = action.user\r\n            stateCopy.logged.status = state.logged.status\r\n            return stateCopy;\r\n        case \"ProfileReducer/setProfile\":\r\n            return {...state, myProfile: action.bool};\r\n        case \"ProfileReducer/getStatus\":\r\n            stateCopy.myProfile ? stateCopy.logged.status = action.status : stateCopy.currentProfile.status = action.status\r\n            return stateCopy\r\n        case \"ProfileReducer/getFollow\":\r\n            stateCopy.followed = action.boolean\r\n            return stateCopy\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n","import {API} from \"../API/API\";\r\n// import {addFriend, deleteFriend} from \"./FriendsReducer\";\r\nimport {actionsFriends} from \"./FriendsReducer\";\r\nimport {actionsProfile} from \"./ProfileInfoReducer\";\r\nimport {UserType} from \"../../Common/types\";\r\nimport {AppStateType, InferActionsTypes} from \"../Redux/Store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\nlet defaultStateUsers = {\r\n    users: [] as Array<UserType>,\r\n    tempSearch: '',\r\n    totalUsers: 0,\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    isFetching: false,\r\n    pageButton: false,\r\n    addButton: false,\r\n};\r\n\r\nexport type DefaultStateType = typeof defaultStateUsers\r\n\r\ntype ActionUserType = InferActionsTypes<typeof actionsUser>\r\ntype ThunkUserType = ThunkAction<Promise<void>, AppStateType, unknown, ActionUserType>\r\n\r\n\r\nexport const actionsUser = {\r\n    addUser: (id: number) => ({type: 'UserReducer/addUser', id} as const),\r\n    deleteUser: (id: number) => ({type: 'UserReducer/deleteUser', id} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'UserReducer/setUsers', users} as const),\r\n    setTotalUsers: (count: number) => ({type: 'UserReducer/setTotalUsers', count} as const),\r\n    setPage: (page: number) => ({type: 'UserReducer/setPage', page} as const),\r\n    switchIsFetching: (bool: boolean) => ({type: 'UserReducer/switchIsFetching', bool} as const),\r\n    switchIsButton: (bool: boolean) => ({type: 'UserReducer/switchIsButton', bool} as const),\r\n    switchIsAddButton: (bool: boolean) => ({type: 'UserReducer/switchIsAddButton', bool} as const),\r\n    updateSearchText: (text: string) => ({type: 'userReducer/updateSearchText', text} as const)\r\n}\r\n\r\n\r\nexport const getUsersThunk = (pageSize: number, currentPage: number, user?: string): ThunkUserType => {\r\n    return async (dispatch: any) => {\r\n        dispatch(actionsUser.switchIsFetching(true));\r\n        let data = await API.getUsers(pageSize, currentPage, user)\r\n        dispatch(actionsUser.setUsers(data.items));\r\n        dispatch(actionsUser.setTotalUsers(data.totalCount));\r\n        dispatch(actionsUser.switchIsFetching(false));\r\n    }\r\n};\r\n\r\nexport const addUserThunk = (id: number, name: string, avatar: string): ThunkUserType => {\r\n    return async (dispatch: any) => {\r\n        dispatch(actionsUser.switchIsAddButton(true));\r\n        await API.postFriendFollow(id)\r\n        dispatch(actionsFriends.addFriend({id, name, avatar, followed: true}));\r\n        dispatch(actionsUser.addUser(id))\r\n        dispatch(actionsProfile.getFollow(true))\r\n        dispatch(actionsUser.switchIsAddButton(false));\r\n    }\r\n};\r\nexport const deleteUserThunk = (id: number): ThunkUserType => {\r\n    return async (dispatch: any) => {\r\n        dispatch(actionsUser.switchIsAddButton(true));\r\n        await API.postFriendUnFollow(id)\r\n        dispatch(actionsFriends.deleteFriend(id));\r\n        dispatch(actionsUser.deleteUser(id))\r\n        dispatch(actionsProfile.getFollow(false))\r\n        dispatch(actionsUser.switchIsAddButton(false));\r\n    }\r\n};\r\n\r\n\r\nexport function UsersInstructions(state = defaultStateUsers, action: ActionUserType):DefaultStateType {\r\n    switch (action.type) {\r\n        case \"UserReducer/addUser\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(us => {\r\n                    if (us.id === action.id) {\r\n                        return {...us, followed: true}\r\n                    }\r\n                    return us\r\n                }),\r\n            };\r\n        case \"UserReducer/deleteUser\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(us => {\r\n                    if (us.id === action.id) {\r\n                        return {...us, followed: false}\r\n                    }\r\n                    return us\r\n                })\r\n            };\r\n        case \"userReducer/updateSearchText\":\r\n            return {...state, tempSearch: action.text}\r\n        case \"UserReducer/setUsers\":\r\n            return {...state, users: [...action.users]};\r\n        case \"UserReducer/setPage\":\r\n            return {...state, currentPage: action.page};\r\n        case \"UserReducer/setTotalUsers\":\r\n            return {...state, totalUsers: action.count};\r\n        case \"UserReducer/switchIsFetching\":\r\n            return {...state, isFetching: action.bool};\r\n        case \"UserReducer/switchIsButton\":\r\n            return {...state, pageButton: action.bool};\r\n        case \"UserReducer/switchIsAddButton\":\r\n            return {...state, addButton: action.bool};\r\n        default:\r\n            return state\r\n    }\r\n}","import React from \"react\";\r\nimport {API} from \"../API/API\";\r\nimport {actionsUser} from \"./UserReducer\";\r\nimport emptyPhoto from '../../../img/Avatars/nullPhoto.jpg'\r\nimport {ProfileType, UserType, DialogType} from \"../../Common/types\";\r\nimport {AppStateType, InferActionsTypes} from \"../Redux/Store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {actionsProfile} from \"./ProfileInfoReducer\";\r\nimport {GetDialogsType} from \"../../Common/typesAPI\";\r\n\r\n\r\ntype ActionMessageType = InferActionsTypes<typeof actionsMessages>\r\ntype ThunkMessageType = ThunkAction<Promise<void>, AppStateType, unknown, ActionMessageType>\r\n\r\nexport const actionsMessages = {\r\n    updateMessageCreation: (text: string, id: number) => ({type: 'MessageReducer/updateTextMessage', text, id} as const),\r\n    deleteMessageCreation: (mesId: number, id: number) => ({type: 'MessageReducer/deleteMessage', mesId, id} as const),\r\n    getAllDialogs: (data: Array<GetDialogsType>) => ({type: 'MessageReducer/getAllDialogs', data} as const),\r\n    updateSearchText: (text: string) => ({type: 'MessageReducer/updateSearchText', text} as const),\r\n    getMessagesWithUser: (data: any, user: ProfileType, me: ProfileType) => ({type: 'MessageReducer/getMessagesWithUser', data, user, me} as const)\r\n}\r\n\r\n\r\nexport const putNewDialogThunk = (id: number): ThunkMessageType => {\r\n    return async (dispatch) => {\r\n        await API.putNewDialog(id)\r\n        let response = await API.getDialogs()\r\n        dispatch(actionsMessages.getAllDialogs(response));\r\n    }\r\n};\r\n\r\nexport const postMessageThunk = (id: number, message: string, me: ProfileType): ThunkMessageType => {\r\n    return async (dispatch) => {\r\n        await API.postMessage(id, message)\r\n        await dispatch(getDialogThunk(id, me))\r\n    }\r\n};\r\n\r\nexport const deleteMessageThunk = (mesId: number, id: number): ThunkMessageType => {\r\n    return async (dispatch) => {\r\n        await API.deleteMessage(mesId)\r\n        dispatch(actionsMessages.deleteMessageCreation(mesId, id))\r\n    }\r\n};\r\n\r\nexport const getUserAllMessagesThunk = (id: number, me: ProfileType) => async (dispatch: any) => {\r\n    dispatch(actionsUser.switchIsFetching(true))\r\n    await dispatch(getDialogThunk(id, me));\r\n    dispatch(actionsUser.switchIsFetching(false))\r\n}\r\n\r\nexport const getDialogThunk = (id: number, me: ProfileType): ThunkMessageType => {\r\n    return async (dispatch) => {\r\n        let data = await API.getDialog(id)\r\n        let response = await API.getProfile(id)\r\n        dispatch(actionsMessages.getMessagesWithUser(data.items, response, me))\r\n    }\r\n};\r\n\r\n\r\nlet defaultStateMessage = {\r\n    Dialogs: [] as Array<DialogType>,\r\n    tempSearch: '',\r\n    freshDialogs: 0\r\n};\r\n\r\ntype DefaultStateMessageType = typeof defaultStateMessage\r\n\r\nexport function MessagesInstructions(state = defaultStateMessage, action: ActionMessageType): DefaultStateMessageType {\r\n    let stateCopy = {\r\n        ...state,\r\n        Dialogs: [...state.Dialogs]\r\n    };\r\n\r\n    let getIndex = (id: number) => {\r\n        let index = -Infinity;\r\n        for (let i = 0; i < stateCopy.Dialogs.length; i++) {\r\n            if (stateCopy.Dialogs[i].id === id) {\r\n                index = i\r\n            }\r\n        }\r\n        return index\r\n    };\r\n\r\n    switch (action.type) {\r\n        case \"MessageReducer/updateSearchText\":\r\n            return {...state, tempSearch: action.text}\r\n        case \"MessageReducer/updateTextMessage\":\r\n            stateCopy.Dialogs[action.id].Temp = action.text;\r\n            return stateCopy;\r\n        case \"MessageReducer/getAllDialogs\":\r\n            let countUpdatingDialogs = 0;\r\n            for (let i = 0; i < action.data.length; i++) {\r\n                if (action.data[i].hasNewMessages) countUpdatingDialogs++;\r\n                if (!action.data[i].photos.large) action.data[i].photos.large= action.data[i].photos.small = emptyPhoto\r\n                // @ts-ignore\r\n                action.data[i].Messages = []\r\n            }\r\n            // @ts-ignore\r\n            return {...state, Dialogs: [...action.data], freshDialogs: countUpdatingDialogs}\r\n        case \"MessageReducer/getMessagesWithUser\":\r\n            let user: number = getIndex(action.user.userId)\r\n            stateCopy.Dialogs[user].Messages = action.data\r\n            for (let i = 0; i < action.data.length; i++) {\r\n                stateCopy.Dialogs[user].Messages[i].senderName =\r\n                    action.data[i].senderId === action.me.userId ? action.me.fullName : action.user.fullName;\r\n\r\n                stateCopy.Dialogs[user].Messages[i].Avatar =\r\n                    action.data[i].senderId === action.me.userId ? action.me.photos.large : action.user.photos.large || emptyPhoto;\r\n            }\r\n            return stateCopy;\r\n        case \"MessageReducer/deleteMessage\":\r\n            let dialogIndex: number = getIndex(action.id);\r\n            for (let i = 0; i < stateCopy.Dialogs[dialogIndex].Messages.length; i++) {\r\n                if (stateCopy.Dialogs[dialogIndex].Messages[i].id === action.mesId) {\r\n                    stateCopy.Dialogs[dialogIndex].Messages.splice(i, 1)\r\n                }\r\n            }\r\n            return stateCopy;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport Mordovia from \"../../../img/Avatars/mordovia.jpg\";\r\nimport Ali from \"../../../img/Avatars/ali.png\";\r\nimport Staff from \"../../../img/Avatars/cat.jpeg\";\r\n\r\nlet defaultStateSubscribes =  [\r\n    {\r\n        id: 0,\r\n        Name: 'Mordovia (official)',\r\n        Avatar: Mordovia,\r\n    },\r\n    {\r\n        id: 1,\r\n        Name: 'Aliexpress',\r\n        Avatar: Ali,\r\n    },\r\n    {\r\n        id: 2,\r\n        Name: 'Staffs - low price',\r\n        Avatar: Staff,\r\n    },\r\n\r\n];\r\n\r\nexport function SubscribesInstructions(state = defaultStateSubscribes, action) {\r\n    return state\r\n}","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {PostsInstructions} from \"../Reducers/PostsReducer\";\r\nimport {MessagesInstructions} from \"../Reducers/MessagesReducer\";\r\nimport {ProfileInstructions} from \"../Reducers/ProfileInfoReducer\";\r\nimport {SubscribesInstructions} from \"../Reducers/SubscribesReducer\";\r\nimport {FriendsInstructions} from \"../Reducers/FriendsReducer\";\r\nimport {UsersInstructions} from \"../Reducers/UserReducer\";\r\nimport {LoginInstructions} from \"../Reducers/LoginReducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {reducer as formReducer} from \"redux-form\";\r\n\r\nlet allReduces = combineReducers(\r\n    {\r\n        postsReducer: PostsInstructions,\r\n        messageReducer: MessagesInstructions,\r\n        profileInfoReducer: ProfileInstructions,\r\n        subscribesReducer: SubscribesInstructions,\r\n        friendsReducer: FriendsInstructions,\r\n        usersReducer: UsersInstructions,\r\n        loginReducer: LoginInstructions,\r\n        form: formReducer\r\n    }\r\n);\r\n\r\ntype AllReducersType = typeof allReduces\r\nexport type AppStateType = ReturnType<AllReducersType>\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport const store = createStore(allReduces, applyMiddleware(thunkMiddleware));\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import {connect} from \"react-redux\";\r\nimport {AddButton} from \"./addButton\";\r\nimport {\r\n    addUserThunk,\r\n    deleteUserThunk,\r\n    actionsUser\r\n} from \"../../DataBases/Reducers/UserReducer\";\r\nimport {AppStateType} from \"../../DataBases/Redux/Store\";\r\n\r\n\r\nconst switchIsAddButton = actionsUser.switchIsAddButton\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    // debugger\r\n    return {\r\n        state: state.usersReducer,\r\n        addButton: state.usersReducer.addButton,\r\n        isFetching: state.usersReducer.isFetching,\r\n    }\r\n};\r\n\r\n\r\nconst AddButtonContainer = connect(mapStateToProps,\r\n    {\r\n        addUserThunk,\r\n        deleteUserThunk\r\n    }\r\n)\r\n(AddButton);\r\n\r\nexport default AddButtonContainer\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport Content from \"../../../CssModules/content.module.css\";\r\nimport {API} from \"../../DataBases/API/API\";\r\nimport {addUserThunk, DefaultStateType} from \"../../DataBases/Reducers/UserReducer\";\r\n\r\ntype mapStateToPropsType = {\r\n    state: DefaultStateType\r\n    addButton: boolean\r\n    isFetching: boolean\r\n\r\n}\r\n\r\ntype propsFromAnotherComponentType = {\r\n    id: number\r\n    followed: boolean\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\ntype mapDispatchType = {\r\n    addUserThunk: (id: number, name: string, avatar: string) => void\r\n    deleteUserThunk: (id: number) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchType & propsFromAnotherComponentType\r\n\r\nexport const AddButton:FC<PropsType> = (props) => {\r\n    let [follow, setFollow] = useState(props.followed)\r\n\r\n    useEffect(() => {\r\n        setFollow(props.followed)\r\n    }, [props.followed])\r\n\r\n    let addUser = () => {\r\n        props.addUserThunk(props.id, props.name, props.avatar)\r\n    };\r\n\r\n    let deleteUser = () => {\r\n        props.deleteUserThunk(props.id)\r\n    };\r\n\r\n    let deleteButtonClasses = `\r\n    ${Content.content__asideRightDeleteButton_decor} \r\n    ${Content.content__asideRightButtonPadding} \r\n    ${Content.content__asideRightButton_margin}\r\n    `;\r\n\r\n    let addButtonClasses = `\r\n    ${Content.content__asideRightButton_decor} \r\n    ${Content.content__asideRightButtonPadding}\r\n    ${Content.content__asideRightButton_margin}\r\n    `;\r\n    return (\r\n        <div>\r\n            {\r\n                follow ?\r\n                    <button\r\n                        onClick={deleteUser}\r\n                        disabled={props.addButton || props.isFetching}\r\n                        className={deleteButtonClasses}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                    :\r\n                    <button\r\n                        onClick={addUser}\r\n                        disabled={props.addButton || props.isFetching}\r\n                        className={addButtonClasses}\r\n                    >\r\n                        Add\r\n                    </button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Users} from \"./findFriends\";\r\nimport {\r\n    getProfileThunk,\r\n    setAnotherProfile,\r\n    actionsProfile\r\n} from \"../../../DataBases/Reducers/ProfileInfoReducer\";\r\nimport {AppStateType} from \"../../../DataBases/Redux/Store\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return{\r\n        isFetching: state.usersReducer.isFetching\r\n    }\r\n};\r\n\r\nconst getProfile = actionsProfile.getProfile\r\nconst setProfile = actionsProfile.setProfile\r\n\r\n\r\nconst UsersContainer = connect(mapStateToProps, {getProfile, setProfile, getProfileThunk, setAnotherProfile})(Users);\r\n\r\nexport default UsersContainer\r\n","import React, {FC} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Dialog from \"../../../../CssModules/Dialog/DialogFriend.module.css\";\r\nimport Friend from \"../../../../CssModules/Profile/FriendList/Friends.module.css\";\r\nimport emptyPhoto from \"../../../../img/Avatars/nullPhoto.jpg\";\r\nimport AddButtonContainer from \"../../../Common/AddButton/addButtonContainer\";\r\nimport Preloaders from \"../../../../CssModules/Preloader/Preloaders.module.css\";\r\n\r\ntype mapStateToPropsType = {\r\n    isFetching: boolean\r\n    id: number\r\n    avatar: string\r\n    name: string\r\n    follow: boolean\r\n}\r\n\r\ntype mapDispatchType = {\r\n    setAnotherProfile: (id: number, who: string) => void\r\n    getProfileThunk: (id: number, who: string) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchType\r\n\r\nexport const Users:FC<PropsType> = (props) => {\r\n    let throwProfileInfo = (e: any) => {\r\n        if (props.isFetching) return e.preventDefault()\r\n        props.setAnotherProfile(props.id, 'notMe')\r\n    }\r\n    return (\r\n        <div className={`${props.isFetching ? Preloaders.Preloader__backgroundOpacity : null}`}>\r\n            <NavLink onClick={throwProfileInfo} to={'/profile/' + props.id}\r\n                     className={`${Dialog.display__flex} ${Dialog.hover__decor} ${Dialog.NavLinks__fontsDecor}`}>\r\n                <div>\r\n                    <img className={`${Friend.Friend__Ava} ${Dialog.display__AvaPosition}`}\r\n                         src={props.avatar || emptyPhoto} alt='Ava'/>\r\n                </div>\r\n                <div className={Dialog.border__borderBottom}>\r\n                    <p className={`${Dialog.text__NameFontsDecor}`}>{`${props.name}`}</p>\r\n                </div>\r\n            </NavLink>\r\n            <AddButtonContainer id={props.id} avatar={props.avatar} name={props.name} followed={props.follow}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport Friends from '../../../../CssModules/Friends/Friends.module.css'\r\nimport Dialog from \"../../../../CssModules/Dialog/DialogFriend.module.css\";\r\n\r\ntype mapStateToPropsType = {\r\n    tempSearch: string\r\n}\r\n\r\ntype mapDispatchType = {\r\n    getUsersThunk: (pageSize: number, currentPage: number, user?: string) => void\r\n    updateSearchText: (text: string) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchType\r\n\r\nexport const UserSearch:FC<PropsType> = (props) => {\r\n    let text = React.createRef<HTMLInputElement>()\r\n    let search = (event: any) => {\r\n        if (text.current){\r\n            if (event.which === 13){\r\n                let searchRequest = text.current.value;\r\n                props.getUsersThunk(1, 1, searchRequest);\r\n                event.preventDefault()\r\n            }\r\n        }\r\n    }\r\n\r\n    let updateSearchField = () => {\r\n        if (text.current) {\r\n            let tempText = text.current.value\r\n            props.updateSearchText(tempText)\r\n        }\r\n    }\r\n    return(\r\n        <div className={Friends.container__displayFlex}>\r\n            <input placeholder='Search user...'\r\n                   className={`${Dialog.input__width} ${Dialog.input__decor} ${Dialog.input__padding}`}\r\n                   ref={text}\r\n                   onChange={updateSearchField}\r\n                   onKeyPress={search}\r\n                   value={props.tempSearch}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Pages} from \"./pages\";\r\nimport {\r\n    actionsUser, getUsersThunk\r\n} from \"../../../../DataBases/Reducers/UserReducer\";\r\nimport {AppStateType} from \"../../../../DataBases/Redux/Store\";\r\n\r\nconst setPage = actionsUser.setPage\r\nconst setTotalUsers = actionsUser.setTotalUsers\r\nconst setUsers = actionsUser.setUsers\r\nconst switchIsButton = actionsUser.switchIsButton\r\nconst switchIsFetching = actionsUser.switchIsFetching\r\n\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        currentPage: state.usersReducer.currentPage,\r\n        totalUsers: state.usersReducer.totalUsers,\r\n        pageSize: state.usersReducer.pageSize,\r\n        isFetching: state.usersReducer.isFetching,\r\n        pageButton: state.usersReducer.pageButton,\r\n        portionSize: 15\r\n    }\r\n};\r\n\r\n\r\nexport const PagesContainer = connect(mapStateToProps, {setPage, getUsersThunk})(Pages);\r\n","import React, {FC, useState} from \"react\";\r\nimport PagesButtons from '../../../../../CssModules/UsersSearch/pagesSearch.module.css'\r\n\r\ntype mapStateToPropsType = {\r\n    currentPage: number\r\n    totalUsers: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    pageButton: boolean\r\n    portionSize: number\r\n}\r\n\r\ntype mapDispatchType = {\r\n    getUsersThunk: (pageSize: number, currentPage: number, user?: any) => void\r\n    setPage: (page: number) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchType\r\n\r\nexport const Pages:FC<PropsType> = (props) => {\r\n    let pagesCount = Math.ceil(props.totalUsers / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPageNumber = (portionNumber - 1) * props.portionSize\r\n    let rightPageNumber = portionNumber * props.portionSize;\r\n\r\n    const numberButtonsClasses = `${PagesButtons.button__decor} ${PagesButtons.button__padding} ${PagesButtons.pages_pageButtons__width} ${PagesButtons.pages_pageButtons__margin}`\r\n    const portionButtonsPrevClasses = `${PagesButtons.button__decor} ${PagesButtons.button__padding} ${PagesButtons.pages_portionButtons__width} ${PagesButtons.pages_portionButtonsPrev__margin}`\r\n    const portionButtonsNextClasses = `${PagesButtons.button__decor} ${PagesButtons.button__padding} ${PagesButtons.pages_portionButtons__width} ${PagesButtons.pages_portionButtonsNext__margin}`\r\n\r\n    let totalButtons = pages\r\n        .filter(number => number > leftPageNumber && number <= rightPageNumber)\r\n        .map(number => <button\r\n            disabled={props.pageButton}\r\n            onClick={() => currentPage(number)}\r\n            className={` ${numberButtonsClasses} ${props.currentPage === number && PagesButtons.button_selected__decor}`}>{number}</button>);\r\n\r\n    let currentPage = (page: number) => {\r\n        props.setPage(page);\r\n        props.getUsersThunk(props.pageSize, page)\r\n    };\r\n\r\n    return (\r\n\r\n        <div className={`${PagesButtons.pages_container__flex}`}>\r\n            <div><button className={`${portionButtonsPrevClasses} ${PagesButtons.pages_pageButtons__margin}`} disabled={portionNumber === 1} onClick={() => setPortionNumber(portionNumber - 1)}>Prev</button></div>\r\n            <div className={`${PagesButtons.pages_pageButtons__size}`}>{totalButtons}</div>\r\n            <div className={`${PagesButtons.pages_portionButtons__size}`}>{portionNumber < portionCount && <button className={`${portionButtonsNextClasses}`} onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>}</div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport Spinner from '../../img/Preloaders/Spinner-1.4s-3a356a.svg';\r\nimport Preloaders from '../../CssModules/Preloader/Preloaders.module.css'\r\n\r\n\r\nfunction Preloader(props) {\r\n    return(\r\n        <div>\r\n            <img className={Preloaders.Preloader__position} src={Spinner}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AllUsersClass} from \"./allUsersClass\";\r\nimport {\r\n    actionsUser,\r\n    getUsersThunk,\r\n} from \"../../../DataBases/Reducers/UserReducer\";\r\nimport {AppStateType} from \"../../../DataBases/Redux/Store\";\r\n\r\n\r\n// const setTotalUsers = actionsUser.setTotalUsers\r\n// const setUsers = actionsUser.setUsers\r\n// const switchIsButton = actionsUser.switchIsButton\r\n// const switchIsFetching = actionsUser.switchIsFetching\r\nconst updateSearchText = actionsUser.updateSearchText\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        stateUsers: state.usersReducer,\r\n        tempSearch: state.usersReducer.tempSearch\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const AllUsersClassContainer = connect(mapStateToProps,\r\n    {getUsersThunk, updateSearchText})\r\n(AllUsersClass);\r\n\r\n","import React, {FC, useEffect} from \"react\";\r\nimport Content from \"../../../../CssModules/content.module.css\";\r\nimport UsersContainer from \"../UserDecor/FindFriendsContainer\";\r\nimport {UserSearch} from \"./usersSearch\";\r\nimport {PagesContainer} from \"./PagesButtons/pagesContainer\";\r\nimport Preloader from \"../../../Common/Preloader\";\r\nimport Preloaders from '../../../../CssModules/Preloader/Preloaders.module.css'\r\nimport {DefaultStateType} from \"../../../DataBases/Reducers/UserReducer\";\r\n\r\ntype mapStateToPropsType = {\r\n    stateUsers: DefaultStateType\r\n    tempSearch: string\r\n}\r\n\r\ntype mapDispatchType = {\r\n    getUsersThunk: (pageSize: number, currentPage: number, user?: string) => void\r\n    updateSearchText: (text: string) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchType\r\n\r\nexport const AllUsersClass:FC<PropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.getUsersThunk(props.stateUsers.pageSize, props.stateUsers.currentPage)\r\n    }, [props.stateUsers.users.length === 0])\r\n\r\n        return (\r\n            <div className={`${Content.content__menu_decorationBlocks} `}>\r\n                <UserSearch getUsersThunk={props.getUsersThunk} updateSearchText={props.updateSearchText} tempSearch={props.tempSearch}/>\r\n                <PagesContainer/>\r\n                {props.stateUsers.isFetching ? <Preloader className={Preloaders.Preloader__Opacity}/> : null}\r\n                {props.stateUsers.users.map(us => <UsersContainer\r\n                    key={us.id}\r\n                    id={us.id}\r\n                    avatar={us.photos.small}\r\n                    name={us.name}\r\n                    follow={us.followed}\r\n                />)}\r\n            </div>\r\n        )\r\n}\r\n","import React, {useCallback, useState} from 'react'\r\nimport ReactCrop from \"react-image-crop\";\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport {Modal} from \"../../../index\";\r\nimport Portal from \"../../../CssModules/portal.module.css\"\r\nimport AvaEdit from \"../../../CssModules/AvatarEditor/avatarEditor.module.css\"\r\n\r\n\r\nexport default function MyEditor(props) {\r\n    const [upImg, setUpImg] = useState();\r\n    const [imgRef, setImgRef] = useState(null);\r\n    const [crop, setCrop] = useState({unit: 'px', width: 300, height: 300});\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const [previewLoad, setPreviewLoad] = useState(null)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [disabled, setDisabled] = useState(false)\r\n    const onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () => setUpImg(reader.result));\r\n            reader.readAsDataURL(e.target.files[0]);\r\n            setPreviewLoad(e.target.files[0])\r\n            setEditMode(true)\r\n        }\r\n    };\r\n\r\n    const onLoad = useCallback(img => {\r\n        setImgRef(img);\r\n        setCrop({unit: 'px', width: 300, height: 300})\r\n    }, []);\r\n\r\n    const makeClientCrop = async crop => {\r\n        if (imgRef && crop.width && crop.height) {\r\n            await createCropPreview(imgRef, crop, 'newFile.jpeg');\r\n        }\r\n    };\r\n\r\n    const createCropPreview = async (image, crop, fileName) => {\r\n        const canvas = document.createElement('canvas');\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        );\r\n\r\n        return new Promise((resolve, reject) => {\r\n            canvas.toBlob(blob => {\r\n                if (!blob) {\r\n                    reject(new Error('Canvas is empty'));\r\n                    return;\r\n                }\r\n                blob.name = fileName;\r\n                let file = new File([blob], 'image.jpeg', [blob.type])\r\n                setPreviewLoad(file)\r\n                window.URL.revokeObjectURL(previewUrl);\r\n                setPreviewUrl(window.URL.createObjectURL(blob));\r\n            }, 'image/jpeg');\r\n\r\n        });\r\n    };\r\n    let uploadFile = async () => {\r\n        setDisabled(true)\r\n        let formData = new FormData();\r\n        formData.append('image', previewLoad);\r\n        await props.updatePhoto(formData, props.id)\r\n        clearImgData()\r\n    }\r\n    const clearImgData = () => {\r\n        setUpImg(null)\r\n        setPreviewLoad(null)\r\n        setPreviewUrl(null)\r\n        setEditMode(false)\r\n        setCrop({unit: 'px', width: 300, height: 300})\r\n        setDisabled(false)\r\n        document.getElementById('photo').value = ''\r\n    }\r\n    const buttonClasses = `${AvaEdit.avaEdit__button} ${AvaEdit.avaEdit_button__padding} ${AvaEdit.avaEdit_button__margin}`\r\n    return (\r\n        <div>\r\n            <div className={AvaEdit.fileUpload}>\r\n                <label>\r\n                    <input id={'photo'} type=\"file\" accept=\"image/*\" onChange={onSelectFile}/>\r\n                    <span>Change photo</span>\r\n                </label>\r\n            </div>\r\n            {editMode && <Modal>\r\n                <div className={Portal.modal}>\r\n                    <div className={Portal.cropImage__width}>\r\n                        <ReactCrop\r\n                            src={upImg}\r\n                            onImageLoaded={onLoad}\r\n                            crop={crop}\r\n                            onChange={c => setCrop(c)}\r\n                            onComplete={makeClientCrop}\r\n                            maxHeight={300}\r\n                            maxWidth={300}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <button\r\n                            disabled={disabled}\r\n                            className={`${buttonClasses} ${disabled && AvaEdit.avaEdit__buttonDisabled}`}\r\n                            onClick={uploadFile}\r\n                        >Load\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <button className={`${buttonClasses}`} onClick={() => clearImgData()}>Cancel</button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n// import React, {FC, useCallback, useState} from 'react'\r\n// import ReactCrop from \"react-image-crop\";\r\n// import 'react-image-crop/dist/ReactCrop.css';\r\n// import {Modal} from \"../../../index\";\r\n// import Portal from \"../../../CssModules/portal.module.css\"\r\n// import AvaEdit from \"../../../CssModules/AvatarEditor/avatarEditor.module.css\"\r\n//\r\n// type mapStateType = {\r\n//     id: number\r\n//     updatePhoto: (formData: File, id: number) => void\r\n// }\r\n//\r\n// type CropType = {\r\n//     aspect?: number;\r\n//     x?: number;\r\n//     y?: number;\r\n//     width?: number;\r\n//     height?: number;\r\n//     unit?: 'px' | '%';\r\n// }\r\n//\r\n// export const MyEditor:FC<mapStateType> = (props) => {\r\n//     const [upImg, setUpImg] = useState<string | ArrayBuffer | null>();\r\n//     const [imgRef, setImgRef] = useState(null);\r\n//     const [crop, setCrop] = useState({unit: 'px', width: 300, height: 300});\r\n//     const [previewUrl, setPreviewUrl] = useState<string | null>();\r\n//     const [previewLoad, setPreviewLoad] = useState<string | Blob>('')\r\n//     const [editMode, setEditMode] = useState(false)\r\n//     const [disabled, setDisabled] = useState(false)\r\n//     const onSelectFile = (e: any) => {\r\n//         if (e.target.files && e.target.files.length > 0) {\r\n//             const reader = new FileReader();\r\n//             reader.addEventListener('load', () => setUpImg(reader.result));\r\n//             reader.readAsDataURL(e.target.files[0]);\r\n//             setPreviewLoad(e.target.files[0])\r\n//             setEditMode(true)\r\n//         }\r\n//     };\r\n//\r\n//     const onLoad = useCallback(img => {\r\n//         setImgRef(img);\r\n//         setCrop({unit: 'px', width: 300, height: 300})\r\n//     }, []);\r\n//\r\n//     const makeClientCrop = async (crop: CropType) => {\r\n//         if (imgRef && crop.width && crop.height) {\r\n//             await createCropPreview(imgRef, crop, 'newFile.jpeg');\r\n//         }\r\n//     };\r\n//\r\n//     const createCropPreview = async (image: any, crop: CropType, fileName: string) => {\r\n//         const canvas = document.createElement('canvas');\r\n//         const scaleX = image.naturalWidth / image.width;\r\n//         const scaleY = image.naturalHeight / image.height;\r\n//         const ctx = canvas.getContext('2d');\r\n//         if (ctx && crop.width && crop.height && crop.x && crop.y) {\r\n//             canvas.width = crop.width;\r\n//             canvas.height = crop.height;\r\n//             ctx.drawImage(\r\n//                 image,\r\n//                 crop.x * scaleX,\r\n//                 crop.y * scaleY,\r\n//                 crop.width * scaleX,\r\n//                 crop.height * scaleY,\r\n//                 0,\r\n//                 0,\r\n//                 crop.width,\r\n//                 crop.height\r\n//             );\r\n//         }\r\n//         return new Promise((resolve, reject) => {\r\n//             canvas.toBlob(blob => {\r\n//                 if (!blob) {\r\n//                     reject(new Error('Canvas is empty'));\r\n//                     return;\r\n//                 }\r\n//                 blob.name = fileName;\r\n//                 // @ts-ignore\r\n//                 let file = new File([blob], 'image.jpeg', [blob.type])\r\n//                 setPreviewLoad(file)\r\n//                 if (previewUrl != null) {\r\n//                     window.URL.revokeObjectURL(previewUrl);\r\n//                 }\r\n//                 setPreviewUrl(window.URL.createObjectURL(blob));\r\n//             }, 'image/jpeg');\r\n//\r\n//         });\r\n//     };\r\n//     let uploadFile = async () => {\r\n//         setDisabled(true)\r\n//         let formData = new FormData();\r\n//         formData.append('image', previewLoad);\r\n//         // @ts-ignore\r\n//         props.updatePhoto(formData, props.id)\r\n//         clearImgData()\r\n//     }\r\n//     const clearImgData = () => {\r\n//         setUpImg(null)\r\n//         setPreviewLoad('')\r\n//         setPreviewUrl(null)\r\n//         setEditMode(false)\r\n//         setCrop({unit: 'px', width: 300, height: 300})\r\n//         setDisabled(false)\r\n//         // @ts-ignore\r\n//         document.getElementById('photo').value = ''\r\n//     }\r\n//     const buttonClasses = `${AvaEdit.avaEdit__button} ${AvaEdit.avaEdit_button__padding} ${AvaEdit.avaEdit_button__margin}`\r\n//     return (\r\n//         <div>\r\n//             <div className={AvaEdit.fileUpload}>\r\n//                 <label>\r\n//                     <input id={'photo'} type=\"file\" accept=\"image/*\" onChange={onSelectFile}/>\r\n//                     <span>Change photo</span>\r\n//                 </label>\r\n//             </div>\r\n//             {editMode && <Modal>\r\n//                 <div className={Portal.modal}>\r\n//                     <div className={Portal.cropImage__width}>\r\n//                         // @ts-ignore\r\n//                         <ReactCrop\r\n//                             src={upImg}\r\n//                             onImageLoaded={onLoad}\r\n//                             crop={crop}\r\n//                             // @ts-ignore\r\n//                             onChange={c => setCrop(c)}\r\n//                             onComplete={makeClientCrop}\r\n//                             maxHeight={300}\r\n//                             maxWidth={300}\r\n//                         />\r\n//                     </div>\r\n//                     <div>\r\n//                         <button\r\n//                             disabled={disabled}\r\n//                             className={`${buttonClasses} ${disabled && AvaEdit.avaEdit__buttonDisabled}`}\r\n//                             onClick={uploadFile}\r\n//                         >Load\r\n//                         </button>\r\n//                     </div>\r\n//                     <div>\r\n//                         <button className={`${buttonClasses}`} onClick={() => clearImgData()}>Cancel</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </Modal>\r\n//             }\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport Content from \"../../../CssModules/content.module.css\";\r\nimport emptyPhoto from '../../../img/Avatars/nullPhoto.jpg'\r\nimport AddButtonContainer from \"../../Common/AddButton/addButtonContainer\";\r\nimport MyEditor from \"./AvatarEditor\";\r\nimport buttonsS from \"../../../CssModules/buttonsUnderAva.module.css\"\r\n\r\ntype mapStateType = {\r\n    avatar: string\r\n    id: number\r\n    name: string\r\n    myProfile: boolean\r\n    followed: boolean\r\n}\r\n\r\ntype mapDispatchType = {\r\n    updatePhoto: (formData: File, id: number) => void\r\n    putNewDialogThunk: (id: number) => void\r\n}\r\n\r\ntype PropsType = mapStateType & mapDispatchType\r\n\r\nexport const AvatarPhoto:FC<PropsType> = (props) => {\r\n    const [avatar, setAvatar] = useState(props.avatar)\r\n    useEffect(() => {\r\n        setAvatar(props.avatar)\r\n    }, [props.avatar])\r\n    const startDialog = () => {\r\n        props.putNewDialogThunk(props.id)\r\n    }\r\n\r\n    const startDialogButtonClasses = `\r\n    ${Content.content__asideRightButton_decor} \r\n    ${Content.content__asideRightButtonPadding}\r\n    ${buttonsS.main_buttons__width}\r\n    `;\r\n    return (\r\n        <div className={`${Content.content__menu_decorationBlocks}`}>\r\n            <div className={`${Content.content__mainContentAvatar}`}>\r\n                <img className={`${Content.content__mainContentAvatar}`} src={avatar || emptyPhoto}/>\r\n            </div>\r\n            {\r\n                props.myProfile\r\n                    ?\r\n                    <div>\r\n                        <MyEditor updatePhoto={props.updatePhoto} id={props.id}/>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <div>\r\n                            <button className={`${startDialogButtonClasses}`} onClick={startDialog}>Start dialog\r\n                            </button>\r\n                        </div>\r\n                        <div>\r\n                            <AddButtonContainer id={props.id}\r\n                                                name={props.name}\r\n                                                followed={props.followed}\r\n                                                avatar={props.avatar}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../DataBases/Redux/Store\";\r\n\r\nlet mapStateToRedirect = (state: AppStateType) => {\r\n    return {\r\n        isLogged: state.loginReducer.isLogged,\r\n        initialized: state.loginReducer.loadProfileData\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isLogged: boolean\r\n    initialized: boolean\r\n}\r\n\r\nexport const authRedirect = (Component: React.ComponentType<any>) => {\r\n\r\n    class RedirectComponent extends React.Component<mapStateToPropsType> {\r\n\r\n        render() {\r\n            if (!this.props.isLogged && this.props.initialized) return <Redirect to='/login'/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let connectedRedirect: any = connect(mapStateToRedirect)(RedirectComponent)\r\n\r\n    return connectedRedirect\r\n};\r\n\r\n","import React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {putStatusThunk} from \"../../../DataBases/Reducers/ProfileInfoReducer\";\r\nimport {authRedirect} from \"../../../Common/redirectToLogin\";\r\nimport {StatusClass} from \"./statusClass\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {AppStateType} from \"../../../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        currentProfile: state.profileInfoReducer.myProfile ?\r\n            state.profileInfoReducer.logged : state.profileInfoReducer.currentProfile,\r\n        myProfile: state.profileInfoReducer.myProfile\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const StatusClassContainer: any = compose(\r\n    connect(mapStateToProps, {putStatusThunk}),\r\n    authRedirect\r\n)(StatusClass)\r\n\r\nexport const ReduxStatusForm = reduxForm({ form: 'status', enableReinitialize : true})(StatusClassContainer);\r\n","import React, {FC, FormEvent, useEffect, useState} from \"react\";\r\nimport {Field} from \"redux-form\";\r\nimport StatusS from \"../../../../CssModules/Profile/Status/statusStyles.module.css\"\r\nimport {ProfileType} from \"../../../Common/types\";\r\n\r\ntype MapStatePropsType = {\r\n    currentProfile: ProfileType\r\n    myProfile: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    putStatusThunk: (status: string) => void\r\n    handleSubmit: (submit: (formInfo: any) => Promise<void>) => ((event: FormEvent<HTMLFormElement>) => void) | undefined\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport const StatusClass:FC<PropsType> = (props) => {\r\n    const [mode, switchMode] = useState(false)\r\n    const [status, switchStatus] = useState(props.currentProfile.status)\r\n    const [disabled, setDisabled] = useState(false)\r\n    const buttonClasses = `${StatusS.status_button__decor} ${StatusS.status__buttonWidth} ${StatusS.status_button__padding} ${StatusS.status_button__margins}`\r\n    const containerButtonClass = `${StatusS.status_buttons__flex}`\r\n    const inputClasses = `${StatusS.status_input__decor} ${StatusS.status_input__padding}`\r\n\r\n    useEffect(() => {\r\n        switchStatus(props.currentProfile.status)\r\n    }, [props.currentProfile.status])\r\n\r\n    let onSubmit = async (status: any) => {\r\n        setDisabled(true)\r\n        await props.putStatusThunk(status.status)\r\n        setDisabled(false)\r\n        switchMode(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                mode ?\r\n                <form onSubmit={props.handleSubmit(onSubmit)}>\r\n                    <div className={inputClasses}>\r\n                        <Field autoFocus\r\n                               name={'status'}\r\n                               component={'input'}\r\n                               type={'text'}\r\n                        />\r\n                    </div>\r\n                    <div className={containerButtonClass}>\r\n                        <div>\r\n                            <button disabled={disabled}\r\n                                    className={`${disabled && StatusS.status__buttonDisabled} ${buttonClasses}`}\r\n                            >Save</button>\r\n                        </div>\r\n                        <div>\r\n                            <button className={buttonClasses} onClick={() => switchMode(false)}>Cancel</button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                :\r\n                <h3 onClick={() => {if (props.myProfile) switchMode(true)}}>{status ? status : 'Change status'}</h3>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {FC, useState} from \"react\";\r\nimport Content from \"../../../CssModules/content.module.css\";\r\nimport {ReduxStatusForm, StatusClassContainer} from \"./Status/statusClassContainer\";\r\nimport InfoS from \"../../../CssModules/Profile/MainInfo/mainInfo.module.css\"\r\nimport {ContactsType} from \"../../Common/types\";\r\n\r\ntype MapStatePropsType = {\r\n    name: string,\r\n    status: string,\r\n    aboutMe: string,\r\n    skills: string,\r\n    search: boolean,\r\n    contacts: ContactsType,\r\n}\r\n\r\nexport const MainInfo:FC<MapStatePropsType> = (props) => {\r\n    const [more, setMore] = useState(false)\r\n    const keys = props.contacts && Object.keys(props.contacts)\r\n    const values = props.contacts && Object.values(props.contacts)\r\n    let index = 0\r\n    const containerClasses = `${InfoS.mainInfo_contacts__flexDisplay}`\r\n    const valueClasses = `${InfoS.mainInfo_value__margin} ${InfoS.mainInfo_value__width} ${InfoS.mainInfo_value__decor}`\r\n    const keyClasses = `${InfoS.mainInfo_key__width} ${InfoS.mainInfo_key__decor}`\r\n    const showMoreClasses = `${InfoS.mainInfo_showMore__decor}`\r\n    return (\r\n        <div>\r\n            <div className={`${Content.content__mainContentName} ${Content.content__menu_decorationBlocks}`}>\r\n                <h1>{`${props.name}`}</h1>\r\n                <ReduxStatusForm initialValues={{status: props.status}}/>\r\n            </div>\r\n            <div className={`${Content.content__menu_decorationBlocks}`}>\r\n                <div className={containerClasses}>\r\n                    <div className={keyClasses}><span>About me:</span></div>\r\n                    <div className={valueClasses}><span>{props.aboutMe}</span></div>\r\n                </div>\r\n                <div className={containerClasses}>\r\n                    <div className={keyClasses}><span>My skills:</span></div>\r\n                    <div className={valueClasses}><span>{props.skills}</span></div>\r\n                </div>\r\n                <div className={containerClasses}>\r\n                    <div className={keyClasses}><span>In searching:</span></div>\r\n                    <div className={valueClasses}><span>{props.search ? 'Yes' : 'No'}</span></div>\r\n                </div>\r\n                {keys && <div onClick={() => setMore(!more)} className={showMoreClasses}><span>{more ? 'Hide' : 'Show'} more information</span>\r\n                </div>}\r\n                {more && keys.map(key => {\r\n                    return (\r\n                        <div className={containerClasses}>\r\n                            <div className={keyClasses}><span>{key[0].toUpperCase() + key.slice(1) + ':'}</span></div>\r\n                            <div className={valueClasses}><span>{values[index++]}</span></div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {postCreation, updatePostTextCreation} from \"../../DataBases/Reducers/PostsReducer\";\r\nimport {PostRedactor} from \"./postRedactor\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return{\r\n        Temp: state.postsReducer.Temp[0].PostRedactor,\r\n        currentProfile: state.profileInfoReducer.myProfile\r\n    }\r\n};\r\n\r\nconst PostRedactorContainer = connect(mapStateToProps, {updatePostTextCreation, postCreation})(PostRedactor);\r\n\r\nexport default PostRedactorContainer\r\n","import React, {FC} from \"react\";\r\nimport Content from \"../../../CssModules/content.module.css\";\r\nimport {ProfileType} from \"../../Common/types\";\r\n\r\ntype mapStateType = {\r\n    Temp: string\r\n    currentProfile: boolean\r\n}\r\n\r\ntype mapDispatchType = {\r\n    updatePostTextCreation: (text: string) => void\r\n    postCreation: (currentProfile: boolean) => void\r\n}\r\n\r\ntype PropsType = mapStateType & mapDispatchType\r\n\r\nexport const PostRedactor:FC<PropsType> = (props) => {\r\n    let ref = React.createRef<HTMLTextAreaElement>();\r\n    let setPostClick = () => {\r\n        if (ref.current) {\r\n            props.postCreation(props.currentProfile)\r\n        }\r\n    };\r\n\r\n    let setPostKeyPress = (event: React.KeyboardEvent) => {\r\n        if (ref.current){\r\n            if (event.which === 13){\r\n                props.postCreation(props.currentProfile);\r\n                event.preventDefault()\r\n            }\r\n        }\r\n    };\r\n\r\n    let currentText = () => {\r\n        if (ref.current) {\r\n            let text = ref.current.value;\r\n            props.updatePostTextCreation(text)\r\n        }\r\n    };\r\n\r\n    return(\r\n        <div className={`${Content.content__menu_decorationBlocks}`}>\r\n            <div>\r\n                <textarea\r\n                    onChange={currentText}\r\n                    onKeyPress={setPostKeyPress}\r\n                    value={props.Temp}\r\n                    ref={ref}\r\n                    placeholder='Write anything...'\r\n                    className={`${Content.content__asideRightInput_decor}`}\r\n                />\r\n                <button\r\n                    onClick={setPostClick}\r\n                    className={`\r\n                    ${Content.content__asideRightButton_decor} \r\n                    ${Content.content__asideRightButtonPadding}\r\n                    `}\r\n                >Push me</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport Posts from \"../../../CssModules/Profile/MyPosts/posts.module.css\";\r\nimport Content from \"../../../CssModules/content.module.css\";\r\nimport {ProfileType} from \"../../Common/types\";\r\n\r\ntype MapStatePropsType = {\r\n    id: number\r\n    current: boolean\r\n    name: string\r\n    pict: string\r\n    text: string\r\n    likes: number\r\n    deletePost: (id: number, current: boolean) => void\r\n}\r\n\r\nexport const NewPost:FC<MapStatePropsType> = (props) => {\r\n    let setDeletePost = () => {\r\n        props.deletePost(props.id, props.current)\r\n    };\r\n    return(\r\n        <div className={`${Content.content__menu_decorationBlocks}`}>\r\n            <div className={`${Posts.display}`}>\r\n                <img className={Posts.image} src={props.pict}/>\r\n                <p className={`${Posts.name__marginLeft} ${Posts.name__Fonts}`}>{props.name}</p>\r\n                <button title='Delete post' onClick={setDeletePost} className={`${Posts.deleteButton__marginLeft} ${Posts.deleteButton__decor}`}>\r\n                    <span>&#10005;</span>\r\n                </button>\r\n            </div>\r\n            <div className={`${Posts.post__margins}`}>\r\n                <p className={`${Posts.mainDecor} ${Posts.borderBottom}`}>{props.text}</p>\r\n                <p className={Posts.likeMainDecor}>Like: <span>{props.likes}</span></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {PostsClass} from \"./postsClass\";\r\nimport {deletePostCreation} from \"../../DataBases/Reducers/PostsReducer\";\r\nimport {AppStateType} from \"../../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profileInfoReducer.myProfile ? state.postsReducer.Posts : state.postsReducer.currentProfilePosts,\r\n        current: state.profileInfoReducer.myProfile\r\n    };\r\n\r\n};\r\n\r\nexport const PostsClassContainer = connect(mapStateToProps, {deletePostCreation})(PostsClass);\r\n","import React, {FC} from \"react\";\r\nimport {NewPost} from \"./post\";\r\nimport {PostType, ProfileType} from \"../../Common/types\";\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>\r\n    current: boolean\r\n    deletePostCreation: (id: any, currentProfile: any) => void\r\n}\r\n\r\nexport const PostsClass:FC<MapStatePropsType> = (props) => {\r\n    let sortedPosts = props.posts\r\n        .map(elem => <NewPost\r\n            key={elem.id}\r\n            id={elem.id}\r\n            name={elem.name}\r\n            text={elem.text}\r\n            pict={elem.ava}\r\n            likes={elem.likes}\r\n            deletePost={props.deletePostCreation}\r\n            current={props.current}\r\n        />)\r\n        .reverse();\r\n    return (\r\n        <div>\r\n            {sortedPosts}\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport Friends from '../../../../CssModules/Profile/FriendList/Friends.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    myId: number\r\n    id: number\r\n    name: string\r\n    img: string\r\n    setAnotherProfile: (id: number, who: string) => void\r\n}\r\n\r\nexport const MyFriend:FC<MapStatePropsType> = (props) => {\r\n    let setProfile = () => {\r\n        let meOrNot = props.id === props.myId ? 'me' : 'notMe'\r\n        props.setAnotherProfile(props.id, meOrNot)\r\n    }\r\n    return (\r\n        <div>\r\n            <NavLink onClick={setProfile} to={`/profile/${props.id}`}>\r\n                <div>\r\n                    <img className={`${Friends.margin} ${Friends.Friend__Ava}`} src={props.img}/>\r\n                </div>\r\n            </NavLink>\r\n            <p className={Friends.Friend__Font}>{props.name}</p>\r\n        </div>\r\n    )\r\n}","import {connect} from \"react-redux\";\r\nimport {setAnotherProfile} from \"../../DataBases/Reducers/ProfileInfoReducer\";\r\nimport {FriendList} from \"./Friend\";\r\nimport {AppStateType} from \"../../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friends: state.friendsReducer.friends,\r\n        myId: state.profileInfoReducer.logged.userId\r\n    }\r\n}\r\n\r\n\r\nexport const FriendListContainer = connect(mapStateToProps, {setAnotherProfile})(FriendList)\r\n","import React, {FC} from \"react\";\r\nimport Content from \"../../../CssModules/content.module.css\";\r\nimport Friends from '../../../CssModules/Profile/FriendList/Friends.module.css';\r\nimport {MyFriend} from \"./MyFriend/FriendLittleAva\";\r\nimport {FriendType} from \"../../Common/types\";\r\nimport {setAnotherProfile} from \"../../DataBases/Reducers/ProfileInfoReducer\";\r\n\r\ntype MapStatePropsType = {\r\n    friends: Array<FriendType>\r\n    myId: number\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setAnotherProfile: (id: number, who: string) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nexport const FriendList:FC<PropsType> = (props) => {\r\n    let allFriends = () => {\r\n        let all = [];\r\n        let array = props.friends;\r\n        let shuffledArray = array.sort(() => Math.random() - 0.5);\r\n        for (let i = 0; i < Math.min(array.length, 6); i++){\r\n            all.push(array[i])\r\n        }\r\n        return all.map(friend => <MyFriend myId={props.myId} setAnotherProfile={props.setAnotherProfile} id={friend.id} key={friend.id} name={friend.name} img={friend.avatar}/>)\r\n    };\r\n    return(\r\n        <div className={`${Content.content__menu_decorationBlocks}`}>\r\n            <p className={Friends.font__size}>My friends: <span>{props.friends.length}</span></p>\r\n            <div className={Friends.display__grid}>\r\n                {allFriends()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {actionsProfile, postProfilePhotoThunk,} from \"../../DataBases/Reducers/ProfileInfoReducer\";\r\nimport {ProfileCenterInfoClass} from \"./ProfileCenterInfoClass\";\r\nimport {authRedirect} from \"../../Common/redirectToLogin\";\r\nimport {compose} from \"redux\";\r\nimport {putNewDialogThunk} from \"../../DataBases/Reducers/MessagesReducer\";\r\nimport {AppStateType} from \"../../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        currentProfile: state.profileInfoReducer.myProfile ?\r\n            state.profileInfoReducer.logged : state.profileInfoReducer.currentProfile,\r\n        myProfilePosts: state.postsReducer.Posts,\r\n        isFetching: state.usersReducer.isFetching,\r\n        myProfile: state.profileInfoReducer.myProfile,\r\n        followed: state.profileInfoReducer.followed,\r\n        subscribe: state.subscribesReducer\r\n    }\r\n};\r\n\r\nconst getProfile = actionsProfile.getProfile\r\n\r\nexport const ProfileCenterInfoClassContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {getProfile, postProfilePhotoThunk, putNewDialogThunk}),\r\n    authRedirect\r\n)(ProfileCenterInfoClass)\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport Displays from \"../../../CssModules/DisplayView.module.css\";\r\nimport {AvatarPhoto} from \"../Avatar/Avatar\";\r\nimport {MainInfo} from \"../MainInfo/nameAndAbout\";\r\nimport PostRedactorContainer from \"../PostRedactor/PostRedactorContainer\";\r\nimport {PostsClassContainer} from \"../MyPosts/postsClassContainer\";\r\nimport Preloader from \"../../Common/Preloader\";\r\nimport {FriendListContainer} from \"../FriendList/friendContainer\";\r\nimport {PostType, ProfileType} from \"../../Common/types\";\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n    currentProfile: ProfileType\r\n    myProfilePosts: PostType\r\n    isFetching: boolean\r\n    myProfile: boolean\r\n    followed: boolean\r\n    subscribe: any\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfile: (user: ProfileType, who: string) => void\r\n    postProfilePhotoThunk: (formData: File, id: number) => void\r\n    putNewDialogThunk: (id: number) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nexport const ProfileCenterInfoClass:FC<PropsType> = (props) => {\r\n    let [follow, setFollow] = useState(props.followed)\r\n    let [fetch, setFetch] = useState(props.isFetching)\r\n\r\n    useEffect(() => {\r\n        setFollow(props.followed)\r\n    }, [props.followed])\r\n\r\n    useEffect(() => {\r\n        setFetch(props.isFetching)\r\n    }, [props.isFetching])\r\n\r\n    if (fetch) return <Preloader/>\r\n    return (\r\n        <div>\r\n            <div className={Displays.inside_ContentProfile__displayFlex}>\r\n                <div className={Displays.inside_ProfileCenter__FlexProportion}>\r\n                    <AvatarPhoto\r\n                        avatar={props.currentProfile.photos.large}\r\n                        updatePhoto={props.postProfilePhotoThunk}\r\n                        id={props.currentProfile.userId}\r\n                        name={props.currentProfile.fullName}\r\n                        myProfile={props.myProfile}\r\n                        putNewDialogThunk={props.putNewDialogThunk}\r\n                        followed={follow}\r\n                    />\r\n                    {props.myProfile && <FriendListContainer/>}\r\n                    {/*{props.myProfile && <Subscribes subscribe={props.subscribe}/>}*/}\r\n                </div>\r\n                <div className={Displays.inside_ProfileRight__FlexProportion}>\r\n                    <MainInfo\r\n                        name={props.currentProfile.fullName || 'No name'}\r\n                        status={props.currentProfile.status}\r\n                        aboutMe={props.currentProfile.aboutMe}\r\n                        skills={props.currentProfile.lookingForAJobDescription}\r\n                        search={props.currentProfile.lookingForAJob}\r\n                        contacts={props.currentProfile.contacts}\r\n                    />\r\n                    {props.myProfile && <PostRedactorContainer/>}\r\n                    {props.myProfile && <PostsClassContainer/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","const validate = values => {\r\n    const errors = {}\r\n    if (!values.email) {\r\n        errors.email = 'Required'\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Required'\r\n    }\r\n    return errors\r\n}\r\n\r\nexport default validate\r\n\r\n\r\n\r\n\r\n\r\n","const sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nconst asyncValidate = (values /*, dispatch */) => {\r\n    return sleep(1000).then(() => {\r\n        // simulate server latency\r\n        if (['john', 'paul', 'george', 'ringo'].includes(values.username)) {\r\n            throw { username: 'That username is taken' }\r\n        }\r\n    })\r\n}\r\n\r\nexport default asyncValidate\r\n","import React from \"react\";\r\nimport {Field} from \"redux-form\";\r\nimport {validatorType} from \"./validator\";\r\n\r\n\r\n\r\nexport function CreateFieldForm<N extends string>(\r\n    name: N,\r\n    type: 'text' | 'checkbox' | 'password',\r\n    component: any,\r\n    label: string | null,\r\n    props: any = {},\r\n    validators: Array<validatorType> = []\r\n) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Field\r\n                    name={name}\r\n                    type={type}\r\n                    component={component}\r\n                    label={label}\r\n                    validate={validators}\r\n                    {...props}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {CreateFieldForm, GetStringKeys} from \"../../../Common/createFieldForm\";\r\nimport {renderField} from \"../../../Validations/LoginValidate/loginAsyncForm\";\r\nimport settingsS from \"../../../../CssModules/Settings/settingsStyles.module.css\";\r\n\r\n\r\nfunction EmailField(props: any) {\r\n    const containerClasses = `${settingsS.settings_container__flex} ${settingsS.settings_container__margin}`\r\n    const paramClasses = `${settingsS.settings_param__decor}`\r\n    const inputClasses = `${settingsS.settings_input__decor} ${settingsS.settings_input__padding} ${settingsS.settings_input__margins}`\r\n    return (\r\n        <div className={containerClasses}>\r\n            <div className={paramClasses}>\r\n                <span>Email:</span>\r\n            </div>\r\n            <div className={inputClasses}>\r\n                {CreateFieldForm<'email'>('email', 'text', renderField('input'), 'Email')}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmailField","import React from \"react\";\r\nimport {CreateFieldForm} from \"../../../Common/createFieldForm\";\r\nimport {renderField} from \"../../../Validations/LoginValidate/loginAsyncForm\";\r\nimport settingsS from \"../../../../CssModules/Settings/settingsStyles.module.css\";\r\n\r\n\r\nfunction PasswordField(props: any) {\r\n    const containerClasses = `${settingsS.settings_container__flex} ${settingsS.settings_container__margin}`\r\n    const paramClasses = `${settingsS.settings_param__decor}`\r\n    const inputClasses = `${settingsS.settings_input__decor} ${settingsS.settings_input__padding} ${settingsS.settings_input__margins}`\r\n    return (\r\n        <div className={containerClasses}>\r\n            <div className={paramClasses}>\r\n                <span>Password:</span>\r\n            </div>\r\n            <div className={inputClasses}>\r\n                {CreateFieldForm<'password'>('password', 'password', renderField('input'), 'Password')}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PasswordField","import React from \"react\";\r\nimport {CreateFieldForm} from \"../../../Common/createFieldForm\";\r\nimport {renderField} from \"../../../Validations/LoginValidate/loginAsyncForm\";\r\nimport settingsS from \"../../../../CssModules/Settings/settingsStyles.module.css\";\r\n\r\n\r\nfunction RememberMe(props: any) {\r\n    const containerClasses = `${settingsS.settings_container__flex} ${settingsS.settings_container__margin}`\r\n    const paramClasses = `${settingsS.settings_param__decor}`\r\n    const inputClasses = `${settingsS.settings_checkbox}`\r\n    return (\r\n        <div className={containerClasses}>\r\n            <div className={paramClasses}>\r\n                <span>Remember me:</span>\r\n            </div>\r\n            <div className={inputClasses}>\r\n                {CreateFieldForm<'remember'>('remember', 'checkbox', renderField('input'), 'Remember me')}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RememberMe","import React, {FC} from \"react\";\r\nimport {CreateFieldForm} from \"../../../Common/createFieldForm\";\r\nimport {renderField} from \"../../../Validations/LoginValidate/loginAsyncForm\";\r\nimport settingsS from \"../../../../CssModules/Settings/settingsStyles.module.css\";\r\nimport loginS from \"../../../../CssModules/Login/loginStyles.module.css\"\r\n\r\ntype PropsType = {\r\n    captcha: string | null\r\n}\r\n\r\nexport const CaptchaField:FC<PropsType> = (props) => {\r\n    const containerClasses = `${loginS.captcha_container__block}`\r\n    const captchaImgClasses = `${loginS.captcha_img__decor}`\r\n    const inputClasses = `${settingsS.settings_input__decor} ${settingsS.settings_input__padding} ${settingsS.settings_input__margins}`\r\n    const blockClasses = `${loginS.captcha_block__margin}`\r\n    return (\r\n        <div className={containerClasses}>\r\n            <div className={blockClasses}>\r\n                {props.captcha && <img className={captchaImgClasses} src={props.captcha}/>}\r\n            </div>\r\n            <div className={blockClasses}>\r\n                <div className={`${inputClasses}`}>\r\n                    {props.captcha && CreateFieldForm<'captcha'>('captcha', 'text', renderField('input'), 'Captcha')}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType, FC} from 'react'\r\nimport {InjectedFormProps, reduxForm, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form'\r\nimport validate from './loginValidateSync'\r\nimport asyncValidate from './loginValidateAsync'\r\nimport Content from \"../../../CssModules/content.module.css\";\r\nimport EmailField from \"../../UpperMenu/Login/LoginPage/email\";\r\nimport PasswordField from \"../../UpperMenu/Login/LoginPage/password\";\r\nimport RememberMe from \"../../UpperMenu/Login/LoginPage/rememberMe\";\r\nimport settingsS from \"../../../CssModules/Settings/settingsStyles.module.css\";\r\nimport {CaptchaField} from \"../../UpperMenu/Login/LoginPage/captcha\";\r\nimport loginS from \"../../../CssModules/Login/loginStyles.module.css\"\r\nimport ErrorSVG from \"../../../img/fail-1.1s-128px.svg\"\r\n\r\n// type FormControlPropsType = {\r\n//     meta: WrappedFieldMetaProps\r\n// }\r\n\r\nexport const renderField: (Component: any) => ({input, label, type, meta: {asyncValidating, touched, error}}: { input: any; label: any; type: any; meta: { asyncValidating: any; touched: any; error: any } }) => any = (Component: ComponentType) => ({input, label, type, meta: {asyncValidating, touched, error}}) => (\r\n    <div>\r\n        <div className={asyncValidating ? 'async-validating' : ''}>\r\n            <Component {...input} type={type} placeholder={label}/>\r\n            {touched && error && <span>{error}</span>}\r\n        </div>\r\n    </div>\r\n)\r\n\r\ntype mapStateProps = {\r\n    buttonRequest: boolean\r\n    captcha: string | null\r\n    initialValues: boolean\r\n}\r\n\r\ntype mapDispatchType = {\r\n    logThunk: (email: string, password: string, remember: boolean, captcha: string) => Promise<void>\r\n}\r\n\r\ntype formDataType = {\r\n    email: string\r\n    password: string\r\n    remember: boolean\r\n    captcha: string\r\n}\r\n\r\ntype PropsType = mapDispatchType & mapStateProps\r\n\r\nconst AsyncValidationForm:FC<InjectedFormProps<PropsType> & PropsType> = (props) => {\r\n    const {handleSubmit, pristine, reset, submitting} = props\r\n    let onSubmit = (formData: formDataType) => {\r\n        props.logThunk(formData.email, formData.password, formData.remember, formData.captcha)\r\n    };\r\n    const containerClasses = `${settingsS.settings_container__flex} ${settingsS.settings_container__margin}`\r\n    const buttonClasses = `${settingsS.settings__button} ${settingsS.settings__buttonWidth} ${settingsS.settings_button__padding}`\r\n    const errorClass = `${loginS.captcha_error__decor}`\r\n    return (\r\n        //@ts-ignore\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={`${Content.content__menu_decorationBlocks}`}>\r\n                <EmailField/>\r\n                <PasswordField/>\r\n                <RememberMe/>\r\n                <CaptchaField captcha={props.captcha}/>\r\n                {props.error &&\r\n                <div className={`${containerClasses}`}>\r\n                    <div className={`${errorClass} ${containerClasses}`}>\r\n                        <div><img src={ErrorSVG}/></div>\r\n                        <div className={`${loginS.captcha_errorText__margin}`}>\r\n                            <span>{props.error}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n                <div className={containerClasses}>\r\n                    <button disabled={props.buttonRequest}\r\n                            className={`${buttonClasses} ${props.buttonRequest && settingsS.settings__buttonDisabled}`}\r\n                            type=\"submit\"\r\n                    >\r\n                        Sign Up\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<ComponentType>({\r\n    form: 'asyncValidation', // a unique identifier for this form\r\n    //@ts-ignore\r\n    validate,\r\n    asyncValidate,\r\n    asyncBlurFields: ['email'],\r\n})(AsyncValidationForm)\r\n\r\n\r\n","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    postLogThunk,\r\n} from \"../../../DataBases/Reducers/LoginReducer\";\r\nimport {LoginPage} from \"./LoginPage\";\r\nimport {AppStateType} from \"../../../DataBases/Redux/Store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        buttonRequest: state.loginReducer.buttonRequest,\r\n        captcha: state.loginReducer.captcha,\r\n        isLogged: state.loginReducer.isLogged,\r\n        initialized: state.loginReducer.loadProfileData\r\n    }\r\n};\r\n\r\n\r\n// @ts-ignore\r\nexport const LoginReduxForm = connect(mapStateToProps,\r\n    {postLogThunk}\r\n    // @ts-ignore\r\n)(LoginPage)\r\n\r\n","import React, {FC} from \"react\";\r\nimport Person from \"../../../../CssModules/UpperMenu/UpperMenu.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AsyncValidationForm from \"../../../Validations/LoginValidate/loginAsyncForm\";\r\nimport {postLogThunk} from \"../../../DataBases/Reducers/LoginReducer\";\r\n\r\ntype mapStateType = {\r\n    buttonRequest: boolean\r\n    captcha: string | null\r\n    isLogged: boolean\r\n    initialized: boolean\r\n}\r\n\r\ntype mapDispatch = {\r\n    postLogThunk: (email: string, password: number, remember: boolean, captcha: string) => void\r\n}\r\n\r\ntype PropsType = mapStateType & mapDispatch\r\n\r\nexport const LoginPage:FC<PropsType> = (props) => {\r\n    let buttonLoginClasses =\r\n        `\r\n    ${Person.log__padding}\r\n    ${Person.log__button} \r\n    `;\r\n    if (props.isLogged && props.initialized) return <Redirect to='/profile'/>;\r\n    return (\r\n        <div>\r\n            <AsyncValidationForm\r\n                buttonRequest={props.buttonRequest}\r\n                logThunk={props.postLogThunk}\r\n                class={buttonLoginClasses}\r\n                captcha={props.captcha}\r\n                initialValues={{'remember': false}}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Field} from \"redux-form\";\r\nimport {CreateFieldForm, GetStringKeys} from \"../../Common/createFieldForm\";\r\nimport {renderField} from \"../../Validations/LoginValidate/loginAsyncForm\";\r\nimport settingsS from \"../../../CssModules/Settings/settingsStyles.module.css\";\r\n\r\n\r\ntype nameType = {\r\n    aboutMe: string\r\n}\r\n\r\ntype keyType = GetStringKeys<nameType>\r\n\r\nfunction ChangeAboutMe(props: any) {\r\n    const containerClasses = `${settingsS.settings_container__flex} ${settingsS.settings_container__margin}`\r\n    const paramClasses = `${settingsS.settings_param__decor}`\r\n    const inputClasses = `${settingsS.settings_input__decor} ${settingsS.settings_input__padding} ${settingsS.settings_input__margins}`\r\n    return (\r\n        <div className={containerClasses}>\r\n            <div className={paramClasses}>\r\n                <span>About me:</span>\r\n            </div>\r\n            <div className={inputClasses}>\r\n                {CreateFieldForm<keyType>('aboutMe', 'text', renderField('textarea'), 'Tell about yourself')}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChangeAboutMe\r\n","import React from \"react\";\r\nimport {CreateFieldForm, GetStringKeys} from \"../../Common/createFieldForm\";\r\nimport {renderField} from \"../../Validations/LoginValidate/loginAsyncForm\";\r\nimport settingsS from \"../../../CssModules/Settings/settingsStyles.module.css\"\r\nimport {ContactsType} from \"../../Common/types\";\r\n\r\ntype PropsType = { contacts: ContactsType }\r\n\r\n\r\nfunction ChangeContacts(props: PropsType) {\r\n    const containerClasses = `${settingsS.settings_container__flex} ${settingsS.settings_container__margin}`\r\n    const paramClasses = `${settingsS.settings_param__decor}`\r\n    const inputClasses = `${settingsS.settings_input__decor} ${settingsS.settings_input__padding} ${settingsS.settings_input__margins}`\r\n    const keys = props.contacts && Object.keys(props.contacts) || ['facebook', 'website', 'vk', 'twitter', 'instagram', 'youtube', 'github', 'mainLink']\r\n    return (\r\n        <div>\r\n            { keys.map(key => {\r\n                return (\r\n                    <div key={key} className={containerClasses}>\r\n                        <div className={paramClasses}>\r\n                            <span>\r\n                                {key[0].toUpperCase() + key.slice(1) + ':'}\r\n                            </span>\r\n                        </div>\r\n                        <div className={inputClasses}>\r\n                            {CreateFieldForm<any>(`contacts.${key}`, 'text', renderField('input'), `Your ${key} link`)}\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default ChangeContacts\r\n","import React from \"react\";\r\n\r\nexport type validatorType = (value: string) => string | undefined\r\n\r\nconst validate: validatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport default validate\r\n","import React from \"react\";\r\nimport {Field} from \"redux-form\";\r\nimport {CreateFieldForm, GetStringKeys} from \"../../Common/createFieldForm\";\r\nimport {renderField} from \"../../Validations/LoginValidate/loginAsyncForm\";\r\nimport validate from \"../../Common/validator\";\r\nimport settingsS from \"../../../CssModules/Settings/settingsStyles.module.css\";\r\n\r\n\r\nlet required = validate('lookingForAJobDescription')\r\n\r\ntype nameType = {\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: string\r\n}\r\n\r\ntype keyType = GetStringKeys<nameType>\r\n\r\nfunction ChangeLookJob(props: any) {\r\n    const containerClasses = `${settingsS.settings_container__flex} ${settingsS.settings_container__margin}`\r\n    const paramClasses = `${settingsS.settings_param__decor}`\r\n    const inputClasses = `${settingsS.settings_input__decor} ${settingsS.settings_input__padding} ${settingsS.settings_input__margins}`\r\n    const checkBoxClasses = `${settingsS.settings_checkbox}`\r\n    return (\r\n        <div>\r\n            <div className={containerClasses}>\r\n                <div className={paramClasses}>\r\n                    <span>My skills:</span>\r\n                </div>\r\n                <div className={inputClasses}>\r\n                    {CreateFieldForm<keyType>('lookingForAJobDescription', 'text',\r\n                        renderField('textarea'),null, null,[validate]\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <div className={containerClasses}>\r\n                <div className={paramClasses}>\r\n                    <span>Looking for job:</span>\r\n                </div>\r\n                <div className={checkBoxClasses}>\r\n                    {CreateFieldForm('lookingForAJob', 'checkbox', renderField('input'), '')}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChangeLookJob\r\n","import React, {useState} from \"react\";\r\nimport {Field} from \"redux-form\";\r\nimport {CreateFieldForm, GetStringKeys} from \"../../Common/createFieldForm\";\r\nimport {renderField} from \"../../Validations/LoginValidate/loginAsyncForm\";\r\nimport settingsS from \"../../../CssModules/Settings/settingsStyles.module.css\";\r\n\r\ntype nameType = {\r\n    fullName: string\r\n}\r\n\r\ntype keyType = GetStringKeys<nameType>\r\n\r\nfunction ChangeName(props: any) {\r\n    const containerClasses = `${settingsS.settings_container__flex} ${settingsS.settings_container__margin}`\r\n    const paramClasses = `${settingsS.settings_param__decor}`\r\n    const inputClasses = `${settingsS.settings_input__decor} ${settingsS.settings_input__padding} ${settingsS.settings_input__margins}`\r\n    return (\r\n        <div className={containerClasses}>\r\n            <div className={paramClasses}>\r\n                <span>Name:</span>\r\n            </div>\r\n            <div className={inputClasses}>\r\n                {CreateFieldForm<keyType>('fullName', 'text', renderField('input'), 'What is your name ?')}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ChangeName\r\n","import React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Settings} from \"./settings\";\r\nimport {putProfileInfoThunk} from \"../DataBases/Reducers/ProfileInfoReducer\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {compose} from \"redux\";\r\nimport {authRedirect} from \"../Common/redirectToLogin\";\r\nimport validate from \"../Common/validator\";\r\nimport {AppStateType} from \"../DataBases/Redux/Store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        id: state.profileInfoReducer.logged.userId,\r\n        initialValues: state.profileInfoReducer.logged,\r\n        contacts: state.profileInfoReducer.logged.contacts\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const SettingsForm = compose<ComponentType>(\r\n    connect(mapStateToProps, {putProfileInfoThunk}),\r\n    reduxForm({ form: 'settings', enableReinitialize : true}),\r\n    authRedirect\r\n)(Settings)\r\n","import React, {FC, useState} from \"react\";\r\nimport ChangeAboutMe from \"./ChangeAboutMe/changeAboutMe\";\r\nimport ChangeContacts from \"./ChangeContacts/changeContacts\";\r\nimport ChangeLookJob from \"./ChangeLookJob/changeLookJob\";\r\nimport ChangeName from \"./Ð¡hangeName/changeNameClass\";\r\nimport settingsS from \"../../CssModules/Settings/settingsStyles.module.css\"\r\nimport Content from \"../../CssModules/content.module.css\";\r\nimport {ContactsType, ProfileType} from \"../Common/types\";\r\nimport {InjectedFormProps} from \"redux-form\";\r\n\r\ntype mapStateType = {\r\n    id: number\r\n    initialValues: ProfileType,\r\n    contacts: ContactsType\r\n}\r\n\r\ntype mapDispatchType = {\r\n    putProfileInfoThunk: (data: any, id: number) => void\r\n}\r\n\r\ntype submitType = {\r\n    fullName: string\r\n    contacts: ContactsType\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n    lookingForAJob: boolean\r\n}\r\n\r\ntype PropsType = mapStateType & mapDispatchType & submitType\r\n\r\nexport const Settings:FC<InjectedFormProps<PropsType> & PropsType> = (props) => {\r\n    let onSubmit = async (data: submitType) => {\r\n        setDisabled(true)\r\n        await props.putProfileInfoThunk(data, props.id)\r\n        setDisabled(false)\r\n    }\r\n    const [disabled, setDisabled] = useState(false)\r\n    const buttonClasses = `${settingsS.settings__button} ${settingsS.settings__buttonWidth} ${settingsS.settings_button__padding}`\r\n    const containerClasses = `${settingsS.settings_container__flex} ${settingsS.settings_container__margin}`\r\n    return(\r\n        <div className={`${Content.content__menu_decorationBlocks}`}>\r\n            <form onSubmit={props.handleSubmit(onSubmit)}>\r\n                <ChangeName/>\r\n                <ChangeContacts contacts={props.contacts}/>\r\n                <ChangeAboutMe/>\r\n                <ChangeLookJob/>\r\n                <div className={containerClasses}>\r\n                    <button disabled={disabled} className={`${buttonClasses} ${disabled && settingsS.settings__buttonDisabled}`}>Save</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport Person from \"../../../../CssModules/Dialog/PersonDialog.module.css\";\r\nimport Posts from \"../../../../CssModules/Profile/MyPosts/posts.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype mapStateToProps = {\r\n    id: number\r\n    mesId: number\r\n    viewed: boolean\r\n    senderId: number\r\n    avatars: string\r\n    message: string\r\n    who: string\r\n    date: string\r\n    deleteMessage: (mesId: number, id: number) => void\r\n    setAnotherProfile: (id: number, who: string) => void\r\n    myId: number\r\n}\r\n\r\n\r\nexport const Message:FC<mapStateToProps> = (props) => {\r\n    let setDeleteMessage = () => {\r\n        props.deleteMessage(props.mesId, props.id)\r\n    };\r\n    let throwToProfile = () => {\r\n        let meOrNot = props.senderId === props.myId ? 'me' : 'notMe'\r\n        props.setAnotherProfile(props.senderId, meOrNot)\r\n    }\r\n    return (\r\n        <div className={`${!props.viewed && Person.dialog_viewedMessages__color}`}>\r\n            <div className={Person.dialog__flex}>\r\n                <NavLink onClick={throwToProfile} to={`/profile/${props.senderId}`}\r\n                         className={`${Person.dialog_name__margin}`}>\r\n                    <img className={Person.dialog_img} src={props.avatars}/>\r\n                </NavLink>\r\n                <div className={`${Person.dialog_name} ${Person.dialog_name__margin}`}>\r\n                    <p>{props.who}</p>\r\n                </div>\r\n                <div className={`${Person.dialog_time} ${Person.dialog_name__margin}`}>\r\n                    <p>{props.date}</p>\r\n                </div>\r\n                <div className={`${Person.deleteButton__marginLeft}`}>\r\n                    <button onClick={setDeleteMessage} className={` ${Posts.deleteButton__decor}`}><span>&#10005;</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className={`${Person.message__marginLeft} ${Person.message__containerSize}`}>\r\n                <p className={`${Person.message__marginTop}`}>{props.message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport Person from \"../../../../CssModules/Dialog/PersonDialog.module.css\";\r\nimport {DialogType} from \"../../../Common/types\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogs: Array<DialogType>\r\n    id: number\r\n}\r\n\r\nexport const Upper:FC<mapStateToPropsType> = (props) => {\r\n    return(\r\n        <div className={`${Person.upper__border}  ${Person.upper__marginBottom}`}>\r\n            <p className={`\r\n            ${Person.upper__font} \r\n            ${Person.upper_text__margin} \r\n            ${Person.upper_text__padding}\r\n            `}\r\n            >\r\n                {`${props.dialogs[props.id].userName}`}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {actionsMessages, postMessageThunk} from \"../../../../DataBases/Reducers/MessagesReducer\";\r\nimport {Input} from \"./DialogInput\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {AppStateType} from \"../../../../DataBases/Redux/Store\";\r\n\r\ntype mapPropsType = {\r\n    loc: number\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType, props: mapPropsType)  => {\r\n    let dialogId: number = props.loc;\r\n    let index = 0;\r\n    for (let i = 0; i < state.messageReducer.Dialogs.length; i++){\r\n        if (dialogId === state.messageReducer.Dialogs[i].id){\r\n            index = i\r\n        }\r\n    }\r\n    return {\r\n        Temp: state.messageReducer.Dialogs[index].Temp,\r\n        id: dialogId,\r\n        index,\r\n        me: state.profileInfoReducer.logged\r\n\r\n    }\r\n};\r\n\r\nconst updateMessageCreation = actionsMessages.updateMessageCreation\r\n\r\n\r\nconst InputContainer = compose(\r\n    connect(mapStateToProps, {updateMessageCreation, postMessageThunk}),\r\n)(Input);\r\n\r\n\r\nexport default InputContainer\r\n","import React, {FC, RefObject} from \"react\";\r\nimport Person from \"../../../../../CssModules/Dialog/PersonDialog.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport {ProfileType} from \"../../../../Common/types\";\r\n\r\n\r\n\r\n\r\ntype mapStateToProps = {\r\n    Temp: string\r\n    id: number\r\n    index: number\r\n    me: ProfileType\r\n}\r\n\r\ntype mapDispatchType = {\r\n    postMessageThunk: (id: number, text: string, me: ProfileType) => void\r\n    updateMessageCreation: (text: string, index: number) => void\r\n}\r\n\r\ntype PropsType = mapStateToProps & mapDispatchType\r\n\r\nexport const Input:FC<PropsType> = (props) => {\r\n    let ref = React.createRef<HTMLInputElement>();\r\n    let post = (event: any) => {\r\n        if (event.which === 13 && ref.current) {\r\n            let text = ref.current.value\r\n            props.postMessageThunk(props.id, text, props.me)\r\n            // ref.current.value = ''\r\n        }\r\n    }\r\n    let currentText = () => {\r\n        let text\r\n        if (ref.current) {\r\n            text = ref.current.value;\r\n            props.updateMessageCreation(text, props.index)\r\n        }\r\n    };\r\n    return(\r\n        <div className={`${Person.input__margins} ${Person.input__borderTop} ${Person.input__decor}`}>\r\n            <input\r\n                onChange={currentText}\r\n                onKeyPress={post}\r\n                value={props.Temp}\r\n                ref={ref}\r\n                className={Person.inputField__border}\r\n                placeholder='Your message'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {actionsProfile, postProfilePhotoThunk, setAnotherProfile} from \"../../../DataBases/Reducers/ProfileInfoReducer\";\r\nimport {\r\n    deleteMessageThunk,\r\n    getUserAllMessagesThunk,\r\n    putNewDialogThunk\r\n} from \"../../../DataBases/Reducers/MessagesReducer\";\r\nimport {authRedirect} from \"../../../Common/redirectToLogin\";\r\nimport {DialogPage} from \"./DialogPage\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.usersReducer.isFetching,\r\n        myId: state.profileInfoReducer.logged.userId,\r\n        myProfile: state.profileInfoReducer.logged,\r\n        dialogs: state.messageReducer.Dialogs\r\n    }\r\n}\r\n\r\n\r\nexport const DialogPageContainer =\r\n    compose<ComponentType>\r\n    (\r\n        connect(mapStateToProps,\r\n            {deleteMessageThunk, setAnotherProfile,getUserAllMessagesThunk}),\r\n        withRouter,\r\n        authRedirect\r\n    )(DialogPage)\r\n","import React, {FC, useEffect} from \"react\";\r\nimport Content from '../../../../CssModules/content.module.css';\r\nimport Person from '../../../../CssModules/Dialog/PersonDialog.module.css'\r\nimport {Message} from \"./DialogMessage\";\r\nimport {Upper} from \"./DialogUpper\";\r\nimport InputContainer from \"./DialogInput/DialogInputContainer\";\r\nimport Preloader from \"../../../Common/Preloader\";\r\nimport {DialogType, MessageType, ProfileType} from \"../../../Common/types\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    isFetching: boolean\r\n    myId: number\r\n    myProfile: ProfileType\r\n    dialogs: Array<DialogType>\r\n}\r\n\r\ntype mapDispatchType = {\r\n    getUserAllMessagesThunk: (loc: number, myProfile: ProfileType) => void\r\n    deleteMessageThunk: (mesId: number, id: number) => void\r\n    setAnotherProfile: (id: number, who: string) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & RouteComponentProps<{userID: string}> & mapDispatchType\r\n\r\nexport const DialogPage:FC<PropsType> = (props) => {\r\n    let loc = Number(props.match.params.userID);\r\n    useEffect(() => {\r\n        props.getUserAllMessagesThunk(loc, props.myProfile)\r\n    }, [props.dialogs.length === 0])\r\n    let currentMessages: Array<MessageType> = [];\r\n    let index = 0;\r\n    for (let i = 0; i < props.dialogs.length; i++){\r\n        if (loc === props.dialogs[i].id){\r\n            currentMessages = props.dialogs[i].Messages\r\n            index = i\r\n        }\r\n    }\r\n    let allDialog = currentMessages.map( mes => <Message\r\n        key={mes.id}\r\n        id={props.dialogs[index].id}\r\n        mesId={mes.id}\r\n        viewed={mes.viewed}\r\n        senderId={mes.senderId}\r\n        avatars={mes.Avatar}\r\n        message={mes.body}\r\n        who={mes.senderName}\r\n        date={mes.addedAt}\r\n        deleteMessage={props.deleteMessageThunk}\r\n        setAnotherProfile={props.setAnotherProfile}\r\n        myId={props.myId}\r\n    />)\r\n\r\n    if(props.isFetching) return <Preloader/>\r\n    return(\r\n        <div>\r\n            <div className={`${Content.content__menu_decorationBlocks} ${Person.paddingOff}`}>\r\n                <Upper id={index}\r\n                       dialogs={props.dialogs}\r\n                />\r\n                <div className={`${Person.container}`}>\r\n                    {allDialog}\r\n                </div>\r\n                <InputContainer loc={loc}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Dialog from \"../../../../CssModules/Dialog/DialogFriend.module.css\";\r\nimport Friend from \"../../../../CssModules/Profile/FriendList/Friends.module.css\";\r\nimport {ProfileType} from \"../../../Common/types\";\r\n\r\ntype mapStateToPropsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n    newMess: number\r\n    me: ProfileType\r\n}\r\n\r\ntype mapDispatchType = {\r\n    getDialogs: (id: number, me: ProfileType) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchType\r\n\r\nexport const MiniDialogs:FC<PropsType> = (props) => {\r\n    let get = () => {\r\n        props.getDialogs(props.id, props.me)\r\n    }\r\n\r\n    return (\r\n        <div className={`${props.newMess && Dialog.dialog_containerViewMessages}`} onClick={get}>\r\n            <NavLink to={'/dialog/' + props.id}\r\n                     className={`${Dialog.display__flex} ${Dialog.hover__decor} ${Dialog.NavLinks__fontsDecor}`}>\r\n                <div>\r\n                    <img className={`${Friend.Friend__Ava} ${Dialog.display__AvaPosition}`} src={props.img}/>\r\n                </div>\r\n                <div className={Dialog.border__borderBottom}>\r\n                    <p className={`${Dialog.text__NameFontsDecor}`}>{props.name}</p>\r\n                    <p className={`${Dialog.text__NameFontsDecor}`}>{props.newMess > 0 && ' +' + props.newMess}</p>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MiniDialogs\r\n","import React from \"react\";\r\nimport coon from \"../../img/NoResultSearch/coon.jpg\"\r\nimport ResultS from \"../../CssModules/NoResultSearch/resultStyles.module.css\"\r\n\r\nfunction NoResultSearch(props) {\r\n    const imgClasses = `${ResultS.noResult_img__decor} ${ResultS.noResult_img__width}`\r\n    return (\r\n        <div>\r\n            <div className={ResultS.noResult_text__decor}>\r\n                <span>We haven't found anything, but we've already sent our agent to punish the culprit</span>\r\n            </div>\r\n            <div className={ResultS.noResult_img__margin}>\r\n                <img className={imgClasses} src={coon}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default NoResultSearch\r\n","import React, {FC} from \"react\";\r\nimport MiniDialogs from \"./MiniDialogs/DialogsMini\";\r\nimport NoResultSearch from \"../../Common/NoResultSearch\";\r\nimport {DialogType, ProfileType} from \"../../Common/types\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogs: Array<DialogType>\r\n    me: ProfileType,\r\n    tempSearch: string\r\n}\r\n\r\ntype mapDispatchType = {\r\n    getUserAllMessagesThunk: (id: number, me: ProfileType) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchType\r\n\r\nexport const DialogLists:FC<PropsType> = (props) => {\r\n    let dialogsData\r\n    let pattern = new RegExp(props.tempSearch, 'giy');\r\n    dialogsData = props.dialogs\r\n        .map(dialog => {\r\n                if (props.tempSearch.length === 0 || dialog.userName.match(pattern)) {\r\n                    return <MiniDialogs\r\n                        key={dialog.id}\r\n                        id={dialog.id}\r\n                        name={dialog.userName}\r\n                        img={dialog.photos.large}\r\n                        newMess={dialog.newMessagesCount}\r\n                        getDialogs={props.getUserAllMessagesThunk}\r\n                        me={props.me}\r\n                    />\r\n                }\r\n            }\r\n        );\r\n    for (let i = 0; i < dialogsData.length; i++) {\r\n        if (dialogsData[i]) return (<div>{dialogsData}</div>)\r\n    }\r\n    return (\r\n        <div>\r\n            <NoResultSearch/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogLists\r\n","import {connect} from \"react-redux\";\r\nimport DialogLists from \"./DialogList\";\r\nimport {getUserAllMessagesThunk} from \"../../DataBases/Reducers/MessagesReducer\";\r\nimport {authRedirect} from \"../../Common/redirectToLogin\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../DataBases/Redux/Store\";\r\nimport {ComponentType} from \"react\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.messageReducer.Dialogs,\r\n        me: state.profileInfoReducer.logged,\r\n        tempSearch: state.messageReducer.tempSearch\r\n    }\r\n}\r\n\r\n\r\nconst DialogsListContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserAllMessagesThunk}),\r\n    authRedirect\r\n)(DialogLists)\r\n\r\nexport default DialogsListContainer\r\n","import {connect} from \"react-redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {actionsMessages} from \"../../DataBases/Reducers/MessagesReducer\";\r\nimport {AppStateType} from \"../../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        tempSearch: state.messageReducer.tempSearch\r\n    }\r\n}\r\n\r\nconst updateSearchText = actionsMessages.updateSearchText\r\n\r\nexport const DialogContainer = connect(mapStateToProps, {updateSearchText})(Dialogs)\r\n","import React, {FC} from \"react\";\r\nimport DialogsListContainer from \"./DialogListContainer\";\r\nimport Content from \"../../../CssModules/content.module.css\";\r\nimport Dialog from '../../../CssModules/Dialog/DialogFriend.module.css';\r\n\r\ntype mapStateToPropsType = {\r\n    tempSearch: string\r\n}\r\n\r\ntype mapDispatchProps = {\r\n    updateSearchText: (text: string) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchProps\r\n\r\n\r\n\r\nexport const Dialogs:FC<PropsType> = (props) => {\r\n    let temp = React.createRef<HTMLInputElement>();\r\n    let currentText = () => {\r\n        if (temp.current) {\r\n            let text = temp.current.value;\r\n            props.updateSearchText(text)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`${Content.content__menu_decorationBlocks}`}>\r\n            <div>\r\n                <input className={`${Dialog.input__width} ${Dialog.input__decor} ${Dialog.input__padding}`}\r\n                       placeholder='Search'\r\n                       ref={temp}\r\n                       value={props.tempSearch}\r\n                       onChange={currentText}\r\n                />\r\n\r\n            </div>\r\n            <div>\r\n                <DialogsListContainer/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Dialog from \"../../../../CssModules/Dialog/DialogFriend.module.css\";\r\nimport Friend from \"../../../../CssModules/Profile/FriendList/Friends.module.css\";\r\n\r\ntype mapStateToPropsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n    isFetching: boolean\r\n}\r\n\r\ntype mapDispatchType = {\r\n    getProfileThunk: (id: number, who: string) => void\r\n    setAnotherProfile: (id: number, who: string) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchType\r\n\r\nexport const ThatFriend: FC<PropsType> = (props) => {\r\n    let throwProfileInfo = (e: React.MouseEvent) => {\r\n        if (props.isFetching) return e.preventDefault()\r\n        props.setAnotherProfile(props.id, 'notMe')\r\n    }\r\n    return (\r\n        <div>\r\n            <NavLink onClick={throwProfileInfo} to={'/profile/' + props.id}\r\n                     className={`${Dialog.display__flex} ${Dialog.hover__decor} ${Dialog.NavLinks__fontsDecor}`}>\r\n                <div>\r\n                    <img className={`${Friend.Friend__Ava} ${Dialog.display__AvaPosition}`} src={props.img} alt='Ava'/>\r\n                </div>\r\n                <div className={Dialog.border__borderBottom}>\r\n                    <p className={`${Dialog.text__NameFontsDecor}`}>{`${props.name}`}</p>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AllFriends} from \"./AllFriends\";\r\nimport {getProfileThunk, setAnotherProfile} from \"../../../DataBases/Reducers/ProfileInfoReducer\";\r\nimport {AppStateType} from \"../../../DataBases/Redux/Store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friends: state.friendsReducer.friends,\r\n        tempSearch: state.friendsReducer.tempSearch,\r\n        isFetching: state.usersReducer.isFetching\r\n    }\r\n};\r\n\r\nexport const AllFriendsContainer = connect(mapStateToProps, {getProfileThunk, setAnotherProfile})(AllFriends);\r\n","import React, {FC} from \"react\";\r\nimport {ThatFriend} from \"./ThatFriend\";\r\nimport NoResultSearch from \"../../../Common/NoResultSearch\";\r\nimport {FriendType} from \"../../../Common/types\";\r\n\r\ntype mapStateToPropsType = {\r\n    friends: Array<FriendType>,\r\n    tempSearch: string\r\n    isFetching: boolean\r\n}\r\n\r\ntype mapDispatchType = {\r\n    getProfileThunk: (id: number, who: string) => void\r\n    setAnotherProfile: (id: number, who: string) => void\r\n}\r\n\r\ntype PropsType = mapStateToPropsType & mapDispatchType\r\n\r\nexport const AllFriends:FC<PropsType> = (props) => {\r\n    let pattern = new RegExp(props.tempSearch, 'giy' );\r\n    let allFriends = props.friends\r\n        .map(char => {\r\n            if (props.tempSearch.length === 0 || char.name.match(pattern)) {\r\n                return <ThatFriend\r\n                    key={char.id}\r\n                    id={char.id}\r\n                    name={char.name}\r\n                    img={char.avatar}\r\n                    isFetching={props.isFetching}\r\n                    getProfileThunk={props.getProfileThunk}\r\n                    setAnotherProfile={props.setAnotherProfile}\r\n                />\r\n            }\r\n        }\r\n    );\r\n    for (let i = 0; i < allFriends.length; i++) {\r\n        if (allFriends[i]) return (\r\n            <div>\r\n                <p>Friends:<span>{props.friends.length}</span></p>\r\n                {allFriends}\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <NoResultSearch/>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {actionsFriends} from \"../../DataBases/Reducers/FriendsReducer\";\r\nimport {FriendsSearch} from \"./FriendsSearch\";\r\nimport {AppStateType} from \"../../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        tempSearch: state.friendsReducer.tempSearch\r\n    }\r\n}\r\nconst updateSearch = actionsFriends.updateSearch\r\n\r\nexport const FriendSearchContainer = connect(mapStateToProps, {updateSearch})(FriendsSearch)","import React, {FC} from \"react\";\r\nimport Friends from '../../../CssModules/Friends/Friends.module.css'\r\nimport Dialog from \"../../../CssModules/Dialog/DialogFriend.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Content from \"../../../CssModules/content.module.css\";\r\n\r\ntype mapStateToProps = {\r\n    tempSearch: string\r\n}\r\n\r\ntype mapDispatchType = {\r\n    updateSearch: (text: string) => void\r\n}\r\n\r\ntype PropsType = mapStateToProps & mapDispatchType\r\n\r\nexport const FriendsSearch:FC<PropsType> = (props) => {\r\n    let temp = React.createRef<HTMLInputElement>();\r\n    let currentText = () => {\r\n        if (temp.current) {\r\n            let text = temp.current.value;\r\n            props.updateSearch(text)\r\n        }\r\n    };\r\n    return(\r\n        <div className={Friends.container__displayFlex}>\r\n            <input\r\n                placeholder='Search friend...'\r\n                className={`${Dialog.input__width} ${Dialog.input__decor} ${Dialog.input__padding}`}\r\n                onChange={currentText}\r\n                ref={temp}\r\n                value={props.tempSearch}\r\n            />\r\n            <NavLink to='users'>\r\n                <button className={`${Content.content__asideRightButton_decor} ${Content.content__asideRightButtonPadding}`}>Find friends</button>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport Content from '../../../CssModules/content.module.css'\r\nimport {AllFriendsContainer} from \"./ThatFriend/AllFriendsContainer\";\r\nimport {FriendSearchContainer} from \"./friendsSearchContainer\";\r\n\r\nfunction MyFriends(props: any) {\r\n    return (\r\n        <div className={Content.content__menu_decorationBlocks}>\r\n            <FriendSearchContainer/>\r\n            <AllFriendsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyFriends\r\n","import {connect} from \"react-redux\";\r\nimport {actionsProfile} from \"../DataBases/Reducers/ProfileInfoReducer\";\r\nimport {NavigateMenu} from \"./NavigateMenu\";\r\nimport {AppStateType} from \"../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        freshDialogs: state.messageReducer.freshDialogs,\r\n    }\r\n}\r\n\r\nconst setProfile = actionsProfile.setProfile\r\n\r\nexport const NavigateMenuContainer = connect(mapStateToProps,  {setProfile})(NavigateMenu)\r\n","import React, {FC} from \"react\";\r\nimport MenuLeft from '../../CssModules/LeftMenu/menu.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    freshDialogs: number\r\n    setProfile: (val: boolean) => void\r\n}\r\n\r\nexport const NavigateMenu: FC<mapStateToPropsType> = (props) => {\r\n    let goToMyProfile = () => {\r\n        props.setProfile(true)\r\n    }\r\n    return (\r\n        <nav>\r\n            <ul className={`${MenuLeft.container__menu_grid}`}>\r\n                <li>\r\n                    <NavLink onClick={goToMyProfile} to='/profile'\r\n                             className={`${MenuLeft.container__menu_decoration}`}>Profile</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to='/dialogs' className={`${MenuLeft.container__menu_decoration}`}>Messages\r\n                        {props.freshDialogs > 0 && ' +' + props.freshDialogs}\r\n                    </NavLink>\r\n\r\n                </li>\r\n                <li>\r\n                    <NavLink to='/friends' className={`${MenuLeft.container__menu_decoration}`}>Friends</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to='/settings' className={`${MenuLeft.container__menu_decoration}`}>Settings</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n","import React, {Suspense} from \"react\";\r\nimport Objects from '../CssModules/DisplayView.module.css';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\"\r\nimport {AllUsersClassContainer} from \"./Friends/FindFriends/AllUsers/allUsersClassContainer\";\r\nimport {ProfileCenterInfoClassContainer} from \"./Profile/MainProfilePage/ProfileCenterInfoClassContainer\";\r\nimport {LoginReduxForm} from \"./UpperMenu/Login/LoginPage/LoginPageContainer\";\r\nimport {SettingsForm} from \"./Settings/settingsContainer\";\r\nimport {DialogPageContainer} from \"./Dialog/MainDialogPage/DialogPage/DialogPageContainer\";\r\nimport {DialogContainer} from \"./Dialog/MainDialogPage/DialogsContainer\";\r\nimport MyFriends from \"./Friends/myFriends/myFriends\";\r\nimport {NavigateMenuContainer} from \"./LeftMenu/navigateMenuContainer\";\r\n\r\nfunction Text(props: any) {\r\n    let Profile = () => <ProfileCenterInfoClassContainer/>;\r\n    let dialogs = () => <DialogContainer/>;\r\n    let personDialog = () => <DialogPageContainer/>;\r\n    let myFriends = () => <MyFriends/>;\r\n    let allUsers = () => <AllUsersClassContainer/>;\r\n    let loginPage = () => <LoginReduxForm/>;\r\n    let settingsPage = () => <SettingsForm/>\r\n    return (\r\n        <div className={`${Objects.main__displayGRid}`}>\r\n            <div>\r\n                <NavigateMenuContainer/>\r\n            </div>\r\n            <div>\r\n                <Switch>\r\n                    <Route path='/dialog/:userID' render={personDialog}/>\r\n                    <Route path='/profile' render={Profile}/>\r\n                    <Route path='/dialogs' render={dialogs}/>\r\n                    <Route path='/friends' render={myFriends}/>\r\n                    <Route path='/users' render={allUsers}/>\r\n                    <Route path='/login' render={loginPage}/>\r\n                    <Route path='/settings' render={settingsPage}/>\r\n                    <Redirect from=\"/\" to=\"/profile\"/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Text\r\n","import {connect} from \"react-redux\";\r\nimport {UpperLogInfo} from \"./UpperLogInfo\";\r\nimport {postLogOutThunk} from \"../../DataBases/Reducers/LoginReducer\";\r\nimport emptyPhoto from \"../../../img/Avatars/nullPhoto.jpg\"\r\nimport {AppStateType} from \"../../DataBases/Redux/Store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) =>{\r\n    return {\r\n        didLog: state.loginReducer.isLogged,\r\n        Avatar: state.profileInfoReducer.logged.photos.large || emptyPhoto,\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const UpperLogInfoContainer = connect(mapStateToProps, {postLogOutThunk})(UpperLogInfo)\r\n","import React, {FC} from \"react\";\r\nimport Person from '../../../CssModules/UpperMenu/UpperMenu.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype mapStateType = {\r\n    didLog: boolean\r\n    Avatar: string\r\n}\r\n\r\ntype mapDispatchType = {\r\n    postLogOutThunk: () => void\r\n}\r\n\r\ntype PropsType = mapStateType & mapDispatchType\r\n\r\n\r\nexport const UpperLogInfo:FC<PropsType> = (props) => {\r\n    let loginButtonClasses = `\r\n    ${Person.log__margin} \r\n    ${Person.log__padding}\r\n    ${Person.log__button} \r\n    ${Person.log__buttonWidth}\r\n    `;\r\n\r\n    let imgClasses = `\r\n    ${Person.log_img} \r\n    ${Person.log__padding}\r\n    ${Person.log_img__cursorPointer}\r\n    `;\r\n\r\n    let logOut = () => {\r\n        props.postLogOutThunk()\r\n    }\r\n    return (\r\n        <div className={Person.log_display__flex}>\r\n            <div className={`${Person.log__margin} `}>\r\n                {\r\n                    props.didLog ?\r\n                        <img\r\n                            className={imgClasses}\r\n                            src={props.Avatar}\r\n                            onClick={logOut}\r\n                        />\r\n                        :\r\n                        <NavLink to='/login'>\r\n                            <button className={loginButtonClasses}>\r\n                                Login\r\n                            </button>\r\n                        </NavLink>\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n\r\n}\r\n","import React from \"react\";\r\nimport UpMenu from \"../../CssModules/UpperMenu/UpperMenu.module.css\";\r\nimport {UpperLogInfoContainer} from \"./Login/upperLogInfoContainer\";\r\n\r\n\r\nfunction UpperClassContainer() {\r\n    return (\r\n        <div className={`${UpMenu.container__menu}`}>\r\n            <UpperLogInfoContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpperClassContainer\r\n","import Text from \"../mainText\";\r\nimport React from \"react\";\r\nimport UpperClassContainer from \"../UpperMenu/upperClassContainer\";\r\n\r\nfunction MacketApp(props: any) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <UpperClassContainer/>\r\n            </div>\r\n            <div className='container'>\r\n                <Text/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MacketApp\r\n","import React, {FC, useEffect} from \"react\";\r\nimport {actionsLogin} from \"../DataBases/Reducers/LoginReducer\";\r\nimport {initializeApp} from \"../DataBases/Reducers/ProfileInfoReducer\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport MacketApp from \"./Structure\";\r\nimport Preloader from \"../Common/Preloader\";\r\nimport {actionsMessages} from \"../DataBases/Reducers/MessagesReducer\";\r\nimport {API} from \"../DataBases/API/API\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../DataBases/Redux/Store\";\r\n\r\ntype mapStatePropsType = {\r\n    initializate: boolean\r\n    isLogged: boolean\r\n    isFetching: boolean\r\n}\r\n\r\ntype mapDispatchType = {\r\n    logData: (id: number | null, login: string | null, email: string | null) => void\r\n    initializeApp: (id: number | null) => void\r\n}\r\n\r\ntype PropsType = mapStatePropsType & mapDispatchType\r\n\r\nconst MacketAppClass:FC<PropsType> = (props) => {\r\n    useEffect(() => {\r\n        (async () => {\r\n            let data = await API.getAuth()\r\n            props.logData(data.data.id, data.data.login, data.data.email);\r\n            props.initializeApp(data.data.id)\r\n        })()\r\n    }, [])\r\n    if (props.isLogged && !props.initializate) return <Preloader/>\r\n    return (\r\n        <div>\r\n            {props.initializate && <MacketApp/>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initializate: state.loginReducer.loadProfileData,\r\n        isLogged: state.loginReducer.isLogged,\r\n        isFetching: state.usersReducer.isFetching\r\n    }\r\n}\r\n\r\nconst logData = actionsLogin.logData\r\n\r\nexport const MacketAppContainer = compose(\r\n    connect(mapStateToProps, {\r\n        logData,\r\n        initializeApp\r\n    }),\r\n    withRouter\r\n)(MacketAppClass)\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './MainSettings.css';\r\nimport './mediaQuery.css'\r\nimport './CssModules/content.module.css'\r\nimport './CssModules/LeftMenu/menu.module.css'\r\nimport './CssModules/Profile/MyPosts/posts.module.css'\r\nimport './CssModules/DisplayView.module.css'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./Components/DataBases/Redux/Store\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {MacketAppContainer} from \"./Components/MainStructure/structureContainer\";\r\n\r\n\r\nconst modalRoot = document.getElementById('root');\r\n\r\nexport class Modal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.el = document.createElement('div');\r\n    }\r\n\r\n    componentDidMount() {\r\n        modalRoot.appendChild(this.el);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        modalRoot.removeChild(this.el);\r\n    }\r\n\r\n    render() {\r\n        return ReactDOM.createPortal(\r\n            this.props.children,\r\n            this.el\r\n        );\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <MacketAppContainer/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status_buttons__flex\":\"statusStyles_status_buttons__flex__1aRTt\",\"status_button__decor\":\"statusStyles_status_button__decor__3yMJ0\",\"status__buttonDisabled\":\"statusStyles_status__buttonDisabled__2LzFm\",\"status__buttonWidth\":\"statusStyles_status__buttonWidth__3WfEn\",\"status_button__padding\":\"statusStyles_status_button__padding__3Ynzc\",\"status_button__margins\":\"statusStyles_status_button__margins__Ni2it\",\"status_input__decor\":\"statusStyles_status_input__decor__1KhNE\",\"status_input__padding\":\"statusStyles_status_input__padding__1TRpM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainInfo_contacts__flexDisplay\":\"mainInfo_mainInfo_contacts__flexDisplay__1rqnt\",\"mainInfo_value__margin\":\"mainInfo_mainInfo_value__margin__2KigZ\",\"mainInfo_value__width\":\"mainInfo_mainInfo_value__width__bm6Il\",\"mainInfo_key__width\":\"mainInfo_mainInfo_key__width__3okMZ\",\"mainInfo_value__decor\":\"mainInfo_mainInfo_value__decor___5Jwz\",\"mainInfo_key__decor\":\"mainInfo_mainInfo_key__decor__1393o\",\"mainInfo_showMore__decor\":\"mainInfo_mainInfo_showMore__decor__2Lftw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main__displayGRid\":\"DisplayView_main__displayGRid__3bHmY\",\"inside_ContentProfile__displayFlex\":\"DisplayView_inside_ContentProfile__displayFlex__2TxOr\",\"inside_ProfileCenter__FlexProportion\":\"DisplayView_inside_ProfileCenter__FlexProportion__1_IFS\",\"inside_ProfileRight__FlexProportion\":\"DisplayView_inside_ProfileRight__FlexProportion__3hNbW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container__menu_grid\":\"menu_container__menu_grid__21IYU\",\"container__menu_decoration\":\"menu_container__menu_decoration__1U-I3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"captcha_img__decor\":\"loginStyles_captcha_img__decor__1ZEWc\",\"captcha_container__block\":\"loginStyles_captcha_container__block__19rQu\",\"captcha_block__margin\":\"loginStyles_captcha_block__margin__1FXHe\",\"captcha_error__decor\":\"loginStyles_captcha_error__decor__2JhGE\",\"captcha_errorText__margin\":\"loginStyles_captcha_errorText__margin__15bhG\",\"captcha_error__block\":\"loginStyles_captcha_error__block__Hzwgt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Preloader__position\":\"Preloaders_Preloader__position__1lxWr\",\"Preloader__backgroundOpacity\":\"Preloaders_Preloader__backgroundOpacity__13lNx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fileUpload\":\"avatarEditor_fileUpload__2-0Ue\",\"avaEdit__button\":\"avatarEditor_avaEdit__button__3ky5i\",\"avaEdit__buttonDisabled\":\"avatarEditor_avaEdit__buttonDisabled__TeQ08\",\"avaEdit__buttonWidth\":\"avatarEditor_avaEdit__buttonWidth__3S9eQ\",\"avaEdit_button__padding\":\"avatarEditor_avaEdit_button__padding__2_Jvv\",\"avaEdit_button__margin\":\"avatarEditor_avaEdit_button__margin__2tFig\",\"crop\":\"avatarEditor_crop__-jLMX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noResult_img__width\":\"resultStyles_noResult_img__width__O36eF\",\"noResult_img__decor\":\"resultStyles_noResult_img__decor__1yh1U\",\"noResult_img__margin\":\"resultStyles_noResult_img__margin__26mzc\",\"noResult_text__decor\":\"resultStyles_noResult_text__decor__wmeca\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content__mainContentHeader\":\"content_content__mainContentHeader__eYjCR\",\"content__mainContentAvatar\":\"content_content__mainContentAvatar__3AMi1\",\"content__mainContentName\":\"content_content__mainContentName__3oUmt\",\"content__menu_decorationBlocks\":\"content_content__menu_decorationBlocks__3hw0x\",\"content__asideRightInput_decor\":\"content_content__asideRightInput_decor__2nyjJ\",\"content__asideRightButton_decor\":\"content_content__asideRightButton_decor__2xQ64\",\"content__asideRightDeleteButton_decor\":\"content_content__asideRightDeleteButton_decor__2ftR5\",\"content__asideRightButton_margin\":\"content_content__asideRightButton_margin__wsqLe\",\"content__asideRightButtonPadding\":\"content_content__asideRightButtonPadding__7sAjZ\",\"content__menuForm_overflow\":\"content_content__menuForm_overflow__3Budm\",\"show\":\"content_show__ry2Zv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input__decor\":\"Friends_input__decor__gSBIY\",\"container__displayFlex\":\"Friends_container__displayFlex__2y2bx\"};","module.exports = __webpack_public_path__ + \"static/media/sarumyan.1cb38a93.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pendalf.698b2495.jpg\";"],"sourceRoot":""}